// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2rAXy":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"fNmB3"}],"fNmB3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"1CJiQ"}],"1CJiQ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"6a0zu":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "2dba8b266701a6e1";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"dLPEP":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$b058 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$b058.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _mainView = require("./components/main-view/main-view");
// Import statement to indicate that you need to bundle `./index.scss`
var _indexScss = require("./index.scss");
var _edwardianScriptItcRegularTtf = require("url:./fonts/edwardian-script-itc-regular.ttf");
// Main component (will eventually use all the others)
class AnonymousCollection extends _reactDefault.default.Component {
    render() {
        return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: "anonymousCollection",
            __source: {
                fileName: "src/index.jsx",
                lineNumber: 11
            },
            __self: this,
            children: /*#__PURE__*/ _jsxRuntime.jsx(_mainView.MainView, {
                __source: {
                    fileName: "src/index.jsx",
                    lineNumber: 12
                },
                __self: this
            })
        }));
    }
}
// Finds the root of your app
const container = document.getElementsByClassName('app-container')[0];
// Tells React to render your app in the root DOM element
_reactDomDefault.default.render(/*#__PURE__*/ _reactDefault.default.createElement(AnonymousCollection), container);

  $parcel$ReactRefreshHelpers$b058.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","react-dom":"gkWJK","./components/main-view/main-view":"2zHas","./index.scss":"jUTZ8","url:./fonts/edwardian-script-itc-regular.ttf":"9CH5F","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"8xIwr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"hw7vv"}],"hw7vv":[function(require,module,exports) {
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"react":"6TuXu","object-assign":"jzTFF"}],"6TuXu":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"9WG5J"}],"9WG5J":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"jzTFF"}],"jzTFF":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"gkWJK":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"uMwNA"}],"uMwNA":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"6TuXu","object-assign":"jzTFF","scheduler":"lS3J3","scheduler/tracing":"aEthe"}],"lS3J3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"9ljDM"}],"9ljDM":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"aEthe":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"jlVvF"}],"jlVvF":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"2zHas":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$35bf = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$35bf.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MainView", ()=>MainView
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _app = require("firebase/app");
var _firestore = require("@firebase/firestore");
var _auth = require("firebase/auth");
var _mainViewScss = require("./main-view.scss");
var _reactRouterDom = require("react-router-dom");
var _logoView = require("../logo-view/logo-view");
var _navigationView = require("../navigation-view/navigation-view");
var _imageslideView = require("../imageslide-view/imageslide-view");
<<<<<<< Updated upstream
var _app = require("firebase/app");
var _lite = require("firebase/firestore/lite");
const firebaseConfig = {
    apiKey: "AIzaSyBBgAzuBjkjql4n5NpORB2ACC4yX5agEO4",
    authDomain: "anonymous-da3b5.firebaseapp.com",
    projectId: "anonymous-da3b5",
    storageBucket: "anonymous-da3b5.appspot.com",
    messagingSenderId: "1049067056124",
    appId: "1:1049067056124:web:eaf8db415d82e8a069a079",
    measurementId: "G-WC8RFHKR2V"
};
console.log('hi');
=======
>>>>>>> Stashed changes
class MainView extends _reactDefault.default.Component {
    constructor(){
        super();
        this.state = {
<<<<<<< Updated upstream
            art: ''
=======
            items: []
>>>>>>> Stashed changes
        };
        const config = {
            apiKey: "AIzaSyBBgAzuBjkjql4n5NpORB2ACC4yX5agEO4",
            authDomain: "anonymous-da3b5.firebaseapp.com",
            projectId: "anonymous-da3b5",
            storageBucket: "anonymous-da3b5.appspot.com",
            messagingSenderId: "1049067056124",
            appId: "1:1049067056124:web:b1a19a55ffe9da1a69a079",
            measurementId: "G-E1S6WBS8RV"
        };
        if (!_app.apps.length) _app.initializeApp(config);
    }
    componentDidMount() {
<<<<<<< Updated upstream
        const app = _app.initializeApp(firebaseConfig);
        const db = _lite.getFirestore(app);
        async function getData(db1) {
            const anonymousCol = _lite.collection(db1, 'anonymous');
            const anonymousSnapshot = await _lite.getDocs(anonymousCol);
            const dataList = anonymousSnapshot.docs.map((doc)=>doc.data()
            );
            this.setState({
                art: dataList
            });
        }
=======
        this.getData();
        _app.auth().signInAnonymously();
        console.log(this.state.items);
    }
    componentWillUnmount() {
        _app.auth = ()=>{
        };
    }
    getData() {
        _app.firestore().collection('anonymous').get().then((snapshot)=>{
            snapshot.docs.forEach((doc)=>{
                let item = doc.data();
                this.setState({
                    items: item
                });
            });
        });
>>>>>>> Stashed changes
    }
    render() {
        return(/*#__PURE__*/ _jsxRuntime.jsx(_reactRouterDom.BrowserRouter, {
            __source: {
                fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                lineNumber: 46
=======
                lineNumber: 61
>>>>>>> Stashed changes
            },
            __self: this,
            children: /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                __source: {
                    fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                    lineNumber: 47
=======
                    lineNumber: 62
>>>>>>> Stashed changes
                },
                __self: this,
                children: [
                    /*#__PURE__*/ _jsxRuntime.jsxs(_reactRouterDom.Route, {
                        exact: true,
                        path: "/",
                        __source: {
                            fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                            lineNumber: 48
=======
                            lineNumber: 63
>>>>>>> Stashed changes
                        },
                        __self: this,
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx(_logoView.LogoView, {
                                __source: {
                                    fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                                    lineNumber: 49
=======
                                    lineNumber: 64
>>>>>>> Stashed changes
                                },
                                __self: this
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsxs("div", {
                                className: "start",
                                __source: {
                                    fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                                    lineNumber: 50
=======
                                    lineNumber: 65
>>>>>>> Stashed changes
                                },
                                __self: this,
                                children: [
                                    /*#__PURE__*/ _jsxRuntime.jsx(_navigationView.NavigationView, {
                                        __source: {
                                            fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                                            lineNumber: 51
=======
                                            lineNumber: 66
>>>>>>> Stashed changes
                                        },
                                        __self: this
                                    }),
                                    /*#__PURE__*/ _jsxRuntime.jsx(_imageslideView.ImageSlideView, {
<<<<<<< Updated upstream
                                        __source: {
                                            fileName: "src/components/main-view/main-view.jsx",
                                            lineNumber: 52
=======
                                        art: this.state.items,
                                        __source: {
                                            fileName: "src/components/main-view/main-view.jsx",
                                            lineNumber: 67
>>>>>>> Stashed changes
                                        },
                                        __self: this
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ _jsxRuntime.jsxs(_reactRouterDom.Route, {
                        exact: true,
                        path: "/artist",
                        __source: {
                            fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                            lineNumber: 56
=======
                            lineNumber: 71
>>>>>>> Stashed changes
                        },
                        __self: this,
                        children: [
                            /*#__PURE__*/ _jsxRuntime.jsx(_logoView.LogoView, {
                                __source: {
                                    fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                                    lineNumber: 57
=======
                                    lineNumber: 72
>>>>>>> Stashed changes
                                },
                                __self: this
                            }),
                            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                                className: "start",
                                __source: {
                                    fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                                    lineNumber: 58
=======
                                    lineNumber: 73
>>>>>>> Stashed changes
                                },
                                __self: this,
                                children: /*#__PURE__*/ _jsxRuntime.jsx(_navigationView.NavigationView, {
                                    __source: {
                                        fileName: "src/components/main-view/main-view.jsx",
<<<<<<< Updated upstream
                                        lineNumber: 59
=======
                                        lineNumber: 74
>>>>>>> Stashed changes
                                    },
                                    __self: this
                                })
                            })
                        ]
                    })
                ]
            })
        }));
    }
}

  $parcel$ReactRefreshHelpers$35bf.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
<<<<<<< Updated upstream
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","./main-view.scss":"jyMAr","react-router-dom":"cpyQW","../logo-view/logo-view":"21Hac","../navigation-view/navigation-view":"3XDAu","../imageslide-view/imageslide-view":"cx3Hi","firebase/app":"1tQjj","firebase/firestore/lite":"jRsWt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"jyMAr":[function() {},{}],"cpyQW":[function(require,module,exports) {
=======
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","firebase/app":"5Ru3D","@firebase/firestore":"aolaA","firebase/auth":"cAxUs","./main-view.scss":"jyMAr","react-router-dom":"cpyQW","../logo-view/logo-view":"21Hac","../navigation-view/navigation-view":"3XDAu","../imageslide-view/imageslide-view":"cx3Hi","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"5Ru3D":[function(require,module,exports) {
'use strict';
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var firebase = _interopDefault(require('@firebase/app'));
var name = "firebase";
var version = "7.9.0";
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ firebase.registerVersion(name, version, 'app');
module.exports = firebase;

},{"@firebase/app":"78NCT"}],"78NCT":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
var util = require('@firebase/util');
var component = require('@firebase/component');
var logger$1 = require('@firebase/logger');
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
var ERRORS = (_a = {
}, _a["no-app" /* NO_APP */ ] = "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()", _a["bad-app-name" /* BAD_APP_NAME */ ] = "Illegal App name: '{$appName}", _a["duplicate-app" /* DUPLICATE_APP */ ] = "Firebase App named '{$appName}' already exists", _a["app-deleted" /* APP_DELETED */ ] = "Firebase App named '{$appName}' already deleted", _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */ ] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a);
var ERROR_FACTORY = new util.ErrorFactory('app', 'Firebase', ERRORS);
var name = "@firebase/app";
var version = "0.5.4";
var name$1 = "@firebase/analytics";
var name$2 = "@firebase/auth";
var name$3 = "@firebase/database";
var name$4 = "@firebase/functions";
var name$5 = "@firebase/installations";
var name$6 = "@firebase/messaging";
var name$7 = "@firebase/performance";
var name$8 = "@firebase/remote-config";
var name$9 = "@firebase/storage";
var name$a = "@firebase/firestore";
var name$b = "firebase-wrapper";
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a$1;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1 = {
}, _a$1[name] = 'fire-core', _a$1[name$1] = 'fire-analytics', _a$1[name$2] = 'fire-auth', _a$1[name$3] = 'fire-rtdb', _a$1[name$4] = 'fire-fn', _a$1[name$5] = 'fire-iid', _a$1[name$6] = 'fire-fcm', _a$1[name$7] = 'fire-perf', _a$1[name$8] = 'fire-rc', _a$1[name$9] = 'fire-gcs', _a$1[name$a] = 'fire-fst', _a$1['fire-js'] = 'fire-js', _a$1[name$b] = 'fire-js-all', _a$1);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var logger = new logger$1.Logger('@firebase/app');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Global context object for a collection of services using
 * a shared authentication state.
 */ var FirebaseAppImpl = function() {
    function FirebaseAppImpl1(options, config, firebase_) {
        var e_1, _a1;
        var _this = this;
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;
        this.options_ = util.deepCopy(options);
        this.container = new component.ComponentContainer(config.name);
        // add itself to container
        this._addComponent(new component.Component('app', function() {
            return _this;
        }, "PUBLIC" /* PUBLIC */ ));
        try {
            // populate ComponentContainer with existing components
            for(var _b = tslib.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()){
                var component$1 = _c.value;
                this._addComponent(component$1);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a1 = _b.return)) _a1.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    }
    Object.defineProperty(FirebaseAppImpl1.prototype, "automaticDataCollectionEnabled", {
        get: function() {
            this.checkDestroyed_();
            return this.automaticDataCollectionEnabled_;
        },
        set: function(val) {
            this.checkDestroyed_();
            this.automaticDataCollectionEnabled_ = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl1.prototype, "name", {
        get: function() {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl1.prototype, "options", {
        get: function() {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseAppImpl1.prototype.delete = function() {
        var _this = this;
        return new Promise(function(resolve) {
            _this.checkDestroyed_();
            resolve();
        }).then(function() {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            return Promise.all(_this.container.getProviders().map(function(provider) {
                return provider.delete();
            }));
        }).then(function() {
            _this.isDeleted_ = true;
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage and functions are the only ones that are leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */ FirebaseAppImpl1.prototype._getService = function(name1, instanceIdentifier) {
        if (instanceIdentifier === void 0) instanceIdentifier = DEFAULT_ENTRY_NAME;
        this.checkDestroyed_();
        // getImmediate will always succeed because _getService is only called for registered components.
        return this.container.getProvider(name1).getImmediate({
            identifier: instanceIdentifier
        });
    };
    /**
     * Remove a service instance from the cache, so we will create a new instance for this service
     * when people try to get this service again.
     *
     * NOTE: currently only firestore is using this functionality to support firestore shutdown.
     *
     * @param name The service name
     * @param instanceIdentifier instance identifier in case multiple instances are allowed
     * @internal
     */ FirebaseAppImpl1.prototype._removeServiceInstance = function(name1, instanceIdentifier) {
        if (instanceIdentifier === void 0) instanceIdentifier = DEFAULT_ENTRY_NAME;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.container.getProvider(name1).clearInstance(instanceIdentifier);
    };
    /**
     * @param component the component being added to this app's container
     */ FirebaseAppImpl1.prototype._addComponent = function(component1) {
        try {
            this.container.addComponent(component1);
        } catch (e) {
            logger.debug("Component " + component1.name + " failed to register with FirebaseApp " + this.name, e);
        }
    };
    FirebaseAppImpl1.prototype._addOrOverwriteComponent = function(component1) {
        this.container.addOrOverwriteComponent(component1);
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ FirebaseAppImpl1.prototype.checkDestroyed_ = function() {
        if (this.isDeleted_) throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */ , {
            appName: this.name_
        });
    };
    return FirebaseAppImpl1;
}();
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');
var version$1 = "7.8.1";
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */ function createFirebaseNamespaceCore(firebaseAppImpl) {
    var apps = {
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var components = new Map();
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp: initializeApp,
        // @ts-ignore
        app: app,
        registerVersion: registerVersion,
        // @ts-ignore
        apps: null,
        SDK_VERSION: version$1,
        INTERNAL: {
            registerComponent: registerComponent,
            removeApp: removeApp,
            components: components,
            useAsService: useAsService
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace['default'] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */ function removeApp(name1) {
        delete apps[name1];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */ function app(name1) {
        name1 = name1 || DEFAULT_ENTRY_NAME;
        if (!util.contains(apps, name1)) throw ERROR_FACTORY.create("no-app" /* NO_APP */ , {
            appName: name1
        });
        return apps[name1];
    }
    // @ts-ignore
    app['App'] = firebaseAppImpl;
    function initializeApp(options, rawConfig) {
        if (rawConfig === void 0) rawConfig = {
        };
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            var name_1 = rawConfig;
            rawConfig = {
                name: name_1
            };
        }
        var config = rawConfig;
        if (config.name === undefined) config.name = DEFAULT_ENTRY_NAME;
        var name1 = config.name;
        if (typeof name1 !== 'string' || !name1) throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */ , {
            appName: String(name1)
        });
        if (util.contains(apps, name1)) throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */ , {
            appName: name1
        });
        var app1 = new firebaseAppImpl(options, config, namespace);
        apps[name1] = app1;
        return app1;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */ function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map(function(name1) {
            return apps[name1];
        });
    }
    function registerComponent(component1) {
        var e_1, _a1;
        var componentName = component1.name;
        if (components.has(componentName)) {
            logger.debug("There were multiple attempts to register component " + componentName + ".");
            return component1.type === "PUBLIC" /* PUBLIC */  ? namespace[componentName] : null;
        }
        components.set(componentName, component1);
        // create service namespace for public components
        if (component1.type === "PUBLIC" /* PUBLIC */ ) {
            // The Service namespace is an accessor function ...
            var serviceNamespace = function(appArg) {
                if (appArg === void 0) appArg = app();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof appArg[componentName] !== 'function') // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */ , {
                    appName: componentName
                });
                // Forward service instance lookup to the FirebaseApp.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return appArg[componentName]();
            };
            // ... and a container for service-level properties.
            if (component1.serviceProps !== undefined) util.deepExtend(serviceNamespace, component1.serviceProps);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            namespace[componentName] = serviceNamespace;
            // Patch the FirebaseAppImpl prototype
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            firebaseAppImpl.prototype[componentName] = // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
            // option added to the no-explicit-any rule when ESlint releases it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var serviceFxn = this._getService.bind(this, componentName);
                return serviceFxn.apply(this, component1.multipleInstances ? args : []);
            };
        }
        try {
            // add the component to existing app instances
            for(var _b = tslib.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()){
                var appName = _c.value;
                apps[appName]._addComponent(component1);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a1 = _b.return)) _a1.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return component1.type === "PUBLIC" /* PUBLIC */  ? namespace[componentName] : null;
    }
    function registerVersion(libraryKeyOrName, version1, variant) {
        var _a1;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        var library = (_a1 = PLATFORM_LOG_STRING[libraryKeyOrName], _a1 !== null && _a1 !== void 0 ? _a1 : libraryKeyOrName);
        if (variant) library += "-" + variant;
        var libraryMismatch = library.match(/\s|\//);
        var versionMismatch = version1.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            var warning = [
                "Unable to register library \"" + library + "\" with version \"" + version1 + "\":"
            ];
            if (libraryMismatch) warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
            if (libraryMismatch && versionMismatch) warning.push('and');
            if (versionMismatch) warning.push("version name \"" + version1 + "\" contains illegal characters (whitespace or \"/\")");
            logger.warn(warning.join(' '));
            return;
        }
        registerComponent(new component.Component(library + "-version", function() {
            return {
                library: library,
                version: version1
            };
        }, "VERSION" /* VERSION */ ));
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app1, name1) {
        if (name1 === 'serverAuth') return null;
        var useService = name1;
        return useService;
    }
    return namespace;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */ function createFirebaseNamespace() {
    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = tslib.__assign(tslib.__assign({
    }, namespace.INTERNAL), {
        createFirebaseNamespace: createFirebaseNamespace,
        extendNamespace: extendNamespace,
        createSubscribe: util.createSubscribe,
        ErrorFactory: util.ErrorFactory,
        deepExtend: util.deepExtend
    });
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */ function extendNamespace(props) {
        util.deepExtend(namespace, props);
    }
    return namespace;
}
var firebase = createFirebaseNamespace();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var PlatformLoggerService = function() {
    function PlatformLoggerService1(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    PlatformLoggerService1.prototype.getPlatformInfoString = function() {
        var providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map(function(provider) {
            if (isVersionServiceProvider(provider)) {
                var service = provider.getImmediate();
                return service.library + "/" + service.version;
            } else return null;
        }).filter(function(logString) {
            return logString;
        }).join(' ');
    };
    return PlatformLoggerService1;
}();
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function isVersionServiceProvider(provider) {
    var _a1;
    var component1 = provider.getComponent();
    return ((_a1 = component1) === null || _a1 === void 0 ? void 0 : _a1.type) === "VERSION" /* VERSION */ ;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(firebase1, variant) {
    firebase1.INTERNAL.registerComponent(new component.Component('platform-logger', function(container) {
        return new PlatformLoggerService(container);
    }, "PRIVATE" /* PRIVATE */ ));
    // Register `app` package.
    firebase1.registerVersion(name, version, variant);
    // Register platform SDK identifier (no version).
    firebase1.registerVersion('fire-js', '');
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Firebase Lite detection
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (util.isBrowser() && self.firebase !== undefined) {
    logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
    // eslint-disable-next-line
    var sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
}
var initializeApp = firebase.initializeApp;
// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
firebase.initializeApp = function() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    // Environment check before initializing app
    // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
    // in @firebase/logger
    if (util.isNode()) logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
    return initializeApp.apply(undefined, args);
};
var firebase$1 = firebase;
registerCoreComponents(firebase$1);
exports.default = firebase$1;
exports.firebase = firebase$1;

},{"tslib":"3rTFO","@firebase/util":"b20Hv","@firebase/component":"lSYWx","@firebase/logger":"Ds5EJ"}],"3rTFO":[function(require,module,exports) {
>>>>>>> Stashed changes
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
parcelHelpers.export(exports, "__spread", ()=>__spread
);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d1, b1) {
        d1.__proto__ = b1;
    } || function(d1, b1) {
        for(var p in b1)if (b1.hasOwnProperty(p)) d1[p] = b1[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign1(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function(resolve1) {
                resolve1(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
function __exportStar(m, exports) {
    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v1) {
            resolve({
                value: v1,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"b20Hv":[function(require,module,exports) {
var global = arguments[3];
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ var assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ var assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var stringToByteArray = function(str) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            // Surrogate Pair
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ var byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var pos = 0, c = 0;
    while(pos < bytes.length){
        var c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
            out[c++] = String.fromCharCode(55296 + (u >> 10));
            out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for(var i = 0; i < input.length; i += 3){
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
            var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
            var outByte4 = byte3 & 63;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for(var i = 0; i < input.length;){
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            var outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    var outByte3 = byte3 << 6 & 192 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_: function() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {
            };
            this.charToByteMap_ = {
            };
            this.byteToCharMapWebSafe_ = {
            };
            this.charToByteMapWebSafe_ = {
            };
            // We want quick mappings back and forth, so we precompute two maps.
            for(var i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ var base64Encode = function(str) {
    var utf8Bytes = stringToByteArray(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ var base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {
            };
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(var prop in source){
        if (!source.hasOwnProperty(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Deferred = function() {
    function Deferred1() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ Deferred1.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error, value) {
            if (error) _this.reject(error);
            else _this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function() {
                });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    };
    return Deferred1;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError1 = function(_super) {
    tslib.__extends(FirebaseError2, _super);
    function FirebaseError2(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        return _this;
    }
    return FirebaseError2;
}(Error);
var ErrorFactory = function() {
    function ErrorFactory1(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory1.prototype.create = function(code) {
        var data = [];
        for(var _i = 1; _i < arguments.length; _i++)data[_i - 1] = arguments[_i];
        var customData = data[0] || {
        };
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError1(fullCode, fullMessage);
        // Keys with an underscore at the end of their name are not included in
        // error.data for some reason.
        // TODO: Replace with Object.entries when lib is updated to es2017.
        for(var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++){
            var key = _b[_a];
            if (key.slice(-1) !== '_') {
                if (key in error) console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                error[key] = customData[key];
            }
        }
        return error;
    };
    return ErrorFactory1;
}();
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? value.toString() : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var decode = function(token) {
    var header = {
    }, claims = {
    }, data = {
    }, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {
        };
        delete claims['d'];
    } catch (e) {
    }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidTimestamp = function(token) {
    var claims = decode(token).claims;
    var now = Math.floor(new Date().getTime() / 1000);
    var validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var issuedAtTime = function(token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidFormat = function(token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isAdmin = function(token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    var res = {
    };
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function(key, value) {
        if (Array.isArray(value)) value.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
        });
        else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    };
    for(var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++){
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    var obj = {
    };
    var tokens = querystring1.replace(/^\?/, '').split('&');
    tokens.forEach(function(token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ var Sha1 = function() {
    function Sha11() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(var i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    Sha11.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ Sha11.prototype.compress_ = function(buf, offset) {
        if (!offset) offset = 0;
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(var i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(var i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(var i = 16; i < 80; i++){
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(var i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 1518500249;
                } else {
                    f = b ^ c ^ d;
                    k = 1859775393;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 2400959708;
            } else {
                f = b ^ c ^ d;
                k = 3395469782;
            }
            var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 4294967295;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
    };
    Sha11.prototype.update = function(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    };
    /** @override */ Sha11.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(var i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for(var i = 0; i < 5; i++)for(var j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    };
    return Sha11;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ var ObserverProxy = function() {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ function ObserverProxy1(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(function() {
            executor(_this);
        }).catch(function(e) {
            _this.error(e);
        });
    }
    ObserverProxy1.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
            observer.next(value);
        });
    };
    ObserverProxy1.prototype.error = function(error) {
        this.forEachObserver(function(observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy1.prototype.complete = function() {
        this.forEachObserver(function(observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ ObserverProxy1.prototype.subscribe = function(nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error: error,
            complete: complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            try {
                if (_this.finalError) observer.error(_this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy1.prototype.unsubscribeOne = function(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    };
    ObserverProxy1.prototype.forEachObserver = function(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(var i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy1.prototype.sendOne = function(i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) try {
                fn(_this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    };
    ObserverProxy1.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy1;
}();
/** Turn synchronous function into one called asynchronously. */ function async(fn, onError) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        Promise.resolve(true).then(function() {
            fn.apply(void 0, args);
        }).catch(function(error) {
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for(var _i = 0, methods_1 = methods; _i < methods_1.length; _i++){
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ var validateArgCount = function(fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch(argumentNumber){
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ var stringToByteArray$1 = function(str) {
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 55296 && c <= 56319) {
            var high = c - 55296; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 56320; // the low 10 bits.
            c = 65536 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ var stringLength = function(str) {
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 55296 && c <= 56319) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
exports.CONSTANTS = CONSTANTS;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError1;
exports.Sha1 = Sha1;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.getUA = getUA;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isUWP = isUWP;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;
exports.stringify = stringify;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateNamespace = validateNamespace;

},{"tslib":"3rTFO"}],"lSYWx":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
var util = require('@firebase/util');
/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ var Component = function() {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ function Component1(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {
        };
        this.instantiationMode = "LAZY" /* LAZY */ ;
    }
    Component1.prototype.setInstantiationMode = function(mode) {
        this.instantiationMode = mode;
        return this;
    };
    Component1.prototype.setMultipleInstances = function(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    };
    Component1.prototype.setServiceProps = function(props) {
        this.serviceProps = props;
        return this;
    };
    return Component1;
}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ var Provider = function() {
    function Provider1(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */ Provider1.prototype.get = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            // If the service instance is available, resolve the promise with it immediately
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider1.prototype.getImmediate = function(options) {
        var _a = tslib.__assign({
            identifier: DEFAULT_ENTRY_NAME,
            optional: false
        }, options), identifier = _a.identifier, optional = _a.optional;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        try {
            var instance = this.getOrInitializeService(normalizedIdentifier);
            if (!instance) {
                if (optional) return null;
                throw Error("Service " + this.name + " is not available");
            }
            return instance;
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
    };
    Provider1.prototype.getComponent = function() {
        return this.component;
    };
    Provider1.prototype.setComponent = function(component) {
        var e_1, _a;
        if (component.name !== this.name) throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        if (this.component) throw Error("Component for " + this.name + " has already been provided");
        this.component = component;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) try {
            this.getOrInitializeService(DEFAULT_ENTRY_NAME);
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        try {
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for(var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    instanceDeferred.resolve(instance);
                } catch (e) {
                // when the instance factory throws an exception, it should not cause
                // a fatal error. We just leave the promise unresolved.
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    Provider1.prototype.clearInstance = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        this.instancesDeferred.delete(identifier);
        this.instances.delete(identifier);
    };
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    Provider1.prototype.delete = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var services;
            return tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        services = Array.from(this.instances.values());
                        return [
                            4 /*yield*/ ,
                            Promise.all(services.filter(function(service) {
                                return 'INTERNAL' in service;
                            })// eslint-disable-next-line @typescript-eslint/no-explicit-any
                            .map(function(service) {
                                return service.INTERNAL.delete();
                            }))
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    Provider1.prototype.isComponentSet = function() {
        return this.component != null;
    };
    Provider1.prototype.getOrInitializeService = function(identifier) {
        var instance = this.instances.get(identifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
            this.instances.set(identifier, instance);
        }
        return instance || null;
    };
    Provider1.prototype.normalizeInstanceIdentifier = function(identifier) {
        if (this.component) return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    };
    return Provider1;
}();
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */ ;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ var ComponentContainer = function() {
    function ComponentContainer1(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ ComponentContainer1.prototype.addComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error("Component " + component.name + " has already been registered with " + this.name);
        provider.setComponent(component);
    };
    ComponentContainer1.prototype.addOrOverwriteComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    };
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ ComponentContainer1.prototype.getProvider = function(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    };
    ComponentContainer1.prototype.getProviders = function() {
        return Array.from(this.providers.values());
    };
    return ComponentContainer1;
}();
exports.Component = Component;
exports.ComponentContainer = ComponentContainer;
exports.Provider = Provider;

},{"tslib":"lJ1Ty","@firebase/util":"3is3B"}],"lJ1Ty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
parcelHelpers.export(exports, "__spread", ()=>__spread
);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d1, b1) {
        d1.__proto__ = b1;
    } || function(d1, b1) {
        for(var p in b1)if (b1.hasOwnProperty(p)) d1[p] = b1[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign1(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function(resolve1) {
                resolve1(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
function __exportStar(m, exports) {
    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v1) {
            resolve({
                value: v1,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3is3B":[function(require,module,exports) {
var global = arguments[3];
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ var assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ var assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var stringToByteArray = function(str) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            // Surrogate Pair
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ var byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var pos = 0, c = 0;
    while(pos < bytes.length){
        var c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
            out[c++] = String.fromCharCode(55296 + (u >> 10));
            out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for(var i = 0; i < input.length; i += 3){
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
            var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
            var outByte4 = byte3 & 63;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for(var i = 0; i < input.length;){
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            var outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    var outByte3 = byte3 << 6 & 192 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_: function() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {
            };
            this.charToByteMap_ = {
            };
            this.byteToCharMapWebSafe_ = {
            };
            this.charToByteMapWebSafe_ = {
            };
            // We want quick mappings back and forth, so we precompute two maps.
            for(var i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ var base64Encode = function(str) {
    var utf8Bytes = stringToByteArray(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ var base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {
            };
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(var prop in source){
        if (!source.hasOwnProperty(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Deferred = function() {
    function Deferred1() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ Deferred1.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error, value) {
            if (error) _this.reject(error);
            else _this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function() {
                });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    };
    return Deferred1;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError1 = function(_super) {
    tslib.__extends(FirebaseError2, _super);
    function FirebaseError2(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        return _this;
    }
    return FirebaseError2;
}(Error);
var ErrorFactory = function() {
    function ErrorFactory1(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory1.prototype.create = function(code) {
        var data = [];
        for(var _i = 1; _i < arguments.length; _i++)data[_i - 1] = arguments[_i];
        var customData = data[0] || {
        };
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError1(fullCode, fullMessage);
        // Keys with an underscore at the end of their name are not included in
        // error.data for some reason.
        // TODO: Replace with Object.entries when lib is updated to es2017.
        for(var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++){
            var key = _b[_a];
            if (key.slice(-1) !== '_') {
                if (key in error) console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                error[key] = customData[key];
            }
        }
        return error;
    };
    return ErrorFactory1;
}();
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? value.toString() : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var decode = function(token) {
    var header = {
    }, claims = {
    }, data = {
    }, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {
        };
        delete claims['d'];
    } catch (e) {
    }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidTimestamp = function(token) {
    var claims = decode(token).claims;
    var now = Math.floor(new Date().getTime() / 1000);
    var validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var issuedAtTime = function(token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidFormat = function(token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isAdmin = function(token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    var res = {
    };
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function(key, value) {
        if (Array.isArray(value)) value.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
        });
        else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    };
    for(var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++){
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    var obj = {
    };
    var tokens = querystring1.replace(/^\?/, '').split('&');
    tokens.forEach(function(token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ var Sha1 = function() {
    function Sha11() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(var i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    Sha11.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ Sha11.prototype.compress_ = function(buf, offset) {
        if (!offset) offset = 0;
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(var i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(var i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(var i = 16; i < 80; i++){
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(var i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 1518500249;
                } else {
                    f = b ^ c ^ d;
                    k = 1859775393;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 2400959708;
            } else {
                f = b ^ c ^ d;
                k = 3395469782;
            }
            var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 4294967295;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
    };
    Sha11.prototype.update = function(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    };
    /** @override */ Sha11.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(var i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for(var i = 0; i < 5; i++)for(var j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    };
    return Sha11;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ var ObserverProxy = function() {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ function ObserverProxy1(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(function() {
            executor(_this);
        }).catch(function(e) {
            _this.error(e);
        });
    }
    ObserverProxy1.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
            observer.next(value);
        });
    };
    ObserverProxy1.prototype.error = function(error) {
        this.forEachObserver(function(observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy1.prototype.complete = function() {
        this.forEachObserver(function(observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ ObserverProxy1.prototype.subscribe = function(nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error: error,
            complete: complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            try {
                if (_this.finalError) observer.error(_this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy1.prototype.unsubscribeOne = function(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    };
    ObserverProxy1.prototype.forEachObserver = function(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(var i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy1.prototype.sendOne = function(i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) try {
                fn(_this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    };
    ObserverProxy1.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy1;
}();
/** Turn synchronous function into one called asynchronously. */ function async(fn, onError) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        Promise.resolve(true).then(function() {
            fn.apply(void 0, args);
        }).catch(function(error) {
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for(var _i = 0, methods_1 = methods; _i < methods_1.length; _i++){
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ var validateArgCount = function(fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch(argumentNumber){
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ var stringToByteArray$1 = function(str) {
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 55296 && c <= 56319) {
            var high = c - 55296; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 56320; // the low 10 bits.
            c = 65536 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ var stringLength = function(str) {
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 55296 && c <= 56319) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
exports.CONSTANTS = CONSTANTS;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError1;
exports.Sha1 = Sha1;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.getUA = getUA;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isUWP = isUWP;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;
exports.stringify = stringify;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateNamespace = validateNamespace;

},{"tslib":"lJ1Ty"}],"Ds5EJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>Logger
);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A container for all of the Logger instances
 */ var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var LogLevel;
(function(LogLevel1) {
    LogLevel1[LogLevel1["DEBUG"] = 0] = "DEBUG";
    LogLevel1[LogLevel1["VERBOSE"] = 1] = "VERBOSE";
    LogLevel1[LogLevel1["INFO"] = 2] = "INFO";
    LogLevel1[LogLevel1["WARN"] = 3] = "WARN";
    LogLevel1[LogLevel1["ERROR"] = 4] = "ERROR";
    LogLevel1[LogLevel1["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {
}));
/**
 * The default log level
 */ var defaultLogLevel = LogLevel.INFO;
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ var defaultLogHandler = function(instance, logType) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    if (logType < instance.logLevel) return;
    var now = new Date().toISOString();
    switch(logType){
        /**
         * By default, `console.debug` is not displayed in the developer console (in
         * chrome). To avoid forcing users to have to opt-in to these logs twice
         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
         * logs to the `console.log` function.
         */ case LogLevel.DEBUG:
            console.log.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.VERBOSE:
            console.log.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.INFO:
            console.info.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.WARN:
            console.warn.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.ERROR:
            console.error.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        default:
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = function() {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ function Logger1(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The log handler for the Logger instance.
         */ this._logHandler = defaultLogHandler;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    Object.defineProperty(Logger1.prototype, "logLevel", {
        get: function() {
            return this._logLevel;
        },
        set: function(val) {
            if (!(val in LogLevel)) throw new TypeError('Invalid value assigned to `logLevel`');
            this._logLevel = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger1.prototype, "logHandler", {
        get: function() {
            return this._logHandler;
        },
        set: function(val) {
            if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
            this._logHandler = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */ Logger1.prototype.debug = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.DEBUG
        ], args));
    };
    Logger1.prototype.log = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.VERBOSE
        ], args));
    };
    Logger1.prototype.info = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.INFO
        ], args));
    };
    Logger1.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.WARN
        ], args));
    };
    Logger1.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.ERROR
        ], args));
    };
    return Logger1;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function setLogLevel(level) {
    instances.forEach(function(inst) {
        inst.logLevel = level;
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aolaA":[function(require,module,exports) {
var process = require("process");
"use strict";
function _interopDefault(t) {
    return t && "object" == typeof t && "default" in t ? t.default : t;
}
Object.defineProperty(exports, "__esModule", {
    value: !0
});
var LogLevel, firebase = _interopDefault(require("@firebase/app")), tslib = require("tslib"), logger = require("@firebase/logger"), util = require("@firebase/util"), component = require("@firebase/component"), webchannelWrapper = require("@firebase/webchannel-wrapper"), SDK_VERSION = firebase.SDK_VERSION, __PRIVATE_logClient = new logger.Logger("@firebase/firestore");
function __PRIVATE_getLogLevel() {
    return __PRIVATE_logClient.logLevel === logger.LogLevel.DEBUG ? LogLevel.DEBUG : __PRIVATE_logClient.logLevel === logger.LogLevel.SILENT ? LogLevel.SILENT : LogLevel.ERROR;
}
function setLogLevel(t) {
    switch(t){
        case LogLevel.DEBUG:
            __PRIVATE_logClient.logLevel = logger.LogLevel.DEBUG;
            break;
        case LogLevel.ERROR:
            __PRIVATE_logClient.logLevel = logger.LogLevel.ERROR;
            break;
        case LogLevel.SILENT:
            __PRIVATE_logClient.logLevel = logger.LogLevel.SILENT;
            break;
        default:
            __PRIVATE_logClient.error("Firestore (" + SDK_VERSION + "): Invalid value passed to `setLogLevel`");
    }
}
function debug(t, e) {
    for(var n = [], r = 2; r < arguments.length; r++)n[r - 2] = arguments[r];
    if (__PRIVATE_logClient.logLevel <= logger.LogLevel.DEBUG) {
        var i = n.map(__PRIVATE_argToString);
        __PRIVATE_logClient.debug.apply(__PRIVATE_logClient, tslib.__spreadArrays([
            "Firestore (" + SDK_VERSION + ") [" + t + "]: " + e
        ], i));
    }
}
function error(t) {
    for(var e = [], n = 1; n < arguments.length; n++)e[n - 1] = arguments[n];
    if (__PRIVATE_logClient.logLevel <= logger.LogLevel.ERROR) {
        var r = e.map(__PRIVATE_argToString);
        __PRIVATE_logClient.error.apply(__PRIVATE_logClient, tslib.__spreadArrays([
            "Firestore (" + SDK_VERSION + "): " + t
        ], r));
    }
}
function __PRIVATE_argToString(t) {
    if ("string" == typeof t) return t;
    var e = __PRIVATE_PlatformSupport.t();
    try {
        return e.i(t);
    } catch (e1) {
        return t;
    }
}
function fail(t) {
    var e = "FIRESTORE (" + SDK_VERSION + ") INTERNAL ASSERTION FAILED: " + t;
    throw error(e), new Error(e);
}
function assert(t, e) {
    t || fail(e);
}
!function(t) {
    t[t.DEBUG = 0] = "DEBUG", t[t.ERROR = 1] = "ERROR", t[t.SILENT = 2] = "SILENT";
}(LogLevel || (LogLevel = {
}));
var __PRIVATE_AutoId = function() {
    function t() {
    }
    return t.s = function() {
        for(var t1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = "", n = 0; n < 20; n++)e += t1.charAt(Math.floor(Math.random() * t1.length));
        return assert(20 === e.length, "Invalid auto ID: " + e), e;
    }, t;
}();
function __PRIVATE_primitiveComparator(t, e) {
    return t < e ? -1 : t > e ? 1 : 0;
}
function equals(t, e) {
    return null != t ? !(!e || !t.isEqual(e)) : t === e;
}
function __PRIVATE_arrayEquals(t, e) {
    if (t.length !== e.length) return !1;
    for(var n = 0; n < t.length; n++)if (!t[n].isEqual(e[n])) return !1;
    return !0;
}
function __PRIVATE_immediateSuccessor(t) {
    return t + "\0";
}
var __PRIVATE_OnlineState, __PRIVATE_OnlineStateSource, __PRIVATE_DatabaseInfo = function(t, e, n, r, i) {
    this.o = t, this.persistenceKey = e, this.host = n, this.ssl = r, this.forceLongPolling = i;
}, __PRIVATE_DEFAULT_DATABASE_NAME = "(default)", __PRIVATE_DatabaseId = function() {
    function t(t1, e) {
        this.projectId = t1, this.database = e || __PRIVATE_DEFAULT_DATABASE_NAME;
    }
    return Object.defineProperty(t.prototype, "u", {
        get: function() {
            return this.database === __PRIVATE_DEFAULT_DATABASE_NAME;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(e) {
        return e instanceof t && e.projectId === this.projectId && e.database === this.database;
    }, t.prototype._ = function(t1) {
        return __PRIVATE_primitiveComparator(this.projectId, t1.projectId) || __PRIVATE_primitiveComparator(this.database, t1.database);
    }, t;
}();
!function(t) {
    t[t.h = 0] = "__PRIVATE_Unknown", t[t.l = 1] = "__PRIVATE_Online", t[t.T = 2] = "__PRIVATE_Offline";
}(__PRIVATE_OnlineState || (__PRIVATE_OnlineState = {
})), (function(t) {
    t[t.P = 0] = "__PRIVATE_RemoteStore", t[t.A = 1] = "__PRIVATE_SharedClientState";
})(__PRIVATE_OnlineStateSource || (__PRIVATE_OnlineStateSource = {
}));
var User = function() {
    function t(t1) {
        this.uid = t1;
    }
    return t.prototype.R = function() {
        return null != this.uid;
    }, t.prototype.I = function() {
        return this.R() ? "uid:" + this.uid : "anonymous-user";
    }, t.prototype.isEqual = function(t1) {
        return t1.uid === this.uid;
    }, t.UNAUTHENTICATED = new t(null), t.V = new t("google-credentials-uid"), t.m = new t("first-party-uid"), t;
}(), Code = {
    OK: "ok",
    CANCELLED: "cancelled",
    UNKNOWN: "unknown",
    INVALID_ARGUMENT: "invalid-argument",
    DEADLINE_EXCEEDED: "deadline-exceeded",
    NOT_FOUND: "not-found",
    ALREADY_EXISTS: "already-exists",
    PERMISSION_DENIED: "permission-denied",
    UNAUTHENTICATED: "unauthenticated",
    RESOURCE_EXHAUSTED: "resource-exhausted",
    FAILED_PRECONDITION: "failed-precondition",
    ABORTED: "aborted",
    OUT_OF_RANGE: "out-of-range",
    UNIMPLEMENTED: "unimplemented",
    INTERNAL: "internal",
    UNAVAILABLE: "unavailable",
    DATA_LOSS: "data-loss"
}, FirestoreError = function(t) {
    function e(e1, n) {
        var r = t.call(this, n) || this;
        return r.code = e1, r.message = n, r.name = "FirebaseError", r.toString = function() {
            return r.name + ": [code=" + r.code + "]: " + r.message;
        }, r;
    }
    return tslib.__extends(e, t), e;
}(Error), __PRIVATE_OAuthToken = function(t, e) {
    this.user = e, this.type = "OAuth", this.v = {
    }, this.v.Authorization = "Bearer " + t;
}, __PRIVATE_EmptyCredentialsProvider = function() {
    function t() {
        this.p = null;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(null);
    }, t.prototype.g = function() {
    }, t.prototype.S = function(t1) {
        assert(!this.p, "Can only call setChangeListener() once."), this.p = t1, t1(User.UNAUTHENTICATED);
    }, t.prototype.D = function() {
        assert(null !== this.p, "removeChangeListener() when no listener registered"), this.p = null;
    }, t;
}(), __PRIVATE_FirebaseCredentialsProvider = function() {
    function t(t1) {
        var e = this;
        this.C = null, this.currentUser = User.UNAUTHENTICATED, this.O = !1, this.F = 0, this.p = null, this.forceRefresh = !1, this.C = function() {
            e.F++, e.currentUser = e.N(), e.O = !0, e.p && e.p(e.currentUser);
        }, this.F = 0, this.auth = t1.getImmediate({
            optional: !0
        }), this.auth ? this.auth.addAuthTokenListener(this.C) : (this.C(null), t1.get().then(function(t2) {
            e.auth = t2, e.C && e.auth.addAuthTokenListener(e.C);
        }, function() {
        }));
    }
    return t.prototype.getToken = function() {
        var t1 = this;
        assert(null != this.C, "getToken cannot be called after listener removed.");
        var e = this.F, n = this.forceRefresh;
        return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then(function(n1) {
            if (t1.F !== e) throw new FirestoreError(Code.ABORTED, "getToken aborted due to token change.");
            return n1 ? (assert("string" == typeof n1.accessToken, "Invalid tokenData returned from getToken():" + n1), new __PRIVATE_OAuthToken(n1.accessToken, t1.currentUser)) : null;
        }) : Promise.resolve(null);
    }, t.prototype.g = function() {
        this.forceRefresh = !0;
    }, t.prototype.S = function(t1) {
        assert(!this.p, "Can only call setChangeListener() once."), this.p = t1, this.O && t1(this.currentUser);
    }, t.prototype.D = function() {
        assert(null != this.C, "removeChangeListener() called twice"), assert(null !== this.p, "removeChangeListener() called when no listener registered"), this.auth && this.auth.removeAuthTokenListener(this.C), this.C = null, this.p = null;
    }, t.prototype.N = function() {
        var t1 = this.auth && this.auth.getUid();
        return assert(null === t1 || "string" == typeof t1, "Received invalid UID: " + t1), new User(t1);
    }, t;
}(), __PRIVATE_FirstPartyToken = function() {
    function t(t1, e) {
        this.M = t1, this.L = e, this.type = "FirstParty", this.user = User.m;
    }
    return Object.defineProperty(t.prototype, "v", {
        get: function() {
            var t1 = {
                "X-Goog-AuthUser": this.L
            }, e = this.M.auth.G([]);
            return e && (t1.Authorization = e), t1;
        },
        enumerable: !0,
        configurable: !0
    }), t;
}(), __PRIVATE_FirstPartyCredentialsProvider = function() {
    function t(t1, e) {
        this.M = t1, this.L = e;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.M, this.L));
    }, t.prototype.S = function(t1) {
        t1(User.m);
    }, t.prototype.D = function() {
    }, t.prototype.g = function() {
    }, t;
}();
function __PRIVATE_makeCredentialsProvider(t) {
    if (!t) return new __PRIVATE_EmptyCredentialsProvider;
    switch(t.type){
        case "gapi":
            var e = t.B;
            return assert(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty), "unexpected gapi interface"), new __PRIVATE_FirstPartyCredentialsProvider(e, t.L || "0");
        case "provider":
            return t.B;
        default:
            throw new FirestoreError(Code.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
    }
}
function contains(t, e) {
    return Object.prototype.hasOwnProperty.call(t, e);
}
function __PRIVATE_defaulted(t, e) {
    return (void 0) !== t ? t : e;
}
function __PRIVATE_forEachNumber(t, e) {
    for(var n in t)if (Object.prototype.hasOwnProperty.call(t, n)) {
        var r = Number(n);
        isNaN(r) || e(r, t[n]);
    }
}
function values(t) {
    var e = [];
    return forEach(t, function(t1, n) {
        return e.push(n);
    }), e;
}
function forEach(t, e) {
    for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function __PRIVATE_isEmpty(t) {
    for(var e in assert(null != t && "object" == typeof t, "isEmpty() expects object parameter."), t)if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
    return !0;
}
function __PRIVATE_shallowCopy(t) {
    assert(t && "object" == typeof t, "shallowCopy() expects object parameter.");
    var e = {
    };
    for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
    return e;
}
function __PRIVATE_validateNoArgs(t, e) {
    if (0 !== e.length) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() does not support arguments, but was called with " + __PRIVATE_formatPlural(e.length, "argument") + ".");
}
function __PRIVATE_validateExactNumberOfArgs(t, e, n) {
    if (e.length !== n) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires " + __PRIVATE_formatPlural(n, "argument") + ", but was called with " + __PRIVATE_formatPlural(e.length, "argument") + ".");
}
function __PRIVATE_validateAtLeastNumberOfArgs(t, e, n) {
    if (e.length < n) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires at least " + __PRIVATE_formatPlural(n, "argument") + ", but was called with " + __PRIVATE_formatPlural(e.length, "argument") + ".");
}
function __PRIVATE_validateBetweenNumberOfArgs(t, e, n, r) {
    if (e.length < n || e.length > r) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires between " + n + " and " + r + " arguments, but was called with " + __PRIVATE_formatPlural(e.length, "argument") + ".");
}
function __PRIVATE_validateNamedArrayAtLeastNumberOfElements(t, e, n, r) {
    if (!(e instanceof Array) || e.length < r) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires its " + n + " argument to be an array with at least " + __PRIVATE_formatPlural(r, "element") + ".");
}
function __PRIVATE_validateArgType(t, e, n, r) {
    __PRIVATE_validateType(t, e, __PRIVATE_ordinal(n) + " argument", r);
}
function __PRIVATE_validateOptionalArgType(t, e, n, r) {
    (void 0) !== r && __PRIVATE_validateArgType(t, e, n, r);
}
function __PRIVATE_validateNamedType(t, e, n, r) {
    __PRIVATE_validateType(t, e, n + " option", r);
}
function __PRIVATE_validateNamedOptionalType(t, e, n, r) {
    (void 0) !== r && __PRIVATE_validateNamedType(t, e, n, r);
}
function __PRIVATE_validateArrayElements(t, e, n, r, i) {
    if (!(r instanceof Array)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires its " + e + " option to be an array, but it was: " + __PRIVATE_valueDescription(r));
    for(var s = 0; s < r.length; ++s)if (!i(r[s])) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires all " + e + " elements to be " + n + ", but the value at index " + s + " was: " + __PRIVATE_valueDescription(r[s]));
}
function __PRIVATE_validateOptionalArrayElements(t, e, n, r, i) {
    (void 0) !== r && __PRIVATE_validateArrayElements(t, e, n, r, i);
}
function __PRIVATE_validateNamedPropertyEquals(t, e, n, r, i) {
    for(var s = [], o = 0, u = i; o < u.length; o++){
        var a = u[o];
        if (a === r) return;
        s.push(__PRIVATE_valueDescription(a));
    }
    var _ = __PRIVATE_valueDescription(r);
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + _ + " provided to function " + t + '() for option "' + n + '". Acceptable values: ' + s.join(", "));
}
function __PRIVATE_validateNamedOptionalPropertyEquals(t, e, n, r, i) {
    (void 0) !== r && __PRIVATE_validateNamedPropertyEquals(t, e, n, r, i);
}
function __PRIVATE_validateStringEnum(t, e, n, r) {
    if (!e.some(function(t1) {
        return t1 === r;
    })) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + __PRIVATE_valueDescription(r) + " provided to function " + t + "() for its " + __PRIVATE_ordinal(n) + " argument. Acceptable values: " + e.join(", "));
}
function __PRIVATE_validateType(t, e, n, r) {
    if (!("object" === e ? __PRIVATE_isPlainObject(r) : "non-empty string" === e ? "string" == typeof r && "" !== r : typeof r === e)) {
        var i = __PRIVATE_valueDescription(r);
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires its " + n + " to be of type " + e + ", but it was: " + i);
    }
}
function __PRIVATE_isPlainObject(t) {
    return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
}
function __PRIVATE_valueDescription(t) {
    if ((void 0) === t) return "undefined";
    if (null === t) return "null";
    if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), JSON.stringify(t);
    if ("number" == typeof t || "boolean" == typeof t) return "" + t;
    if ("object" == typeof t) {
        if (t instanceof Array) return "an array";
        var e = __PRIVATE_tryGetCustomObjectType(t);
        return e ? "a custom " + e + " object" : "an object";
    }
    return "function" == typeof t ? "a function" : fail("Unknown wrong type: " + typeof t);
}
function __PRIVATE_tryGetCustomObjectType(t) {
    if (t.constructor) {
        var e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
        if (e && e.length > 1) return e[1];
    }
    return null;
}
function __PRIVATE_validateDefined(t, e, n) {
    if ((void 0) === n) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires a valid " + __PRIVATE_ordinal(e) + " argument, but it was undefined.");
}
function __PRIVATE_validateOptionNames(t, e, n) {
    forEach(e, function(e1, r) {
        if (n.indexOf(e1) < 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Unknown option '" + e1 + "' passed to function " + t + "(). Available options: " + n.join(", "));
    });
}
function __PRIVATE_invalidClassError(t, e, n, r) {
    var i = __PRIVATE_valueDescription(r);
    return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t + "() requires its " + __PRIVATE_ordinal(n) + " argument to be a " + e + ", but it was: " + i);
}
function __PRIVATE_validatePositiveNumber(t, e, n) {
    if (n <= 0) throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function "' + t + '()" requires its ' + __PRIVATE_ordinal(e) + " argument to be a positive number, but it was: " + n + ".");
}
function __PRIVATE_ordinal(t) {
    switch(t){
        case 1:
            return "first";
        case 2:
            return "second";
        case 3:
            return "third";
        default:
            return t + "th";
    }
}
function __PRIVATE_formatPlural(t, e) {
    return t + " " + e + (1 === t ? "" : "s");
}
var GeoPoint = function() {
    function t(t1, e) {
        if (__PRIVATE_validateExactNumberOfArgs("GeoPoint", arguments, 2), __PRIVATE_validateArgType("GeoPoint", "number", 1, t1), __PRIVATE_validateArgType("GeoPoint", "number", 2, e), !isFinite(t1) || t1 < -90 || t1 > 90) throw new FirestoreError(Code.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t1);
        if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(Code.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
        this.U = t1, this.k = e;
    }
    return Object.defineProperty(t.prototype, "latitude", {
        get: function() {
            return this.U;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "longitude", {
        get: function() {
            return this.k;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(t1) {
        return this.U === t1.U && this.k === t1.k;
    }, t.prototype.K = function(t1) {
        return __PRIVATE_primitiveComparator(this.U, t1.U) || __PRIVATE_primitiveComparator(this.k, t1.k);
    }, t;
}(), Timestamp = function() {
    function t(t1, e) {
        if (this.seconds = t1, this.nanoseconds = e, e < 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (e >= 1000000000) throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (t1 < -62135596800) throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t1);
        if (t1 >= 253402300800) throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t1);
    }
    return t.now = function() {
        return t.fromMillis(Date.now());
    }, t.fromDate = function(e) {
        return t.fromMillis(e.getTime());
    }, t.fromMillis = function(e) {
        var n = Math.floor(e / 1000);
        return new t(n, 1000000 * (e - 1000 * n));
    }, t.prototype.toDate = function() {
        return new Date(this.toMillis());
    }, t.prototype.toMillis = function() {
        return 1000 * this.seconds + this.nanoseconds / 1000000;
    }, t.prototype.K = function(t1) {
        return this.seconds === t1.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t1.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t1.seconds);
    }, t.prototype.isEqual = function(t1) {
        return t1.seconds === this.seconds && t1.nanoseconds === this.nanoseconds;
    }, t.prototype.toString = function() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }, t;
}(), __PRIVATE_SnapshotVersion = function() {
    function t(t1) {
        this.timestamp = t1;
    }
    return t.j = function(e) {
        var n = Math.floor(e / 1000000);
        return new t(new Timestamp(n, e % 1000000 * 1000));
    }, t.q = function(e) {
        return new t(e);
    }, t.W = function() {
        return t.MIN;
    }, t.prototype._ = function(t1) {
        return this.timestamp.K(t1.timestamp);
    }, t.prototype.isEqual = function(t1) {
        return this.timestamp.isEqual(t1.timestamp);
    }, t.prototype.$ = function() {
        return 1000000 * this.timestamp.seconds + this.timestamp.nanoseconds / 1000;
    }, t.prototype.toString = function() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }, t.prototype.Y = function() {
        return this.timestamp;
    }, t.MIN = new t(new Timestamp(0, 0)), t;
}(), __PRIVATE_DOCUMENT_KEY_NAME = "__name__", __PRIVATE_BasePath = function() {
    function t(t1, e, n) {
        (void 0) === e ? e = 0 : e > t1.length && fail("offset " + e + " out of range " + t1.length), (void 0) === n ? n = t1.length - e : n > t1.length - e && fail("length " + n + " out of range " + (t1.length - e)), this.segments = t1, this.offset = e, this.len = n;
    }
    return Object.defineProperty(t.prototype, "length", {
        get: function() {
            return this.len;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(e) {
        return 0 === t.H(this, e);
    }, t.prototype.child = function(e) {
        var n = this.segments.slice(this.offset, this.limit());
        return e instanceof t ? e.forEach(function(t1) {
            n.push(t1);
        }) : n.push(e), this.X(n);
    }, t.prototype.limit = function() {
        return this.offset + this.length;
    }, t.prototype.J = function(t1) {
        return t1 = (void 0) === t1 ? 1 : t1, assert(this.length >= t1, "Can't call popFirst() with less segments"), this.X(this.segments, this.offset + t1, this.length - t1);
    }, t.prototype.Z = function() {
        return assert(!this.tt(), "Can't call popLast() on empty path"), this.X(this.segments, this.offset, this.length - 1);
    }, t.prototype.et = function() {
        return assert(!this.tt(), "Can't call firstSegment() on empty path"), this.segments[this.offset];
    }, t.prototype.nt = function() {
        return this.get(this.length - 1);
    }, t.prototype.get = function(t1) {
        return assert(t1 < this.length, "Index out of range"), this.segments[this.offset + t1];
    }, t.prototype.tt = function() {
        return 0 === this.length;
    }, t.prototype.rt = function(t1) {
        if (t1.length < this.length) return !1;
        for(var e = 0; e < this.length; e++)if (this.get(e) !== t1.get(e)) return !1;
        return !0;
    }, t.prototype.it = function(t1) {
        if (this.length + 1 !== t1.length) return !1;
        for(var e = 0; e < this.length; e++)if (this.get(e) !== t1.get(e)) return !1;
        return !0;
    }, t.prototype.forEach = function(t1) {
        for(var e = this.offset, n = this.limit(); e < n; e++)t1(this.segments[e]);
    }, t.prototype.st = function() {
        return this.segments.slice(this.offset, this.limit());
    }, t.H = function(t1, e) {
        for(var n = Math.min(t1.length, e.length), r = 0; r < n; r++){
            var i = t1.get(r), s = e.get(r);
            if (i < s) return -1;
            if (i > s) return 1;
        }
        return t1.length < e.length ? -1 : t1.length > e.length ? 1 : 0;
    }, t;
}(), ResourcePath = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(e, t), e.prototype.X = function(t1, n, r) {
        return new e(t1, n, r);
    }, e.prototype.ot = function() {
        return this.st().join("/");
    }, e.prototype.toString = function() {
        return this.ot();
    }, e.ut = function(t1) {
        if (t1.indexOf("//") >= 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid path (" + t1 + "). Paths must not contain // in them.");
        return new e(t1.split("/").filter(function(t2) {
            return t2.length > 0;
        }));
    }, e.at = new e([]), e;
}(__PRIVATE_BasePath), __PRIVATE_identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/, FieldPath = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(e, t), e.prototype.X = function(t1, n, r) {
        return new e(t1, n, r);
    }, e._t = function(t1) {
        return __PRIVATE_identifierRegExp.test(t1);
    }, e.prototype.ot = function() {
        return this.st().map(function(t1) {
            return t1 = t1.replace("\\", "\\\\").replace("`", "\\`"), e._t(t1) || (t1 = "`" + t1 + "`"), t1;
        }).join(".");
    }, e.prototype.toString = function() {
        return this.ot();
    }, e.prototype.ct = function() {
        return 1 === this.length && this.get(0) === __PRIVATE_DOCUMENT_KEY_NAME;
    }, e.ht = function() {
        return new e([
            __PRIVATE_DOCUMENT_KEY_NAME
        ]);
    }, e.ft = function(t1) {
        for(var n = [], r = "", i = 0, s = function() {
            if (0 === r.length) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + t1 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
            n.push(r), r = "";
        }, o = !1; i < t1.length;){
            var u = t1[i];
            if ("\\" === u) {
                if (i + 1 === t1.length) throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has trailing escape character: " + t1);
                var a = t1[i + 1];
                if ("\\" !== a && "." !== a && "`" !== a) throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t1);
                r += a, i += 2;
            } else "`" === u ? (o = !o, i++) : "." !== u || o ? (r += u, i++) : (s(), i++);
        }
        if (s(), o) throw new FirestoreError(Code.INVALID_ARGUMENT, "Unterminated ` in path: " + t1);
        return new e(n);
    }, e.at = new e([]), e;
}(__PRIVATE_BasePath), __PRIVATE_DocumentKey = function() {
    function t(e) {
        this.path = e, assert(t.lt(e), "Invalid DocumentKey with an odd number of segments: " + e.st().join("/"));
    }
    return t.prototype.dt = function(t1) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t1;
    }, t.prototype.isEqual = function(t1) {
        return null !== t1 && 0 === ResourcePath.H(this.path, t1.path);
    }, t.prototype.toString = function() {
        return this.path.toString();
    }, t.H = function(t1, e) {
        return ResourcePath.H(t1.path, e.path);
    }, t.lt = function(t1) {
        return t1.length % 2 == 0;
    }, t.Tt = function(e) {
        return new t(new ResourcePath(e.slice()));
    }, t.Et = function(e) {
        return new t(ResourcePath.ut(e));
    }, t.EMPTY = new t(new ResourcePath([])), t;
}(), __PRIVATE_SortedMap = function() {
    function t(t1, e) {
        this.H = t1, this.root = e || __PRIVATE_LLRBNode.EMPTY;
    }
    return t.prototype.Pt = function(e, n) {
        return new t(this.H, this.root.Pt(e, n, this.H).copy(null, null, __PRIVATE_LLRBNode.At, null, null));
    }, t.prototype.remove = function(e) {
        return new t(this.H, this.root.remove(e, this.H).copy(null, null, __PRIVATE_LLRBNode.At, null, null));
    }, t.prototype.get = function(t1) {
        for(var e = this.root; !e.tt();){
            var n = this.H(t1, e.key);
            if (0 === n) return e.value;
            n < 0 ? e = e.left : n > 0 && (e = e.right);
        }
        return null;
    }, t.prototype.indexOf = function(t1) {
        for(var e = 0, n = this.root; !n.tt();){
            var r = this.H(t1, n.key);
            if (0 === r) return e + n.left.size;
            r < 0 ? n = n.left : (e += n.left.size + 1, n = n.right);
        }
        return -1;
    }, t.prototype.tt = function() {
        return this.root.tt();
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.root.size;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.Rt = function() {
        return this.root.Rt();
    }, t.prototype.It = function() {
        return this.root.It();
    }, t.prototype.Vt = function(t1) {
        return this.root.Vt(t1);
    }, t.prototype.forEach = function(t1) {
        this.Vt(function(e, n) {
            return t1(e, n), !1;
        });
    }, t.prototype.toString = function() {
        var t1 = [];
        return this.Vt(function(e, n) {
            return t1.push(e + ":" + n), !1;
        }), "{" + t1.join(", ") + "}";
    }, t.prototype.vt = function(t1) {
        return this.root.vt(t1);
    }, t.prototype.pt = function() {
        return new __PRIVATE_SortedMapIterator(this.root, null, this.H, !1);
    }, t.prototype.bt = function(t1) {
        return new __PRIVATE_SortedMapIterator(this.root, t1, this.H, !1);
    }, t.prototype.gt = function() {
        return new __PRIVATE_SortedMapIterator(this.root, null, this.H, !0);
    }, t.prototype.wt = function(t1) {
        return new __PRIVATE_SortedMapIterator(this.root, t1, this.H, !0);
    }, t;
}(), __PRIVATE_SortedMapIterator = function() {
    function t(t1, e, n, r) {
        this.yt = r, this.St = [];
        for(var i = 1; !t1.tt();)if (i = e ? n(t1.key, e) : 1, r && (i *= -1), i < 0) t1 = this.yt ? t1.left : t1.right;
        else {
            if (0 === i) {
                this.St.push(t1);
                break;
            }
            this.St.push(t1), t1 = this.yt ? t1.right : t1.left;
        }
    }
    return t.prototype.Dt = function() {
        assert(this.St.length > 0, "getNext() called on iterator when hasNext() is false.");
        var t1 = this.St.pop(), e = {
            key: t1.key,
            value: t1.value
        };
        if (this.yt) for(t1 = t1.left; !t1.tt();)this.St.push(t1), t1 = t1.right;
        else for(t1 = t1.right; !t1.tt();)this.St.push(t1), t1 = t1.left;
        return e;
    }, t.prototype.Ct = function() {
        return this.St.length > 0;
    }, t.prototype.Ot = function() {
        if (0 === this.St.length) return null;
        var t1 = this.St[this.St.length - 1];
        return {
            key: t1.key,
            value: t1.value
        };
    }, t;
}(), __PRIVATE_LLRBNode = function() {
    function t(e, n, r, i, s) {
        this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, this.right = null != s ? s : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    return t.prototype.copy = function(e, n, r, i, s) {
        return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != s ? s : this.right);
    }, t.prototype.tt = function() {
        return !1;
    }, t.prototype.Vt = function(t1) {
        return this.left.Vt(t1) || t1(this.key, this.value) || this.right.Vt(t1);
    }, t.prototype.vt = function(t1) {
        return this.right.vt(t1) || t1(this.key, this.value) || this.left.vt(t1);
    }, t.prototype.min = function() {
        return this.left.tt() ? this : this.left.min();
    }, t.prototype.Rt = function() {
        return this.min().key;
    }, t.prototype.It = function() {
        return this.right.tt() ? this.key : this.right.It();
    }, t.prototype.Pt = function(t1, e, n) {
        var r = this, i = n(t1, r.key);
        return (r = i < 0 ? r.copy(null, null, null, r.left.Pt(t1, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.Pt(t1, e, n))).Ft();
    }, t.prototype.Nt = function() {
        if (this.left.tt()) return t.EMPTY;
        var e = this;
        return e.left.Mt() || e.left.left.Mt() || (e = e.Lt()), (e = e.copy(null, null, null, e.left.Nt(), null)).Ft();
    }, t.prototype.remove = function(e, n) {
        var r, i = this;
        if (n(e, i.key) < 0) i.left.tt() || i.left.Mt() || i.left.left.Mt() || (i = i.Lt()), i = i.copy(null, null, null, i.left.remove(e, n), null);
        else {
            if (i.left.Mt() && (i = i.Gt()), i.right.tt() || i.right.Mt() || i.right.left.Mt() || (i = i.Bt()), 0 === n(e, i.key)) {
                if (i.right.tt()) return t.EMPTY;
                r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.Nt());
            }
            i = i.copy(null, null, null, null, i.right.remove(e, n));
        }
        return i.Ft();
    }, t.prototype.Mt = function() {
        return this.color;
    }, t.prototype.Ft = function() {
        var t1 = this;
        return t1.right.Mt() && !t1.left.Mt() && (t1 = t1.Ut()), t1.left.Mt() && t1.left.left.Mt() && (t1 = t1.Gt()), t1.left.Mt() && t1.right.Mt() && (t1 = t1.kt()), t1;
    }, t.prototype.Lt = function() {
        var t1 = this.kt();
        return t1.right.left.Mt() && (t1 = (t1 = (t1 = t1.copy(null, null, null, null, t1.right.Gt())).Ut()).kt()), t1;
    }, t.prototype.Bt = function() {
        var t1 = this.kt();
        return t1.left.left.Mt() && (t1 = (t1 = t1.Gt()).kt()), t1;
    }, t.prototype.Ut = function() {
        var e = this.copy(null, null, t.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, e, null);
    }, t.prototype.Gt = function() {
        var e = this.copy(null, null, t.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, e);
    }, t.prototype.kt = function() {
        var t1 = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t1, e);
    }, t.prototype.xt = function() {
        var t1 = this.Kt();
        return Math.pow(2, t1) <= this.size + 1;
    }, t.prototype.Kt = function() {
        if (this.Mt() && this.left.Mt()) throw fail("Red node has red child(" + this.key + "," + this.value + ")");
        if (this.right.Mt()) throw fail("Right child of (" + this.key + "," + this.value + ") is red");
        var t1 = this.left.Kt();
        if (t1 !== this.right.Kt()) throw fail("Black depths differ");
        return t1 + (this.Mt() ? 0 : 1);
    }, t.EMPTY = null, t.RED = !0, t.At = !1, t;
}(), __PRIVATE_LLRBEmptyNode = function() {
    function t() {
        this.size = 0;
    }
    return Object.defineProperty(t.prototype, "key", {
        get: function() {
            throw fail("LLRBEmptyNode has no key.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "value", {
        get: function() {
            throw fail("LLRBEmptyNode has no value.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "color", {
        get: function() {
            throw fail("LLRBEmptyNode has no color.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "left", {
        get: function() {
            throw fail("LLRBEmptyNode has no left child.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "right", {
        get: function() {
            throw fail("LLRBEmptyNode has no right child.");
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.copy = function(t1, e, n, r, i) {
        return this;
    }, t.prototype.Pt = function(t1, e, n) {
        return new __PRIVATE_LLRBNode(t1, e);
    }, t.prototype.remove = function(t1, e) {
        return this;
    }, t.prototype.tt = function() {
        return !0;
    }, t.prototype.Vt = function(t1) {
        return !1;
    }, t.prototype.vt = function(t1) {
        return !1;
    }, t.prototype.Rt = function() {
        return null;
    }, t.prototype.It = function() {
        return null;
    }, t.prototype.Mt = function() {
        return !1;
    }, t.prototype.xt = function() {
        return !0;
    }, t.prototype.Kt = function() {
        return 0;
    }, t;
}();
__PRIVATE_LLRBNode.EMPTY = new __PRIVATE_LLRBEmptyNode;
var __PRIVATE_SortedSet = function() {
    function t(t1) {
        this.H = t1, this.data = new __PRIVATE_SortedMap(this.H);
    }
    return t.jt = function(e) {
        var n = new t(e.H);
        return e.forEach(function(t1) {
            n = n.add(t1);
        }), n;
    }, t.prototype.has = function(t1) {
        return null !== this.data.get(t1);
    }, t.prototype.first = function() {
        return this.data.Rt();
    }, t.prototype.last = function() {
        return this.data.It();
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.data.size;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.indexOf = function(t1) {
        return this.data.indexOf(t1);
    }, t.prototype.forEach = function(t1) {
        this.data.Vt(function(e, n) {
            return t1(e), !1;
        });
    }, t.prototype.qt = function(t1, e) {
        for(var n = this.data.bt(t1[0]); n.Ct();){
            var r = n.Dt();
            if (this.H(r.key, t1[1]) >= 0) return;
            e(r.key);
        }
    }, t.prototype.Qt = function(t1, e) {
        var n;
        for(n = (void 0) !== e ? this.data.bt(e) : this.data.pt(); n.Ct();){
            if (!t1(n.Dt().key)) return;
        }
    }, t.prototype.Wt = function(t1) {
        var e = this.data.bt(t1);
        return e.Ct() ? e.Dt().key : null;
    }, t.prototype.pt = function() {
        return new __PRIVATE_SortedSetIterator(this.data.pt());
    }, t.prototype.bt = function(t1) {
        return new __PRIVATE_SortedSetIterator(this.data.bt(t1));
    }, t.prototype.add = function(t1) {
        return this.copy(this.data.remove(t1).Pt(t1, !0));
    }, t.prototype.delete = function(t1) {
        return this.has(t1) ? this.copy(this.data.remove(t1)) : this;
    }, t.prototype.tt = function() {
        return this.data.tt();
    }, t.prototype.$t = function(t1) {
        var e = this;
        return e.size < t1.size && (e = t1, t1 = this), t1.forEach(function(t2) {
            e = e.add(t2);
        }), e;
    }, t.prototype.isEqual = function(e) {
        if (!(e instanceof t)) return !1;
        if (this.size !== e.size) return !1;
        for(var n = this.data.pt(), r = e.data.pt(); n.Ct();){
            var i = n.Dt().key, s = r.Dt().key;
            if (0 !== this.H(i, s)) return !1;
        }
        return !0;
    }, t.prototype.st = function() {
        var t1 = [];
        return this.forEach(function(e) {
            t1.push(e);
        }), t1;
    }, t.prototype.toString = function() {
        var t1 = [];
        return this.forEach(function(e) {
            return t1.push(e);
        }), "SortedSet(" + t1.toString() + ")";
    }, t.prototype.copy = function(e) {
        var n = new t(this.H);
        return n.data = e, n;
    }, t;
}(), __PRIVATE_SortedSetIterator = function() {
    function t(t1) {
        this.Yt = t1;
    }
    return t.prototype.Dt = function() {
        return this.Yt.Dt().key;
    }, t.prototype.Ct = function() {
        return this.Yt.Ct();
    }, t;
}(), __PRIVATE_ServerTimestampTransform = function() {
    function t() {
    }
    return t.prototype.Ht = function(t1, e) {
        return new __PRIVATE_ServerTimestampValue(e, t1);
    }, t.prototype.Xt = function(t1, e) {
        return e;
    }, t.prototype.zt = function(t1) {
        return null;
    }, t.prototype.isEqual = function(e) {
        return e instanceof t;
    }, t.instance = new t, t;
}(), __PRIVATE_ArrayUnionTransformOperation = function() {
    function t(t1) {
        this.elements = t1;
    }
    return t.prototype.Ht = function(t1, e) {
        return this.apply(t1);
    }, t.prototype.Xt = function(t1, e) {
        return this.apply(t1);
    }, t.prototype.apply = function(t1) {
        for(var e = __PRIVATE_coercedFieldValuesArray(t1), n = function(t2) {
            e.find(function(e1) {
                return e1.isEqual(t2);
            }) || e.push(t2);
        }, r = 0, i = this.elements; r < i.length; r++)n(i[r]);
        return new ArrayValue(e);
    }, t.prototype.zt = function(t1) {
        return null;
    }, t.prototype.isEqual = function(e) {
        return e instanceof t && __PRIVATE_arrayEquals(e.elements, this.elements);
    }, t;
}(), __PRIVATE_ArrayRemoveTransformOperation = function() {
    function t(t1) {
        this.elements = t1;
    }
    return t.prototype.Ht = function(t1, e) {
        return this.apply(t1);
    }, t.prototype.Xt = function(t1, e) {
        return this.apply(t1);
    }, t.prototype.apply = function(t1) {
        for(var e = __PRIVATE_coercedFieldValuesArray(t1), n = function(t2) {
            e = e.filter(function(e1) {
                return !e1.isEqual(t2);
            });
        }, r = 0, i = this.elements; r < i.length; r++)n(i[r]);
        return new ArrayValue(e);
    }, t.prototype.zt = function(t1) {
        return null;
    }, t.prototype.isEqual = function(e) {
        return e instanceof t && __PRIVATE_arrayEquals(e.elements, this.elements);
    }, t;
}(), __PRIVATE_NumericIncrementTransformOperation = function() {
    function t(t1) {
        this.Jt = t1;
    }
    return t.prototype.Ht = function(t1, e) {
        var n = this.zt(t1);
        if (n instanceof __PRIVATE_IntegerValue && this.Jt instanceof __PRIVATE_IntegerValue) {
            var r = n.Zt + this.Jt.Zt;
            return new __PRIVATE_IntegerValue(r);
        }
        r = n.Zt + this.Jt.Zt;
        return new __PRIVATE_DoubleValue(r);
    }, t.prototype.Xt = function(t1, e) {
        return assert(null !== e, "Didn't receive transformResult for NUMERIC_ADD transform"), e;
    }, t.prototype.zt = function(t1) {
        return t1 instanceof __PRIVATE_NumberValue ? t1 : new __PRIVATE_IntegerValue(0);
    }, t.prototype.isEqual = function(e) {
        return e instanceof t && this.Jt.isEqual(e.Jt);
    }, t;
}();
function __PRIVATE_coercedFieldValuesArray(t) {
    return t instanceof ArrayValue ? t.Zt.slice() : [];
}
var __PRIVATE_MutationType, __PRIVATE_FieldMask = function() {
    function t(t1) {
        this.fields = t1;
    }
    return t.te = function(e) {
        return new t(e);
    }, t.ee = function(e) {
        var n = new __PRIVATE_SortedSet(FieldPath.H);
        return e.forEach(function(t1) {
            return n = n.add(t1);
        }), new t(n);
    }, t.prototype.ne = function(t1) {
        var e = !1;
        return this.fields.forEach(function(n) {
            n.rt(t1) && (e = !0);
        }), e;
    }, t.prototype.isEqual = function(t1) {
        return this.fields.isEqual(t1.fields);
    }, t;
}(), FieldTransform = function() {
    function t(t1, e) {
        this.field = t1, this.transform = e;
    }
    return t.prototype.isEqual = function(t1) {
        return this.field.isEqual(t1.field) && this.transform.isEqual(t1.transform);
    }, t;
}(), __PRIVATE_MutationResult = function(t, e) {
    this.version = t, this.transformResults = e;
};
!function(t) {
    t[t.Set = 0] = "Set", t[t.re = 1] = "__PRIVATE_Patch", t[t.Transform = 2] = "Transform", t[t.ie = 3] = "__PRIVATE_Delete", t[t.Verify = 4] = "Verify";
}(__PRIVATE_MutationType || (__PRIVATE_MutationType = {
}));
var __PRIVATE_TypeOrder, __PRIVATE_ServerTimestampBehavior, Precondition = function() {
    function t(t1, e) {
        this.updateTime = t1, this.exists = e, assert((void 0) === t1 || (void 0) === e, 'Precondition can specify "exists" or "updateTime" but not both');
    }
    return t.exists = function(e) {
        return new t(void 0, e);
    }, t.updateTime = function(e) {
        return new t(e);
    }, Object.defineProperty(t.prototype, "se", {
        get: function() {
            return (void 0) === this.updateTime && (void 0) === this.exists;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.oe = function(t1) {
        return (void 0) !== this.updateTime ? t1 instanceof Document1 && t1.version.isEqual(this.updateTime) : (void 0) !== this.exists ? this.exists === t1 instanceof Document1 : (assert(this.se, "Precondition should be empty"), !0);
    }, t.prototype.isEqual = function(t1) {
        return equals(this.updateTime, t1.updateTime) && this.exists === t1.exists;
    }, t.NONE = new t, t;
}(), __PRIVATE_Mutation = function() {
    function t() {
    }
    return t.prototype.ue = function(t1) {
        null != t1 && assert(t1.key.isEqual(this.key), "Can only apply a mutation to a document with the same key");
    }, t.ae = function(t1) {
        return t1 instanceof Document1 ? t1.version : __PRIVATE_SnapshotVersion.MIN;
    }, t;
}(), __PRIVATE_SetMutation = function(t) {
    function e(e1, n, r) {
        var i = t.call(this) || this;
        return i.key = e1, i.value = n, i._e = r, i.type = __PRIVATE_MutationType.Set, i;
    }
    return tslib.__extends(e, t), e.prototype.Xt = function(t1, e1) {
        this.ue(t1), assert(null == e1.transformResults, "Transform results received by SetMutation.");
        var n = e1.version;
        return new Document1(this.key, n, {
            hasCommittedMutations: !0
        }, this.value);
    }, e.prototype.Ht = function(t1, e1, n) {
        if (this.ue(t1), !this._e.oe(t1)) return t1;
        var r = __PRIVATE_Mutation.ae(t1);
        return new Document1(this.key, r, {
            ce: !0
        }, this.value);
    }, e.prototype.he = function(t1) {
        return null;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && this.value.isEqual(t1.value) && this._e.isEqual(t1._e);
    }, e;
}(__PRIVATE_Mutation), __PRIVATE_PatchMutation = function(t) {
    function e(e1, n, r, i) {
        var s = t.call(this) || this;
        return s.key = e1, s.data = n, s.fe = r, s._e = i, s.type = __PRIVATE_MutationType.re, s;
    }
    return tslib.__extends(e, t), e.prototype.Xt = function(t1, e1) {
        if (this.ue(t1), assert(null == e1.transformResults, "Transform results received by PatchMutation."), !this._e.oe(t1)) return new __PRIVATE_UnknownDocument(this.key, e1.version);
        var n = this.le(t1);
        return new Document1(this.key, e1.version, {
            hasCommittedMutations: !0
        }, n);
    }, e.prototype.Ht = function(t1, e1, n) {
        if (this.ue(t1), !this._e.oe(t1)) return t1;
        var r = __PRIVATE_Mutation.ae(t1), i = this.le(t1);
        return new Document1(this.key, r, {
            ce: !0
        }, i);
    }, e.prototype.he = function(t1) {
        return null;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && this.fe.isEqual(t1.fe) && this._e.isEqual(t1._e);
    }, e.prototype.le = function(t1) {
        var e1;
        return e1 = t1 instanceof Document1 ? t1.data() : __PRIVATE_ObjectValue.EMPTY, this.de(e1);
    }, e.prototype.de = function(t1) {
        var e1 = this;
        return this.fe.fields.forEach(function(n) {
            if (!n.tt()) {
                var r = e1.data.field(n);
                t1 = null !== r ? t1.set(n, r) : t1.delete(n);
            }
        }), t1;
    }, e;
}(__PRIVATE_Mutation), __PRIVATE_TransformMutation = function(t) {
    function e(e1, n) {
        var r = t.call(this) || this;
        return r.key = e1, r.fieldTransforms = n, r.type = __PRIVATE_MutationType.Transform, r._e = Precondition.exists(!0), r;
    }
    return tslib.__extends(e, t), e.prototype.Xt = function(t1, e1) {
        if (this.ue(t1), assert(null != e1.transformResults, "Transform results missing for TransformMutation."), !this._e.oe(t1)) return new __PRIVATE_UnknownDocument(this.key, e1.version);
        var n = this.Te(t1), r = this.Ee(t1, e1.transformResults), i = e1.version, s = this.Pe(n.data(), r);
        return new Document1(this.key, i, {
            hasCommittedMutations: !0
        }, s);
    }, e.prototype.Ht = function(t1, e1, n) {
        if (this.ue(t1), !this._e.oe(t1)) return t1;
        var r = this.Te(t1), i = this.Ae(n, t1, e1), s = this.Pe(r.data(), i);
        return new Document1(this.key, r.version, {
            ce: !0
        }, s);
    }, e.prototype.he = function(t1) {
        for(var e1 = null, n = 0, r = this.fieldTransforms; n < r.length; n++){
            var i = r[n], s = t1 instanceof Document1 ? t1.field(i.field) : void 0, o = i.transform.zt(s || null);
            null != o && (e1 = null == e1 ? __PRIVATE_ObjectValue.EMPTY.set(i.field, o) : e1.set(i.field, o));
        }
        return e1;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && __PRIVATE_arrayEquals(this.fieldTransforms, t1.fieldTransforms) && this._e.isEqual(t1._e);
    }, e.prototype.Te = function(t1) {
        return assert(t1 instanceof Document1, "Unknown MaybeDocument type " + t1), assert(t1.key.isEqual(this.key), "Can only transform a document with the same key"), t1;
    }, e.prototype.Ee = function(t1, e1) {
        var n = [];
        assert(this.fieldTransforms.length === e1.length, "server transform result count (" + e1.length + ") should match field transform count (" + this.fieldTransforms.length + ")");
        for(var r = 0; r < e1.length; r++){
            var i = this.fieldTransforms[r], s = i.transform, o = null;
            t1 instanceof Document1 && (o = t1.field(i.field)), n.push(s.Xt(o, e1[r]));
        }
        return n;
    }, e.prototype.Ae = function(t1, e1, n) {
        for(var r = [], i = 0, s = this.fieldTransforms; i < s.length; i++){
            var o = s[i], u = o.transform, a = null;
            e1 instanceof Document1 && (a = e1.field(o.field)), null === a && n instanceof Document1 && (a = n.field(o.field)), r.push(u.Ht(a, t1));
        }
        return r;
    }, e.prototype.Pe = function(t1, e1) {
        assert(e1.length === this.fieldTransforms.length, "TransformResults length mismatch.");
        for(var n = 0; n < this.fieldTransforms.length; n++){
            var r = this.fieldTransforms[n].field;
            t1 = t1.set(r, e1[n]);
        }
        return t1;
    }, e;
}(__PRIVATE_Mutation), __PRIVATE_DeleteMutation = function(t) {
    function e(e1, n) {
        var r = t.call(this) || this;
        return r.key = e1, r._e = n, r.type = __PRIVATE_MutationType.ie, r;
    }
    return tslib.__extends(e, t), e.prototype.Xt = function(t1, e1) {
        return this.ue(t1), assert(null == e1.transformResults, "Transform results received by DeleteMutation."), new __PRIVATE_NoDocument(this.key, e1.version, {
            hasCommittedMutations: !0
        });
    }, e.prototype.Ht = function(t1, e1, n) {
        return this.ue(t1), this._e.oe(t1) ? (t1 && assert(t1.key.isEqual(this.key), "Can only apply mutation to document with same key"), new __PRIVATE_NoDocument(this.key, __PRIVATE_SnapshotVersion.W())) : t1;
    }, e.prototype.he = function(t1) {
        return null;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && this._e.isEqual(t1._e);
    }, e;
}(__PRIVATE_Mutation), __PRIVATE_VerifyMutation = function(t) {
    function e(e1, n) {
        var r = t.call(this) || this;
        return r.key = e1, r._e = n, r.type = __PRIVATE_MutationType.Verify, r;
    }
    return tslib.__extends(e, t), e.prototype.Xt = function(t1, e1) {
        fail("VerifyMutation should only be used in Transactions.");
    }, e.prototype.Ht = function(t1, e1, n) {
        fail("VerifyMutation should only be used in Transactions.");
    }, e.prototype.he = function(t1) {
        fail("VerifyMutation should only be used in Transactions.");
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && this._e.isEqual(t1._e);
    }, e;
}(__PRIVATE_Mutation);
!function(t) {
    t[t.Re = 0] = "__PRIVATE_NullValue", t[t.Ie = 1] = "__PRIVATE_BooleanValue", t[t.Ve = 2] = "__PRIVATE_NumberValue", t[t.me = 3] = "__PRIVATE_TimestampValue", t[t.ve = 4] = "__PRIVATE_StringValue", t[t.pe = 5] = "__PRIVATE_BlobValue", t[t.be = 6] = "__PRIVATE_RefValue", t[t.ge = 7] = "__PRIVATE_GeoPointValue", t[t.ArrayValue = 8] = "ArrayValue", t[t.we = 9] = "__PRIVATE_ObjectValue";
}(__PRIVATE_TypeOrder || (__PRIVATE_TypeOrder = {
})), (function(t) {
    t[t.ye = 0] = "__PRIVATE_Default", t[t.Se = 1] = "__PRIVATE_Estimate", t[t.De = 2] = "__PRIVATE_Previous";
})(__PRIVATE_ServerTimestampBehavior || (__PRIVATE_ServerTimestampBehavior = {
}));
var __PRIVATE_FieldValueOptions = function() {
    function t(t1, e) {
        this.Ce = t1, this.timestampsInSnapshots = e;
    }
    return t.Oe = function(e, n) {
        switch(e.serverTimestamps){
            case "estimate":
                return new t(__PRIVATE_ServerTimestampBehavior.Se, n);
            case "previous":
                return new t(__PRIVATE_ServerTimestampBehavior.De, n);
            case "none":
            case void 0:
                return new t(__PRIVATE_ServerTimestampBehavior.ye, n);
            default:
                return fail("fromSnapshotOptions() called with invalid options.");
        }
    }, t;
}(), FieldValue = function() {
    function t() {
    }
    return t.prototype.toString = function() {
        var t1 = this.value();
        return null === t1 ? "null" : t1.toString();
    }, t.prototype.Fe = function(t1) {
        return assert(this.Ne !== t1.Ne, "Default compareTo should not be used for values of same type."), __PRIVATE_primitiveComparator(this.Ne, t1.Ne);
    }, t;
}(), __PRIVATE_NullValue = function(t) {
    function e() {
        var e1 = t.call(this) || this;
        return e1.Ne = __PRIVATE_TypeOrder.Re, e1.Zt = null, e1;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return null;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e;
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? 0 : this.Fe(t1);
    }, e.prototype.Me = function() {
        return 4;
    }, e.Le = new e, e;
}(FieldValue), __PRIVATE_BooleanValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.Ie, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.Zt;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.Zt === t1.Zt;
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? __PRIVATE_primitiveComparator(this, t1) : this.Fe(t1);
    }, e.prototype.Me = function() {
        return 4;
    }, e.of = function(t1) {
        return t1 ? e.Ge : e.Be;
    }, e.Ge = new e(!0), e.Be = new e(!1), e;
}(FieldValue), __PRIVATE_NumberValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.Ve, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.Zt;
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? __PRIVATE_numericComparator(this.Zt, t1.Zt) : this.Fe(t1);
    }, e.prototype.Me = function() {
        return 8;
    }, e;
}(FieldValue);
function __PRIVATE_numericComparator(t, e) {
    return t < e ? -1 : t > e ? 1 : t === e ? 0 : isNaN(t) ? isNaN(e) ? 0 : -1 : 1;
}
function __PRIVATE_numericEquals(t, e) {
    return t === e ? 0 !== t || 1 / t == 1 / e : t != t && e != e;
}
var __PRIVATE_IntegerValue = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(e, t), e.prototype.isEqual = function(t1) {
        return t1 instanceof e && __PRIVATE_numericEquals(this.Zt, t1.Zt);
    }, e;
}(__PRIVATE_NumberValue), __PRIVATE_DoubleValue = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(e, t), e.prototype.isEqual = function(t1) {
        return t1 instanceof e && __PRIVATE_numericEquals(this.Zt, t1.Zt);
    }, e.Ue = new e(NaN), e.POSITIVE_INFINITY = new e(1 / 0), e.NEGATIVE_INFINITY = new e(-1 / 0), e;
}(__PRIVATE_NumberValue), __PRIVATE_StringValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.ve, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.Zt;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.Zt === t1.Zt;
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? __PRIVATE_primitiveComparator(this.Zt, t1.Zt) : this.Fe(t1);
    }, e.prototype.Me = function() {
        return 2 * this.Zt.length;
    }, e;
}(FieldValue), __PRIVATE_TimestampValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.me, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return !t1 || t1.timestampsInSnapshots ? this.Zt : this.Zt.toDate();
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.Zt.isEqual(t1.Zt);
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? this.Zt.K(t1.Zt) : t1 instanceof __PRIVATE_ServerTimestampValue ? -1 : this.Fe(t1);
    }, e.prototype.Me = function() {
        return 16;
    }, e;
}(FieldValue), __PRIVATE_ServerTimestampValue = function(t) {
    function e(e1, n) {
        var r = t.call(this) || this;
        return r.ke = e1, r.previousValue = n, r.Ne = __PRIVATE_TypeOrder.me, r;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return t1 && t1.Ce === __PRIVATE_ServerTimestampBehavior.Se ? new __PRIVATE_TimestampValue(this.ke).value(t1) : t1 && t1.Ce === __PRIVATE_ServerTimestampBehavior.De && this.previousValue ? this.previousValue.value(t1) : null;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.ke.isEqual(t1.ke);
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? this.ke.K(t1.ke) : t1 instanceof __PRIVATE_TimestampValue ? 1 : this.Fe(t1);
    }, e.prototype.toString = function() {
        return "<ServerTimestamp localTime=" + this.ke.toString() + ">";
    }, e.prototype.Me = function() {
        return 16 + (this.previousValue ? this.previousValue.Me() : 0);
    }, e;
}(FieldValue), __PRIVATE_BlobValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.pe, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.Zt;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.Zt.isEqual(t1.Zt);
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? this.Zt.K(t1.Zt) : this.Fe(t1);
    }, e.prototype.Me = function() {
        return this.Zt.xe();
    }, e;
}(FieldValue), __PRIVATE_RefValue = function(t) {
    function e(e1, n) {
        var r = t.call(this) || this;
        return r.o = e1, r.key = n, r.Ne = __PRIVATE_TypeOrder.be, r;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.key;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && this.o.isEqual(t1.o);
    }, e.prototype._ = function(t1) {
        if (t1 instanceof e) {
            var n = this.o._(t1.o);
            return 0 !== n ? n : __PRIVATE_DocumentKey.H(this.key, t1.key);
        }
        return this.Fe(t1);
    }, e.prototype.Me = function() {
        return this.o.projectId.length + this.o.database.length + this.key.toString().length;
    }, e;
}(FieldValue), __PRIVATE_GeoPointValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.ge, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.Zt;
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.Zt.isEqual(t1.Zt);
    }, e.prototype._ = function(t1) {
        return t1 instanceof e ? this.Zt.K(t1.Zt) : this.Fe(t1);
    }, e.prototype.Me = function() {
        return 16;
    }, e;
}(FieldValue), __PRIVATE_ObjectValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.we, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        var e1 = {
        };
        return this.Zt.Vt(function(n, r) {
            e1[n] = r.value(t1);
        }), e1;
    }, e.prototype.forEach = function(t1) {
        this.Zt.Vt(t1);
    }, e.prototype.isEqual = function(t1) {
        if (t1 instanceof e) {
            for(var n = this.Zt.pt(), r = t1.Zt.pt(); n.Ct() && r.Ct();){
                var i = n.Dt(), s = r.Dt();
                if (i.key !== s.key || !i.value.isEqual(s.value)) return !1;
            }
            return !n.Ct() && !r.Ct();
        }
        return !1;
    }, e.prototype._ = function(t1) {
        if (t1 instanceof e) {
            for(var n = this.Zt.pt(), r = t1.Zt.pt(); n.Ct() && r.Ct();){
                var i = n.Dt(), s = r.Dt(), o = __PRIVATE_primitiveComparator(i.key, s.key) || i.value._(s.value);
                if (o) return o;
            }
            return __PRIVATE_primitiveComparator(n.Ct(), r.Ct());
        }
        return this.Fe(t1);
    }, e.prototype.set = function(t1, n) {
        if (assert(!t1.tt(), "Cannot set field for empty path on ObjectValue"), 1 === t1.length) return this.Ke(t1.et(), n);
        var r = this.child(t1.et());
        r instanceof e || (r = e.EMPTY);
        var i = r.set(t1.J(), n);
        return this.Ke(t1.et(), i);
    }, e.prototype.delete = function(t1) {
        if (assert(!t1.tt(), "Cannot delete field for empty path on ObjectValue"), 1 === t1.length) return new e(this.Zt.remove(t1.et()));
        var n = this.child(t1.et());
        if (n instanceof e) {
            var r = n.delete(t1.J());
            return new e(this.Zt.Pt(t1.et(), r));
        }
        return this;
    }, e.prototype.contains = function(t1) {
        return null !== this.field(t1);
    }, e.prototype.field = function(t1) {
        assert(!t1.tt(), "Can't get field of empty path");
        var n = this;
        return t1.forEach(function(t2) {
            n = n instanceof e ? n.Zt.get(t2) : null;
        }), n;
    }, e.prototype.fe = function() {
        var t1 = new __PRIVATE_SortedSet(FieldPath.H);
        return this.Zt.forEach(function(n, r) {
            var i = new FieldPath([
                n
            ]);
            if (r instanceof e) {
                var s = r.fe().fields;
                s.tt() ? t1 = t1.add(i) : s.forEach(function(e1) {
                    t1 = t1.add(i.child(e1));
                });
            } else t1 = t1.add(i);
        }), __PRIVATE_FieldMask.te(t1);
    }, e.prototype.Me = function() {
        var t1 = 0;
        return this.Zt.Vt(function(e1, n) {
            t1 += e1.length + n.Me();
        }), t1;
    }, e.prototype.toString = function() {
        return this.Zt.toString();
    }, e.prototype.child = function(t1) {
        return this.Zt.get(t1) || void 0;
    }, e.prototype.Ke = function(t1, n) {
        return new e(this.Zt.Pt(t1, n));
    }, e.EMPTY = new e(new __PRIVATE_SortedMap(__PRIVATE_primitiveComparator)), e;
}(FieldValue), ArrayValue = function(t) {
    function e(e1) {
        var n = t.call(this) || this;
        return n.Zt = e1, n.Ne = __PRIVATE_TypeOrder.ArrayValue, n;
    }
    return tslib.__extends(e, t), e.prototype.value = function(t1) {
        return this.Zt.map(function(e1) {
            return e1.value(t1);
        });
    }, e.prototype.contains = function(t1) {
        for(var e1 = 0, n = this.Zt; e1 < n.length; e1++){
            if (n[e1].isEqual(t1)) return !0;
        }
        return !1;
    }, e.prototype.forEach = function(t1) {
        this.Zt.forEach(t1);
    }, e.prototype.isEqual = function(t1) {
        if (t1 instanceof e) {
            if (this.Zt.length !== t1.Zt.length) return !1;
            for(var n = 0; n < this.Zt.length; n++)if (!this.Zt[n].isEqual(t1.Zt[n])) return !1;
            return !0;
        }
        return !1;
    }, e.prototype._ = function(t1) {
        if (t1 instanceof e) {
            for(var n = Math.min(this.Zt.length, t1.Zt.length), r = 0; r < n; r++){
                var i = this.Zt[r]._(t1.Zt[r]);
                if (i) return i;
            }
            return __PRIVATE_primitiveComparator(this.Zt.length, t1.Zt.length);
        }
        return this.Fe(t1);
    }, e.prototype.Me = function() {
        return this.Zt.reduce(function(t1, e1) {
            return t1 + e1.Me();
        }, 0);
    }, e.prototype.toString = function() {
        return "[" + this.Zt.map(function(t1) {
            return t1.toString();
        }).join(",") + "]";
    }, e;
}(FieldValue), __PRIVATE_MaybeDocument = function() {
    function t(t1, e) {
        this.key = t1, this.version = e;
    }
    return t.je = function(t1, e) {
        return __PRIVATE_DocumentKey.H(t1.key, e.key);
    }, t;
}(), Document1 = function(t) {
    function e(e1, n, r, i, s, o) {
        var u = t.call(this, e1, n) || this;
        return u.qe = i, u.proto = s, u.converter = o, assert((void 0) !== u.qe || (void 0) !== u.proto && (void 0) !== u.converter, "If objectValue is not defined, proto and converter need to be set."), u.ce = !!r.ce, u.hasCommittedMutations = !!r.hasCommittedMutations, u;
    }
    return tslib.__extends(e, t), e.prototype.field = function(t1) {
        if (this.qe) return this.qe.field(t1);
        this.Qe || (this.Qe = new Map);
        var e1 = t1.ot(), n = this.Qe.get(e1);
        if ((void 0) === n) {
            var r = this.We(t1);
            n = (void 0) === r ? null : this.converter(r), this.Qe.set(e1, n);
        }
        return n;
    }, e.prototype.data = function() {
        var t1 = this;
        if (!this.qe) {
            var e1 = __PRIVATE_ObjectValue.EMPTY;
            forEach(this.proto.fields || {
            }, function(n, r) {
                e1 = e1.set(new FieldPath([
                    n
                ]), t1.converter(r));
            }), this.qe = e1, this.Qe = void 0;
        }
        return this.qe;
    }, e.prototype.value = function() {
        return this.data().value();
    }, e.prototype.isEqual = function(t1) {
        return t1 instanceof e && this.key.isEqual(t1.key) && this.version.isEqual(t1.version) && this.ce === t1.ce && this.hasCommittedMutations === t1.hasCommittedMutations && this.data().isEqual(t1.data());
    }, e.prototype.toString = function() {
        return "Document(" + this.key + ", " + this.version + ", " + this.data().toString() + ", {hasLocalMutations: " + this.ce + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
    }, Object.defineProperty(e.prototype, "hasPendingWrites", {
        get: function() {
            return this.ce || this.hasCommittedMutations;
        },
        enumerable: !0,
        configurable: !0
    }), e.prototype.We = function(t1) {
        assert((void 0) !== this.proto, "Can only call getProtoField() when proto is defined");
        for(var e2 = this.proto.fields ? this.proto.fields[t1.et()] : void 0, n = 1; n < t1.length; ++n){
            if (!e2 || !e2.mapValue || !e2.mapValue.fields) return;
            e2 = e2.mapValue.fields[t1.get(n)];
        }
        return e2;
    }, e.$e = function(t1, e2, n) {
        var r = e2.field(t1), i = n.field(t1);
        return null !== r && null !== i ? r._(i) : fail("Trying to compare documents on fields that don't exist");
    }, e;
}(__PRIVATE_MaybeDocument), __PRIVATE_NoDocument = function(t) {
    function e2(e3, n, r) {
        var i = t.call(this, e3, n) || this;
        return i.hasCommittedMutations = !(!r || !r.hasCommittedMutations), i;
    }
    return tslib.__extends(e2, t), e2.prototype.toString = function() {
        return "NoDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(e2.prototype, "hasPendingWrites", {
        get: function() {
            return this.hasCommittedMutations;
        },
        enumerable: !0,
        configurable: !0
    }), e2.prototype.isEqual = function(t1) {
        return t1 instanceof e2 && t1.hasCommittedMutations === this.hasCommittedMutations && t1.version.isEqual(this.version) && t1.key.isEqual(this.key);
    }, e2;
}(__PRIVATE_MaybeDocument), __PRIVATE_UnknownDocument = function(t) {
    function e2() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(e2, t), e2.prototype.toString = function() {
        return "UnknownDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(e2.prototype, "hasPendingWrites", {
        get: function() {
            return !0;
        },
        enumerable: !0,
        configurable: !0
    }), e2.prototype.isEqual = function(t1) {
        return t1 instanceof e2 && t1.version.isEqual(this.version) && t1.key.isEqual(this.key);
    }, e2;
}(__PRIVATE_MaybeDocument), __PRIVATE_NumberAsAny = Number, MIN_SAFE_INTEGER = __PRIVATE_NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1), MAX_SAFE_INTEGER = __PRIVATE_NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1, isInteger = __PRIVATE_NumberAsAny.isInteger || function(t) {
    return "number" == typeof t && isFinite(t) && Math.floor(t) === t;
};
function isNullOrUndefined(t) {
    return null == t;
}
function isSafeInteger(t) {
    return isInteger(t) && t <= MAX_SAFE_INTEGER && t >= MIN_SAFE_INTEGER;
}
var __PRIVATE_LimitType, Target = function() {
    function t(t1, e2, n, r, i, s, o) {
        (void 0) === e2 && (e2 = null), (void 0) === n && (n = []), (void 0) === r && (r = []), (void 0) === i && (i = null), (void 0) === s && (s = null), (void 0) === o && (o = null), this.path = t1, this.collectionGroup = e2, this.orderBy = n, this.filters = r, this.limit = i, this.startAt = s, this.endAt = o, this.Ye = null;
    }
    return t.prototype.canonicalId = function() {
        if (null === this.Ye) {
            var t1 = this.path.ot();
            null !== this.collectionGroup && (t1 += "|cg:" + this.collectionGroup), t1 += "|f:";
            for(var e2 = 0, n = this.filters; e2 < n.length; e2++)t1 += n[e2].canonicalId(), t1 += ",";
            t1 += "|ob:";
            for(var r = 0, i = this.orderBy; r < i.length; r++)t1 += i[r].canonicalId(), t1 += ",";
            isNullOrUndefined(this.limit) || (t1 += "|l:", t1 += this.limit), this.startAt && (t1 += "|lb:", t1 += this.startAt.canonicalId()), this.endAt && (t1 += "|ub:", t1 += this.endAt.canonicalId()), this.Ye = t1;
        }
        return this.Ye;
    }, t.prototype.toString = function() {
        var t2 = this.path.ot();
        return null !== this.collectionGroup && (t2 += " collectionGroup=" + this.collectionGroup), this.filters.length > 0 && (t2 += ", filters: [" + this.filters.join(", ") + "]"), isNullOrUndefined(this.limit) || (t2 += ", limit: " + this.limit), this.orderBy.length > 0 && (t2 += ", orderBy: [" + this.orderBy.join(", ") + "]"), this.startAt && (t2 += ", startAt: " + this.startAt.canonicalId()), this.endAt && (t2 += ", endAt: " + this.endAt.canonicalId()), "Target(" + t2 + ")";
    }, t.prototype.isEqual = function(t2) {
        if (this.limit !== t2.limit) return !1;
        if (this.orderBy.length !== t2.orderBy.length) return !1;
        for(var e3 = 0; e3 < this.orderBy.length; e3++)if (!this.orderBy[e3].isEqual(t2.orderBy[e3])) return !1;
        if (this.filters.length !== t2.filters.length) return !1;
        for(e3 = 0; e3 < this.filters.length; e3++)if (!this.filters[e3].isEqual(t2.filters[e3])) return !1;
        return this.collectionGroup === t2.collectionGroup && !!this.path.isEqual(t2.path) && !(null !== this.startAt ? !this.startAt.isEqual(t2.startAt) : null !== t2.startAt) && (null !== this.endAt ? this.endAt.isEqual(t2.endAt) : null === t2.endAt);
    }, t.prototype.He = function() {
        return __PRIVATE_DocumentKey.lt(this.path) && null === this.collectionGroup && 0 === this.filters.length;
    }, t;
}();
!function(t2) {
    t2.Xe = "F", t2.ze = "L";
}(__PRIVATE_LimitType || (__PRIVATE_LimitType = {
}));
var __PRIVATE_TargetPurpose, Query = function() {
    function t2(t3, e3, n, r, i, s, o, u) {
        (void 0) === e3 && (e3 = null), (void 0) === n && (n = []), (void 0) === r && (r = []), (void 0) === i && (i = null), (void 0) === s && (s = __PRIVATE_LimitType.Xe), (void 0) === o && (o = null), (void 0) === u && (u = null), this.path = t3, this.collectionGroup = e3, this.Je = n, this.filters = r, this.limit = i, this.Ze = s, this.startAt = o, this.endAt = u, this.tn = null, this.en = null, this.startAt && this.nn(this.startAt), this.endAt && this.nn(this.endAt);
    }
    return t2.rn = function(e3) {
        return new t2(e3);
    }, Object.defineProperty(t2.prototype, "orderBy", {
        get: function() {
            if (null === this.tn) {
                var t3 = this.in(), e3 = this.sn();
                if (null !== t3 && null === e3) t3.ct() ? this.tn = [
                    __PRIVATE_KEY_ORDERING_ASC
                ] : this.tn = [
                    new __PRIVATE_OrderBy(t3),
                    __PRIVATE_KEY_ORDERING_ASC
                ];
                else {
                    assert(null === t3 || null !== e3 && t3.isEqual(e3), "First orderBy should match inequality field."), this.tn = [];
                    for(var n = !1, r = 0, i = this.Je; r < i.length; r++){
                        var s = i[r];
                        this.tn.push(s), s.field.ct() && (n = !0);
                    }
                    if (!n) {
                        var o = this.Je.length > 0 ? this.Je[this.Je.length - 1].dir : __PRIVATE_Direction.ASCENDING;
                        this.tn.push(o === __PRIVATE_Direction.ASCENDING ? __PRIVATE_KEY_ORDERING_ASC : __PRIVATE_KEY_ORDERING_DESC);
                    }
                }
            }
            return this.tn;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.on = function(e4) {
        assert(null == this.in() || !(e4 instanceof FieldFilter) || !e4.un() || e4.field.isEqual(this.in()), "Query must only have one inequality field."), assert(!this.He(), "No filtering allowed for document query");
        var n = this.filters.concat([
            e4
        ]);
        return new t2(this.path, this.collectionGroup, this.Je.slice(), n, this.limit, this.Ze, this.startAt, this.endAt);
    }, t2.prototype.an = function(e4) {
        assert(!this.startAt && !this.endAt, "Bounds must be set after orderBy");
        var n = this.Je.concat([
            e4
        ]);
        return new t2(this.path, this.collectionGroup, n, this.filters.slice(), this.limit, this.Ze, this.startAt, this.endAt);
    }, t2.prototype._n = function(e4) {
        return new t2(this.path, this.collectionGroup, this.Je.slice(), this.filters.slice(), e4, __PRIVATE_LimitType.Xe, this.startAt, this.endAt);
    }, t2.prototype.cn = function(e4) {
        return new t2(this.path, this.collectionGroup, this.Je.slice(), this.filters.slice(), e4, __PRIVATE_LimitType.ze, this.startAt, this.endAt);
    }, t2.prototype.hn = function(e4) {
        return new t2(this.path, this.collectionGroup, this.Je.slice(), this.filters.slice(), this.limit, this.Ze, e4, this.endAt);
    }, t2.prototype.fn = function(e4) {
        return new t2(this.path, this.collectionGroup, this.Je.slice(), this.filters.slice(), this.limit, this.Ze, this.startAt, e4);
    }, t2.prototype.ln = function(e4) {
        return new t2(e4, null, this.Je.slice(), this.filters.slice(), this.limit, this.Ze, this.startAt, this.endAt);
    }, t2.prototype.dn = function() {
        return 0 === this.filters.length && null === this.limit && null == this.startAt && null == this.endAt && (0 === this.Je.length || 1 === this.Je.length && this.Je[0].field.ct());
    }, t2.prototype.canonicalId = function() {
        return this.Tn().canonicalId() + "|lt:" + this.Ze;
    }, t2.prototype.toString = function() {
        return "Query(target=" + this.Tn().toString() + "; limitType=" + this.Ze + ")";
    }, t2.prototype.isEqual = function(t4) {
        return this.Tn().isEqual(t4.Tn()) && this.Ze === t4.Ze;
    }, t2.prototype.En = function(t4, e4) {
        for(var n = !1, r = 0, i = this.orderBy; r < i.length; r++){
            var s = i[r], o = s.compare(t4, e4);
            if (0 !== o) return o;
            n = n || s.field.ct();
        }
        return assert(n, "orderBy used that doesn't compare on key field"), 0;
    }, t2.prototype.matches = function(t4) {
        return this.Pn(t4) && this.An(t4) && this.Rn(t4) && this.In(t4);
    }, t2.prototype.Vn = function() {
        return !isNullOrUndefined(this.limit) && this.Ze === __PRIVATE_LimitType.Xe;
    }, t2.prototype.mn = function() {
        return !isNullOrUndefined(this.limit) && this.Ze === __PRIVATE_LimitType.ze;
    }, t2.prototype.sn = function() {
        return this.Je.length > 0 ? this.Je[0].field : null;
    }, t2.prototype.in = function() {
        for(var t4 = 0, e4 = this.filters; t4 < e4.length; t4++){
            var n = e4[t4];
            if (n instanceof FieldFilter && n.un()) return n.field;
        }
        return null;
    }, t2.prototype.vn = function(t4) {
        for(var e4 = 0, n = this.filters; e4 < n.length; e4++){
            var r = n[e4];
            if (r instanceof FieldFilter && t4.indexOf(r.op) >= 0) return r.op;
        }
        return null;
    }, t2.prototype.He = function() {
        return this.Tn().He();
    }, t2.prototype.pn = function() {
        return null !== this.collectionGroup;
    }, t2.prototype.Tn = function() {
        if (!this.en) {
            if (this.Ze === __PRIVATE_LimitType.Xe) this.en = new Target(this.path, this.collectionGroup, this.orderBy, this.filters, this.limit, this.startAt, this.endAt);
            else {
                for(var t4 = [], e4 = 0, n = this.orderBy; e4 < n.length; e4++){
                    var r = n[e4], i = r.dir === __PRIVATE_Direction.DESCENDING ? __PRIVATE_Direction.ASCENDING : __PRIVATE_Direction.DESCENDING;
                    t4.push(new __PRIVATE_OrderBy(r.field, i));
                }
                var s = this.endAt ? new __PRIVATE_Bound(this.endAt.position, !this.endAt.before) : null, o = this.startAt ? new __PRIVATE_Bound(this.startAt.position, !this.startAt.before) : null;
                this.en = new Target(this.path, this.collectionGroup, t4, this.filters, this.limit, s, o);
            }
        }
        return this.en;
    }, t2.prototype.Pn = function(t5) {
        var e5 = t5.key.path;
        return null !== this.collectionGroup ? t5.key.dt(this.collectionGroup) && this.path.rt(e5) : __PRIVATE_DocumentKey.lt(this.path) ? this.path.isEqual(e5) : this.path.it(e5);
    }, t2.prototype.An = function(t5) {
        for(var e5 = 0, n = this.Je; e5 < n.length; e5++){
            var r = n[e5];
            if (!r.field.ct() && null === t5.field(r.field)) return !1;
        }
        return !0;
    }, t2.prototype.Rn = function(t5) {
        for(var e5 = 0, n = this.filters; e5 < n.length; e5++){
            if (!n[e5].matches(t5)) return !1;
        }
        return !0;
    }, t2.prototype.In = function(t5) {
        return !(this.startAt && !this.startAt.bn(this.orderBy, t5)) && (!this.endAt || !this.endAt.bn(this.orderBy, t5));
    }, t2.prototype.nn = function(t5) {
        assert(t5.position.length <= this.orderBy.length, "Bound is longer than orderBy");
    }, t2;
}(), Filter = function() {
}, __PRIVATE_Operator = function() {
    function t2(t5) {
        this.name = t5;
    }
    return t2.ut = function(e5) {
        switch(e5){
            case "<":
                return t2.LESS_THAN;
            case "<=":
                return t2.LESS_THAN_OR_EQUAL;
            case "==":
                return t2.EQUAL;
            case ">=":
                return t2.GREATER_THAN_OR_EQUAL;
            case ">":
                return t2.GREATER_THAN;
            case "array-contains":
                return t2.ARRAY_CONTAINS;
            case "in":
                return t2.IN;
            case "array-contains-any":
                return t2.ARRAY_CONTAINS_ANY;
            default:
                return fail("Unknown FieldFilter operator: " + e5);
        }
    }, t2.prototype.toString = function() {
        return this.name;
    }, t2.prototype.isEqual = function(t5) {
        return this.name === t5.name;
    }, t2.LESS_THAN = new t2("<"), t2.LESS_THAN_OR_EQUAL = new t2("<="), t2.EQUAL = new t2("=="), t2.GREATER_THAN = new t2(">"), t2.GREATER_THAN_OR_EQUAL = new t2(">="), t2.ARRAY_CONTAINS = new t2("array-contains"), t2.IN = new t2("in"), t2.ARRAY_CONTAINS_ANY = new t2("array-contains-any"), t2;
}(), FieldFilter = function(t2) {
    function e5(e6, n, r) {
        var i = t2.call(this) || this;
        return i.field = e6, i.op = n, i.value = r, i;
    }
    return tslib.__extends(e5, t2), e5.create = function(t5, n, r) {
        if (t5.ct()) return n === __PRIVATE_Operator.IN ? (assert(r instanceof ArrayValue, "Comparing on key with IN, but filter value not an ArrayValue"), assert(r.Zt.every(function(t6) {
            return t6 instanceof __PRIVATE_RefValue;
        }), "Comparing on key with IN, but an array value was not a RefValue"), new __PRIVATE_KeyFieldInFilter(t5, r)) : (assert(r instanceof __PRIVATE_RefValue, "Comparing on key, but filter value not a RefValue"), assert(n !== __PRIVATE_Operator.ARRAY_CONTAINS && n !== __PRIVATE_Operator.ARRAY_CONTAINS_ANY, "'" + n.toString() + "' queries don't make sense on document keys."), new __PRIVATE_KeyFieldFilter(t5, n, r));
        if (r.isEqual(__PRIVATE_NullValue.Le)) {
            if (n !== __PRIVATE_Operator.EQUAL) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Null supports only equality comparisons.");
            return new e5(t5, n, r);
        }
        if (r.isEqual(__PRIVATE_DoubleValue.Ue)) {
            if (n !== __PRIVATE_Operator.EQUAL) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. NaN supports only equality comparisons.");
            return new e5(t5, n, r);
        }
        return n === __PRIVATE_Operator.ARRAY_CONTAINS ? new __PRIVATE_ArrayContainsFilter(t5, r) : n === __PRIVATE_Operator.IN ? (assert(r instanceof ArrayValue, "IN filter has invalid value: " + r.toString()), new __PRIVATE_InFilter(t5, r)) : n === __PRIVATE_Operator.ARRAY_CONTAINS_ANY ? (assert(r instanceof ArrayValue, "ARRAY_CONTAINS_ANY filter has invalid value: " + r.toString()), new __PRIVATE_ArrayContainsAnyFilter(t5, r)) : new e5(t5, n, r);
    }, e5.prototype.matches = function(t5) {
        var e6 = t5.field(this.field);
        return null !== e6 && this.value.Ne === e6.Ne && this.gn(e6._(this.value));
    }, e5.prototype.gn = function(t5) {
        switch(this.op){
            case __PRIVATE_Operator.LESS_THAN:
                return t5 < 0;
            case __PRIVATE_Operator.LESS_THAN_OR_EQUAL:
                return t5 <= 0;
            case __PRIVATE_Operator.EQUAL:
                return 0 === t5;
            case __PRIVATE_Operator.GREATER_THAN:
                return t5 > 0;
            case __PRIVATE_Operator.GREATER_THAN_OR_EQUAL:
                return t5 >= 0;
            default:
                return fail("Unknown FieldFilter operator: " + this.op);
        }
    }, e5.prototype.un = function() {
        return [
            __PRIVATE_Operator.LESS_THAN,
            __PRIVATE_Operator.LESS_THAN_OR_EQUAL,
            __PRIVATE_Operator.GREATER_THAN,
            __PRIVATE_Operator.GREATER_THAN_OR_EQUAL
        ].indexOf(this.op) >= 0;
    }, e5.prototype.canonicalId = function() {
        return this.field.ot() + this.op.toString() + this.value.toString();
    }, e5.prototype.isEqual = function(t5) {
        return t5 instanceof e5 && this.op.isEqual(t5.op) && this.field.isEqual(t5.field) && this.value.isEqual(t5.value);
    }, e5.prototype.toString = function() {
        return this.field.ot() + " " + this.op + " " + this.value.value();
    }, e5;
}(Filter), __PRIVATE_KeyFieldFilter = function(t2) {
    function e5() {
        return null !== t2 && t2.apply(this, arguments) || this;
    }
    return tslib.__extends(e5, t2), e5.prototype.matches = function(t5) {
        var e6 = this.value, n = __PRIVATE_DocumentKey.H(t5.key, e6.key);
        return this.gn(n);
    }, e5;
}(FieldFilter), __PRIVATE_KeyFieldInFilter = function(t2) {
    function e5(e6, n) {
        var r = t2.call(this, e6, __PRIVATE_Operator.IN, n) || this;
        return r.value = n, r;
    }
    return tslib.__extends(e5, t2), e5.prototype.matches = function(t5) {
        return this.value.Zt.some(function(e6) {
            return t5.key.isEqual(e6.key);
        });
    }, e5;
}(FieldFilter), __PRIVATE_ArrayContainsFilter = function(t2) {
    function e5(e6, n) {
        return t2.call(this, e6, __PRIVATE_Operator.ARRAY_CONTAINS, n) || this;
    }
    return tslib.__extends(e5, t2), e5.prototype.matches = function(t5) {
        var e6 = t5.field(this.field);
        return e6 instanceof ArrayValue && e6.contains(this.value);
    }, e5;
}(FieldFilter), __PRIVATE_InFilter = function(t2) {
    function e5(e6, n) {
        var r = t2.call(this, e6, __PRIVATE_Operator.IN, n) || this;
        return r.value = n, r;
    }
    return tslib.__extends(e5, t2), e5.prototype.matches = function(t5) {
        var e6 = this.value, n = t5.field(this.field);
        return null !== n && e6.contains(n);
    }, e5;
}(FieldFilter), __PRIVATE_ArrayContainsAnyFilter = function(t2) {
    function e5(e6, n) {
        var r = t2.call(this, e6, __PRIVATE_Operator.ARRAY_CONTAINS_ANY, n) || this;
        return r.value = n, r;
    }
    return tslib.__extends(e5, t2), e5.prototype.matches = function(t5) {
        var e6 = this, n = t5.field(this.field);
        return n instanceof ArrayValue && n.Zt.some(function(t6) {
            return e6.value.contains(t6);
        });
    }, e5;
}(FieldFilter), __PRIVATE_Direction = function() {
    function t2(t5) {
        this.name = t5;
    }
    return t2.prototype.toString = function() {
        return this.name;
    }, t2.ASCENDING = new t2("asc"), t2.DESCENDING = new t2("desc"), t2;
}(), __PRIVATE_Bound = function() {
    function t2(t5, e5) {
        this.position = t5, this.before = e5;
    }
    return t2.prototype.canonicalId = function() {
        for(var t5 = this.before ? "b:" : "a:", e5 = 0, n = this.position; e5 < n.length; e5++)t5 += n[e5].toString();
        return t5;
    }, t2.prototype.bn = function(t5, e5) {
        assert(this.position.length <= t5.length, "Bound has more components than query's orderBy");
        for(var n = 0, r = 0; r < this.position.length; r++){
            var i = t5[r], s = this.position[r];
            if (i.field.ct()) assert(s instanceof __PRIVATE_RefValue, "Bound has a non-key value where the key path is being used."), n = __PRIVATE_DocumentKey.H(s.key, e5.key);
            else {
                var o = e5.field(i.field);
                assert(null !== o, "Field should exist since document matched the orderBy already."), n = s._(o);
            }
            if (i.dir === __PRIVATE_Direction.DESCENDING && (n *= -1), 0 !== n) break;
        }
        return this.before ? n <= 0 : n < 0;
    }, t2.prototype.isEqual = function(t5) {
        if (null === t5) return !1;
        if (this.before !== t5.before || this.position.length !== t5.position.length) return !1;
        for(var e5 = 0; e5 < this.position.length; e5++){
            var n = this.position[e5], r = t5.position[e5];
            if (!n.isEqual(r)) return !1;
        }
        return !0;
    }, t2;
}(), __PRIVATE_OrderBy = function() {
    function t2(t5, e5) {
        this.field = t5, (void 0) === e5 && (e5 = __PRIVATE_Direction.ASCENDING), this.dir = e5, this.wn = t5.ct();
    }
    return t2.prototype.compare = function(t5, e5) {
        var n = this.wn ? Document1.je(t5, e5) : Document1.$e(this.field, t5, e5);
        switch(this.dir){
            case __PRIVATE_Direction.ASCENDING:
                return n;
            case __PRIVATE_Direction.DESCENDING:
                return -1 * n;
            default:
                return fail("Unknown direction: " + this.dir);
        }
    }, t2.prototype.canonicalId = function() {
        return this.field.ot() + this.dir.toString();
    }, t2.prototype.toString = function() {
        return this.field.ot() + " (" + this.dir + ")";
    }, t2.prototype.isEqual = function(t5) {
        return this.dir === t5.dir && this.field.isEqual(t5.field);
    }, t2;
}(), __PRIVATE_KEY_ORDERING_ASC = new __PRIVATE_OrderBy(FieldPath.ht(), __PRIVATE_Direction.ASCENDING), __PRIVATE_KEY_ORDERING_DESC = new __PRIVATE_OrderBy(FieldPath.ht(), __PRIVATE_Direction.DESCENDING);
!function(t2) {
    t2[t2.yn = 0] = "__PRIVATE_Listen", t2[t2.Sn = 1] = "__PRIVATE_ExistenceFilterMismatch", t2[t2.Dn = 2] = "__PRIVATE_LimboResolution";
}(__PRIVATE_TargetPurpose || (__PRIVATE_TargetPurpose = {
}));
var __PRIVATE_RpcCode, __PRIVATE_TargetData = function() {
    function t2(t5, e5, n, r, i, s, o) {
        (void 0) === i && (i = __PRIVATE_SnapshotVersion.MIN), (void 0) === s && (s = __PRIVATE_SnapshotVersion.MIN), (void 0) === o && (o = __PRIVATE_emptyByteString()), this.target = t5, this.targetId = e5, this.Cn = n, this.sequenceNumber = r, this.On = i, this.lastLimboFreeSnapshotVersion = s, this.resumeToken = o;
    }
    return t2.prototype.Fn = function(e5) {
        return new t2(this.target, this.targetId, this.Cn, e5, this.On, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }, t2.prototype.Nn = function(e5, n) {
        return new t2(this.target, this.targetId, this.Cn, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e5);
    }, t2.prototype.Mn = function(e5) {
        return new t2(this.target, this.targetId, this.Cn, this.sequenceNumber, this.On, e5, this.resumeToken);
    }, t2.prototype.isEqual = function(t5) {
        return this.targetId === t5.targetId && this.Cn === t5.Cn && this.sequenceNumber === t5.sequenceNumber && this.On.isEqual(t5.On) && this.lastLimboFreeSnapshotVersion.isEqual(t5.lastLimboFreeSnapshotVersion) && this.resumeToken === t5.resumeToken && this.target.isEqual(t5.target);
    }, t2;
}(), ExistenceFilter = function() {
    function t2(t5) {
        this.count = t5;
    }
    return t2.prototype.isEqual = function(t5) {
        return t5 && t5.count === this.count;
    }, t2;
}();
function __PRIVATE_isPermanentError(t2) {
    switch(t2){
        case Code.OK:
            return fail("Treated status OK as error");
        case Code.CANCELLED:
        case Code.UNKNOWN:
        case Code.DEADLINE_EXCEEDED:
        case Code.RESOURCE_EXHAUSTED:
        case Code.INTERNAL:
        case Code.UNAVAILABLE:
        case Code.UNAUTHENTICATED:
            return !1;
        case Code.INVALID_ARGUMENT:
        case Code.NOT_FOUND:
        case Code.ALREADY_EXISTS:
        case Code.PERMISSION_DENIED:
        case Code.FAILED_PRECONDITION:
        case Code.ABORTED:
        case Code.OUT_OF_RANGE:
        case Code.UNIMPLEMENTED:
        case Code.DATA_LOSS:
            return !0;
        default:
            return fail("Unknown status code: " + t2);
    }
}
function __PRIVATE_isPermanentWriteError(t2) {
    return __PRIVATE_isPermanentError(t2) && t2 !== Code.ABORTED;
}
function __PRIVATE_mapCodeFromRpcStatus(t2) {
    var e5 = __PRIVATE_RpcCode[t2];
    if ((void 0) !== e5) return __PRIVATE_mapCodeFromRpcCode(e5);
}
function __PRIVATE_mapCodeFromRpcCode(t2) {
    if ((void 0) === t2) return error("GRPC error has no .code"), Code.UNKNOWN;
    switch(t2){
        case __PRIVATE_RpcCode.OK:
            return Code.OK;
        case __PRIVATE_RpcCode.CANCELLED:
            return Code.CANCELLED;
        case __PRIVATE_RpcCode.UNKNOWN:
            return Code.UNKNOWN;
        case __PRIVATE_RpcCode.DEADLINE_EXCEEDED:
            return Code.DEADLINE_EXCEEDED;
        case __PRIVATE_RpcCode.RESOURCE_EXHAUSTED:
            return Code.RESOURCE_EXHAUSTED;
        case __PRIVATE_RpcCode.INTERNAL:
            return Code.INTERNAL;
        case __PRIVATE_RpcCode.UNAVAILABLE:
            return Code.UNAVAILABLE;
        case __PRIVATE_RpcCode.UNAUTHENTICATED:
            return Code.UNAUTHENTICATED;
        case __PRIVATE_RpcCode.INVALID_ARGUMENT:
            return Code.INVALID_ARGUMENT;
        case __PRIVATE_RpcCode.NOT_FOUND:
            return Code.NOT_FOUND;
        case __PRIVATE_RpcCode.ALREADY_EXISTS:
            return Code.ALREADY_EXISTS;
        case __PRIVATE_RpcCode.PERMISSION_DENIED:
            return Code.PERMISSION_DENIED;
        case __PRIVATE_RpcCode.FAILED_PRECONDITION:
            return Code.FAILED_PRECONDITION;
        case __PRIVATE_RpcCode.ABORTED:
            return Code.ABORTED;
        case __PRIVATE_RpcCode.OUT_OF_RANGE:
            return Code.OUT_OF_RANGE;
        case __PRIVATE_RpcCode.UNIMPLEMENTED:
            return Code.UNIMPLEMENTED;
        case __PRIVATE_RpcCode.DATA_LOSS:
            return Code.DATA_LOSS;
        default:
            return fail("Unknown status code: " + t2);
    }
}
function __PRIVATE_mapRpcCodeFromCode(t2) {
    if ((void 0) === t2) return __PRIVATE_RpcCode.OK;
    switch(t2){
        case Code.OK:
            return __PRIVATE_RpcCode.OK;
        case Code.CANCELLED:
            return __PRIVATE_RpcCode.CANCELLED;
        case Code.UNKNOWN:
            return __PRIVATE_RpcCode.UNKNOWN;
        case Code.DEADLINE_EXCEEDED:
            return __PRIVATE_RpcCode.DEADLINE_EXCEEDED;
        case Code.RESOURCE_EXHAUSTED:
            return __PRIVATE_RpcCode.RESOURCE_EXHAUSTED;
        case Code.INTERNAL:
            return __PRIVATE_RpcCode.INTERNAL;
        case Code.UNAVAILABLE:
            return __PRIVATE_RpcCode.UNAVAILABLE;
        case Code.UNAUTHENTICATED:
            return __PRIVATE_RpcCode.UNAUTHENTICATED;
        case Code.INVALID_ARGUMENT:
            return __PRIVATE_RpcCode.INVALID_ARGUMENT;
        case Code.NOT_FOUND:
            return __PRIVATE_RpcCode.NOT_FOUND;
        case Code.ALREADY_EXISTS:
            return __PRIVATE_RpcCode.ALREADY_EXISTS;
        case Code.PERMISSION_DENIED:
            return __PRIVATE_RpcCode.PERMISSION_DENIED;
        case Code.FAILED_PRECONDITION:
            return __PRIVATE_RpcCode.FAILED_PRECONDITION;
        case Code.ABORTED:
            return __PRIVATE_RpcCode.ABORTED;
        case Code.OUT_OF_RANGE:
            return __PRIVATE_RpcCode.OUT_OF_RANGE;
        case Code.UNIMPLEMENTED:
            return __PRIVATE_RpcCode.UNIMPLEMENTED;
        case Code.DATA_LOSS:
            return __PRIVATE_RpcCode.DATA_LOSS;
        default:
            return fail("Unknown status code: " + t2);
    }
}
function __PRIVATE_mapCodeFromHttpResponseErrorStatus(t2) {
    var e5 = t2.toLowerCase().replace("_", "-");
    return Object.values(Code).indexOf(e5) >= 0 ? e5 : Code.UNKNOWN;
}
!function(t2) {
    t2[t2.OK = 0] = "OK", t2[t2.CANCELLED = 1] = "CANCELLED", t2[t2.UNKNOWN = 2] = "UNKNOWN", t2[t2.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", t2[t2.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", t2[t2.NOT_FOUND = 5] = "NOT_FOUND", t2[t2.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", t2[t2.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", t2[t2.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", t2[t2.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", t2[t2.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", t2[t2.ABORTED = 10] = "ABORTED", t2[t2.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", t2[t2.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", t2[t2.INTERNAL = 13] = "INTERNAL", t2[t2.UNAVAILABLE = 14] = "UNAVAILABLE", t2[t2.DATA_LOSS = 15] = "DATA_LOSS";
}(__PRIVATE_RpcCode || (__PRIVATE_RpcCode = {
}));
var __PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
function __PRIVATE_maybeDocumentMap() {
    return __PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP;
}
function __PRIVATE_nullableMaybeDocumentMap() {
    return __PRIVATE_maybeDocumentMap();
}
var __PRIVATE_EMPTY_DOCUMENT_MAP = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
function __PRIVATE_documentMap() {
    return __PRIVATE_EMPTY_DOCUMENT_MAP;
}
var __PRIVATE_EMPTY_DOCUMENT_VERSION_MAP = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
function __PRIVATE_documentVersionMap() {
    return __PRIVATE_EMPTY_DOCUMENT_VERSION_MAP;
}
var __PRIVATE_EMPTY_DOCUMENT_KEY_SET = new __PRIVATE_SortedSet(__PRIVATE_DocumentKey.H);
function __PRIVATE_documentKeySet() {
    for(var t2 = [], e5 = 0; e5 < arguments.length; e5++)t2[e5] = arguments[e5];
    for(var n = __PRIVATE_EMPTY_DOCUMENT_KEY_SET, r = 0, i = t2; r < i.length; r++){
        var s = i[r];
        n = n.add(s);
    }
    return n;
}
var __PRIVATE_EMPTY_TARGET_ID_SET = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator);
function __PRIVATE_targetIdSet() {
    return __PRIVATE_EMPTY_TARGET_ID_SET;
}
var __PRIVATE_ChangeType, __PRIVATE_SyncState, __PRIVATE_DocumentSet = function() {
    function t2(t5) {
        this.H = t5 ? function(e5, n) {
            return t5(e5, n) || __PRIVATE_DocumentKey.H(e5.key, n.key);
        } : function(t6, e5) {
            return __PRIVATE_DocumentKey.H(t6.key, e5.key);
        }, this.Ln = __PRIVATE_documentMap(), this.Gn = new __PRIVATE_SortedMap(this.H);
    }
    return t2.Bn = function(e5) {
        return new t2(e5.H);
    }, t2.prototype.has = function(t5) {
        return null != this.Ln.get(t5);
    }, t2.prototype.get = function(t5) {
        return this.Ln.get(t5);
    }, t2.prototype.first = function() {
        return this.Gn.Rt();
    }, t2.prototype.last = function() {
        return this.Gn.It();
    }, t2.prototype.tt = function() {
        return this.Gn.tt();
    }, t2.prototype.indexOf = function(t5) {
        var e5 = this.Ln.get(t5);
        return e5 ? this.Gn.indexOf(e5) : -1;
    }, Object.defineProperty(t2.prototype, "size", {
        get: function() {
            return this.Gn.size;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.forEach = function(t5) {
        this.Gn.Vt(function(e5, n) {
            return t5(e5), !1;
        });
    }, t2.prototype.add = function(t5) {
        var e5 = this.delete(t5.key);
        return e5.copy(e5.Ln.Pt(t5.key, t5), e5.Gn.Pt(t5, null));
    }, t2.prototype.delete = function(t5) {
        var e5 = this.get(t5);
        return e5 ? this.copy(this.Ln.remove(t5), this.Gn.remove(e5)) : this;
    }, t2.prototype.isEqual = function(e5) {
        if (!(e5 instanceof t2)) return !1;
        if (this.size !== e5.size) return !1;
        for(var n = this.Gn.pt(), r = e5.Gn.pt(); n.Ct();){
            var i = n.Dt().key, s = r.Dt().key;
            if (!i.isEqual(s)) return !1;
        }
        return !0;
    }, t2.prototype.toString = function() {
        var t5 = [];
        return this.forEach(function(e5) {
            t5.push(e5.toString());
        }), 0 === t5.length ? "DocumentSet ()" : "DocumentSet (\n  " + t5.join("  \n") + "\n)";
    }, t2.prototype.copy = function(e5, n) {
        var r = new t2;
        return r.H = this.H, r.Ln = e5, r.Gn = n, r;
    }, t2;
}();
!function(t2) {
    t2[t2.Un = 0] = "__PRIVATE_Added", t2[t2.kn = 1] = "__PRIVATE_Removed", t2[t2.xn = 2] = "__PRIVATE_Modified", t2[t2.Kn = 3] = "__PRIVATE_Metadata";
}(__PRIVATE_ChangeType || (__PRIVATE_ChangeType = {
})), (function(t2) {
    t2[t2.jn = 0] = "__PRIVATE_Local", t2[t2.qn = 1] = "__PRIVATE_Synced";
})(__PRIVATE_SyncState || (__PRIVATE_SyncState = {
}));
var __PRIVATE_WatchTargetChangeState, __PRIVATE_DocumentChangeSet = function() {
    function t2() {
        this.Qn = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
    }
    return t2.prototype.track = function(t5) {
        var e5 = t5.doc.key, n = this.Qn.get(e5);
        n ? t5.type !== __PRIVATE_ChangeType.Un && n.type === __PRIVATE_ChangeType.Kn ? this.Qn = this.Qn.Pt(e5, t5) : t5.type === __PRIVATE_ChangeType.Kn && n.type !== __PRIVATE_ChangeType.kn ? this.Qn = this.Qn.Pt(e5, {
            type: n.type,
            doc: t5.doc
        }) : t5.type === __PRIVATE_ChangeType.xn && n.type === __PRIVATE_ChangeType.xn ? this.Qn = this.Qn.Pt(e5, {
            type: __PRIVATE_ChangeType.xn,
            doc: t5.doc
        }) : t5.type === __PRIVATE_ChangeType.xn && n.type === __PRIVATE_ChangeType.Un ? this.Qn = this.Qn.Pt(e5, {
            type: __PRIVATE_ChangeType.Un,
            doc: t5.doc
        }) : t5.type === __PRIVATE_ChangeType.kn && n.type === __PRIVATE_ChangeType.Un ? this.Qn = this.Qn.remove(e5) : t5.type === __PRIVATE_ChangeType.kn && n.type === __PRIVATE_ChangeType.xn ? this.Qn = this.Qn.Pt(e5, {
            type: __PRIVATE_ChangeType.kn,
            doc: n.doc
        }) : t5.type === __PRIVATE_ChangeType.Un && n.type === __PRIVATE_ChangeType.kn ? this.Qn = this.Qn.Pt(e5, {
            type: __PRIVATE_ChangeType.xn,
            doc: t5.doc
        }) : fail("unsupported combination of changes: " + JSON.stringify(t5) + " after " + JSON.stringify(n)) : this.Qn = this.Qn.Pt(e5, t5);
    }, t2.prototype.Wn = function() {
        var t5 = [];
        return this.Qn.Vt(function(e5, n) {
            t5.push(n);
        }), t5;
    }, t2;
}(), __PRIVATE_ViewSnapshot = function() {
    function t2(t5, e5, n, r, i, s, o, u) {
        this.query = t5, this.docs = e5, this.$n = n, this.docChanges = r, this.Yn = i, this.fromCache = s, this.Hn = o, this.Xn = u;
    }
    return t2.zn = function(e5, n, r, i) {
        var s = [];
        return n.forEach(function(t5) {
            s.push({
                type: __PRIVATE_ChangeType.Un,
                doc: t5
            });
        }), new t2(e5, n, __PRIVATE_DocumentSet.Bn(n), s, r, i, !0, !1);
    }, Object.defineProperty(t2.prototype, "hasPendingWrites", {
        get: function() {
            return !this.Yn.tt();
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.isEqual = function(t5) {
        if (!(this.fromCache === t5.fromCache && this.Hn === t5.Hn && this.Yn.isEqual(t5.Yn) && this.query.isEqual(t5.query) && this.docs.isEqual(t5.docs) && this.$n.isEqual(t5.$n))) return !1;
        var e5 = this.docChanges, n = t5.docChanges;
        if (e5.length !== n.length) return !1;
        for(var r = 0; r < e5.length; r++)if (e5[r].type !== n[r].type || !e5[r].doc.isEqual(n[r].doc)) return !1;
        return !0;
    }, t2;
}(), __PRIVATE_RemoteEvent = function() {
    function t2(t5, e5, n, r, i) {
        this.On = t5, this.Jn = e5, this.Zn = n, this.tr = r, this.er = i;
    }
    return t2.nr = function(e5, n) {
        var r, i = ((r = {
        })[e5] = TargetChange.rr(e5, n), r);
        return new t2(__PRIVATE_SnapshotVersion.MIN, i, __PRIVATE_targetIdSet(), __PRIVATE_maybeDocumentMap(), __PRIVATE_documentKeySet());
    }, t2;
}(), TargetChange = function() {
    function t2(t5, e5, n, r, i) {
        this.resumeToken = t5, this.ir = e5, this.sr = n, this.or = r, this.ur = i;
    }
    return t2.rr = function(e5, n) {
        return new t2(__PRIVATE_emptyByteString(), n, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());
    }, t2;
}(), __PRIVATE_DocumentWatchChange = function(t2, e5, n, r) {
    this.ar = t2, this.removedTargetIds = e5, this.key = n, this._r = r;
}, __PRIVATE_ExistenceFilterChange = function(t2, e5) {
    this.targetId = t2, this.cr = e5;
};
!function(t2) {
    t2[t2.hr = 0] = "__PRIVATE_NoChange", t2[t2.Un = 1] = "__PRIVATE_Added", t2[t2.kn = 2] = "__PRIVATE_Removed", t2[t2.lr = 3] = "__PRIVATE_Current", t2[t2.dr = 4] = "__PRIVATE_Reset";
}(__PRIVATE_WatchTargetChangeState || (__PRIVATE_WatchTargetChangeState = {
}));
var __PRIVATE_WatchTargetChange = function(t2, e5, n, r) {
    (void 0) === n && (n = __PRIVATE_emptyByteString()), (void 0) === r && (r = null), this.state = t2, this.targetIds = e5, this.resumeToken = n, this.cause = r;
}, __PRIVATE_TargetState = function() {
    function t2() {
        this.Tr = 0, this.Er = __PRIVATE_snapshotChangesMap(), this.Pr = __PRIVATE_emptyByteString(), this.Ar = !1, this.Rr = !0;
    }
    return Object.defineProperty(t2.prototype, "ir", {
        get: function() {
            return this.Ar;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "resumeToken", {
        get: function() {
            return this.Pr;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "Ir", {
        get: function() {
            return 0 !== this.Tr;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "Vr", {
        get: function() {
            return this.Rr;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.mr = function(t5) {
        t5.length > 0 && (this.Rr = !0, this.Pr = t5);
    }, t2.prototype.vr = function() {
        var t5 = __PRIVATE_documentKeySet(), e5 = __PRIVATE_documentKeySet(), n = __PRIVATE_documentKeySet();
        return this.Er.forEach(function(r, i) {
            switch(i){
                case __PRIVATE_ChangeType.Un:
                    t5 = t5.add(r);
                    break;
                case __PRIVATE_ChangeType.xn:
                    e5 = e5.add(r);
                    break;
                case __PRIVATE_ChangeType.kn:
                    n = n.add(r);
                    break;
                default:
                    fail("Encountered invalid change type: " + i);
            }
        }), new TargetChange(this.Pr, this.Ar, t5, e5, n);
    }, t2.prototype.pr = function() {
        this.Rr = !1, this.Er = __PRIVATE_snapshotChangesMap();
    }, t2.prototype.br = function(t5, e5) {
        this.Rr = !0, this.Er = this.Er.Pt(t5, e5);
    }, t2.prototype.gr = function(t5) {
        this.Rr = !0, this.Er = this.Er.remove(t5);
    }, t2.prototype.wr = function() {
        this.Tr += 1;
    }, t2.prototype.yr = function() {
        this.Tr -= 1;
    }, t2.prototype.Sr = function() {
        this.Rr = !0, this.Ar = !0;
    }, t2;
}(), __PRIVATE_LOG_TAG = "WatchChangeAggregator", __PRIVATE_WatchChangeAggregator = function() {
    function t2(t5) {
        this.Dr = t5, this.Cr = {
        }, this.Or = __PRIVATE_maybeDocumentMap(), this.Fr = __PRIVATE_documentTargetMap(), this.Nr = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator);
    }
    return t2.prototype.Mr = function(t5) {
        for(var e5 = 0, n = t5.ar; e5 < n.length; e5++){
            var r = n[e5];
            t5._r instanceof Document1 ? this.Lr(r, t5._r) : t5._r instanceof __PRIVATE_NoDocument && this.Gr(r, t5.key, t5._r);
        }
        for(var i = 0, s = t5.removedTargetIds; i < s.length; i++){
            r = s[i];
            this.Gr(r, t5.key, t5._r);
        }
    }, t2.prototype.Br = function(t5) {
        var e5 = this;
        this.Ur(t5, function(n) {
            var r = e5.kr(n);
            switch(t5.state){
                case __PRIVATE_WatchTargetChangeState.hr:
                    e5.xr(n) && r.mr(t5.resumeToken);
                    break;
                case __PRIVATE_WatchTargetChangeState.Un:
                    r.yr(), r.Ir || r.pr(), r.mr(t5.resumeToken);
                    break;
                case __PRIVATE_WatchTargetChangeState.kn:
                    r.yr(), r.Ir || e5.removeTarget(n), assert(!t5.cause, "WatchChangeAggregator does not handle errored targets");
                    break;
                case __PRIVATE_WatchTargetChangeState.lr:
                    e5.xr(n) && (r.Sr(), r.mr(t5.resumeToken));
                    break;
                case __PRIVATE_WatchTargetChangeState.dr:
                    e5.xr(n) && (e5.Kr(n), r.mr(t5.resumeToken));
                    break;
                default:
                    fail("Unknown target watch change state: " + t5.state);
            }
        });
    }, t2.prototype.Ur = function(t5, e5) {
        t5.targetIds.length > 0 ? t5.targetIds.forEach(e5) : __PRIVATE_forEachNumber(this.Cr, e5);
    }, t2.prototype.jr = function(t5) {
        var e5 = t5.targetId, n = t5.cr.count, r = this.qr(e5);
        if (r) {
            var i = r.target;
            if (i.He()) {
                if (0 === n) {
                    var s = new __PRIVATE_DocumentKey(i.path);
                    this.Gr(e5, s, new __PRIVATE_NoDocument(s, __PRIVATE_SnapshotVersion.W()));
                } else assert(1 === n, "Single document existence filter with count: " + n);
            } else this.Qr(e5) !== n && (this.Kr(e5), this.Nr = this.Nr.add(e5));
        }
    }, t2.prototype.Wr = function(t5) {
        var e5 = this, n = {
        };
        __PRIVATE_forEachNumber(this.Cr, function(r, i) {
            var s = e5.qr(r);
            if (s) {
                if (i.ir && s.target.He()) {
                    var o = new __PRIVATE_DocumentKey(s.target.path);
                    null !== e5.Or.get(o) || e5.$r(r, o) || e5.Gr(r, o, new __PRIVATE_NoDocument(o, t5));
                }
                i.Vr && (n[r] = i.vr(), i.pr());
            }
        });
        var r = __PRIVATE_documentKeySet();
        this.Fr.forEach(function(t6, n1) {
            var i = !0;
            n1.Qt(function(t7) {
                var n2 = e5.qr(t7);
                return !n2 || n2.Cn === __PRIVATE_TargetPurpose.Dn || (i = !1, !1);
            }), i && (r = r.add(t6));
        });
        var i = new __PRIVATE_RemoteEvent(t5, n, this.Nr, this.Or, r);
        return this.Or = __PRIVATE_maybeDocumentMap(), this.Fr = __PRIVATE_documentTargetMap(), this.Nr = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator), i;
    }, t2.prototype.Lr = function(t5, e5) {
        if (this.xr(t5)) {
            var n = this.$r(t5, e5.key) ? __PRIVATE_ChangeType.xn : __PRIVATE_ChangeType.Un;
            this.kr(t5).br(e5.key, n), this.Or = this.Or.Pt(e5.key, e5), this.Fr = this.Fr.Pt(e5.key, this.Yr(e5.key).add(t5));
        }
    }, t2.prototype.Gr = function(t5, e5, n) {
        if (this.xr(t5)) {
            var r = this.kr(t5);
            this.$r(t5, e5) ? r.br(e5, __PRIVATE_ChangeType.kn) : r.gr(e5), this.Fr = this.Fr.Pt(e5, this.Yr(e5).delete(t5)), n && (this.Or = this.Or.Pt(e5, n));
        }
    }, t2.prototype.removeTarget = function(t5) {
        delete this.Cr[t5];
    }, t2.prototype.Qr = function(t5) {
        var e5 = this.kr(t5).vr();
        return this.Dr.Hr(t5).size + e5.sr.size - e5.ur.size;
    }, t2.prototype.wr = function(t5) {
        this.kr(t5).wr();
    }, t2.prototype.kr = function(t5) {
        return this.Cr[t5] || (this.Cr[t5] = new __PRIVATE_TargetState), this.Cr[t5];
    }, t2.prototype.Yr = function(t5) {
        var e5 = this.Fr.get(t5);
        return e5 || (e5 = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator), this.Fr = this.Fr.Pt(t5, e5)), e5;
    }, t2.prototype.xr = function(t5) {
        var e5 = null !== this.qr(t5);
        return e5 || debug(__PRIVATE_LOG_TAG, "Detected inactive target", t5), e5;
    }, t2.prototype.qr = function(t5) {
        var e5 = this.Cr[t5];
        return e5 && e5.Ir ? null : this.Dr.Xr(t5);
    }, t2.prototype.Kr = function(t5) {
        var e5 = this;
        assert(!this.Cr[t5].Ir, "Should only reset active targets"), this.Cr[t5] = new __PRIVATE_TargetState, this.Dr.Hr(t5).forEach(function(n) {
            e5.Gr(t5, n, null);
        });
    }, t2.prototype.$r = function(t5, e5) {
        return this.Dr.Hr(t5).has(e5);
    }, t2;
}();
function __PRIVATE_documentTargetMap() {
    return new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
}
function __PRIVATE_snapshotChangesMap() {
    return new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
}
var __PRIVATE_DIRECTIONS = function() {
    var t2 = {
    };
    return t2[__PRIVATE_Direction.ASCENDING.name] = "ASCENDING", t2[__PRIVATE_Direction.DESCENDING.name] = "DESCENDING", t2;
}(), __PRIVATE_OPERATORS = function() {
    var t2 = {
    };
    return t2[__PRIVATE_Operator.LESS_THAN.name] = "LESS_THAN", t2[__PRIVATE_Operator.LESS_THAN_OR_EQUAL.name] = "LESS_THAN_OR_EQUAL", t2[__PRIVATE_Operator.GREATER_THAN.name] = "GREATER_THAN", t2[__PRIVATE_Operator.GREATER_THAN_OR_EQUAL.name] = "GREATER_THAN_OR_EQUAL", t2[__PRIVATE_Operator.EQUAL.name] = "EQUAL", t2[__PRIVATE_Operator.ARRAY_CONTAINS.name] = "ARRAY_CONTAINS", t2[__PRIVATE_Operator.IN.name] = "IN", t2[__PRIVATE_Operator.ARRAY_CONTAINS_ANY.name] = "ARRAY_CONTAINS_ANY", t2;
}(), __PRIVATE_ISO_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function __PRIVATE_assertPresent(t2, e5) {
    assert(!isNullOrUndefined(t2), e5 + " is missing");
}
function __PRIVATE_parseInt64(t2) {
    return "number" == typeof t2 ? t2 : "string" == typeof t2 ? Number(t2) : fail("can't parse " + t2);
}
var __PRIVATE_JsonProtoSerializer = function() {
    function t2(t5, e5) {
        this.o = t5, this.options = e5;
    }
    return t2.prototype.zr = function() {
        return this.options.Jr ? "" : new Uint8Array(0);
    }, t2.prototype.Zr = function(t5) {
        return t5;
    }, t2.prototype.ti = function(t5) {
        var e5 = (void 0) === t5.code ? Code.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(t5.code);
        return new FirestoreError(e5, t5.message || "");
    }, t2.prototype.ei = function(t5) {
        return this.options.Jr || isNullOrUndefined(t5) ? t5 : {
            value: t5
        };
    }, t2.prototype.ni = function(t5) {
        var e5;
        return isNullOrUndefined(e5 = "object" == typeof t5 ? t5.value : t5) ? null : e5;
    }, t2.prototype.Y = function(t5) {
        return this.options.Jr ? new Date(1000 * t5.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + t5.nanoseconds).slice(-9) + "Z" : {
            seconds: "" + t5.seconds,
            nanos: t5.nanoseconds
        };
    }, t2.prototype.q = function(t5) {
        if ("string" == typeof t5) return this.ri(t5);
        assert(!!t5, "Cannot deserialize null or undefined timestamp.");
        var e5 = __PRIVATE_parseInt64(t5.seconds || "0"), n = t5.nanos || 0;
        return new Timestamp(e5, n);
    }, t2.prototype.ri = function(t5) {
        var e5 = 0, n = __PRIVATE_ISO_REG_EXP.exec(t5);
        if (assert(!!n, "invalid timestamp: " + t5), n[1]) {
            var r = n[1];
            r = (r + "000000000").substr(0, 9), e5 = Number(r);
        }
        var i = new Date(t5), s = Math.floor(i.getTime() / 1000);
        return new Timestamp(s, e5);
    }, t2.prototype.ii = function(t5) {
        return this.options.Jr ? t5.toBase64() : this.Zr(t5.toUint8Array());
    }, t2.prototype.si = function(t5) {
        return "string" == typeof t5 ? (assert(this.options.Jr, "Expected bytes to be passed in as Uint8Array, but got a string instead."), Blob1.fromBase64String(t5)) : (assert(!this.options.Jr, "Expected bytes to be passed in as Uint8Array, but got a string instead."), Blob1.fromUint8Array(t5));
    }, t2.prototype.toVersion = function(t5) {
        return this.Y(t5.Y());
    }, t2.prototype.fromVersion = function(t5) {
        return assert(!!t5, "Trying to deserialize version that isn't set"), __PRIVATE_SnapshotVersion.q(this.q(t5));
    }, t2.prototype.oi = function(t5, e5) {
        return this.ui(t5).child("documents").child(e5).ot();
    }, t2.prototype.ai = function(t5) {
        var e5 = ResourcePath.ut(t5);
        return assert(this._i(e5), "Tried to deserialize invalid key " + e5.toString()), e5;
    }, t2.prototype.ci = function(t5) {
        return this.oi(this.o, t5.path);
    }, t2.prototype.hi = function(t5) {
        var e5 = this.ai(t5);
        return assert(e5.get(1) === this.o.projectId, "Tried to deserialize key from different project: " + e5.get(1) + " vs " + this.o.projectId), assert(!e5.get(3) && !this.o.database || e5.get(3) === this.o.database, "Tried to deserialize key from different database: " + e5.get(3) + " vs " + this.o.database), new __PRIVATE_DocumentKey(this.fi(e5));
    }, t2.prototype.li = function(t5) {
        return this.oi(this.o, t5);
    }, t2.prototype.di = function(t5) {
        var e5 = this.ai(t5);
        return 4 === e5.length ? ResourcePath.at : this.fi(e5);
    }, Object.defineProperty(t2.prototype, "Ti", {
        get: function() {
            return new ResourcePath([
                "projects",
                this.o.projectId,
                "databases",
                this.o.database
            ]).ot();
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.ui = function(t5) {
        return new ResourcePath([
            "projects",
            t5.projectId,
            "databases",
            t5.database
        ]);
    }, t2.prototype.fi = function(t5) {
        return assert(t5.length > 4 && "documents" === t5.get(4), "tried to deserialize invalid key " + t5.toString()), t5.J(5);
    }, t2.prototype._i = function(t5) {
        return t5.length >= 4 && "projects" === t5.get(0) && "databases" === t5.get(2);
    }, t2.prototype.Ei = function(t5) {
        if (t5 instanceof __PRIVATE_NullValue) return {
            nullValue: "NULL_VALUE"
        };
        if (t5 instanceof __PRIVATE_BooleanValue) return {
            booleanValue: t5.value()
        };
        if (t5 instanceof __PRIVATE_IntegerValue) return {
            integerValue: "" + t5.value()
        };
        if (t5 instanceof __PRIVATE_DoubleValue) {
            var e5 = t5.value();
            if (this.options.Jr) {
                if (isNaN(e5)) return {
                    doubleValue: "NaN"
                };
                if (e5 === 1 / 0) return {
                    doubleValue: "Infinity"
                };
                if (e5 === -1 / 0) return {
                    doubleValue: "-Infinity"
                };
            }
            return {
                doubleValue: t5.value()
            };
        }
        return t5 instanceof __PRIVATE_StringValue ? {
            stringValue: t5.value()
        } : t5 instanceof __PRIVATE_ObjectValue ? {
            mapValue: this.Pi(t5)
        } : t5 instanceof ArrayValue ? {
            arrayValue: this.Ai(t5)
        } : t5 instanceof __PRIVATE_TimestampValue ? {
            timestampValue: this.Y(t5.Zt)
        } : t5 instanceof __PRIVATE_GeoPointValue ? {
            geoPointValue: {
                latitude: t5.value().latitude,
                longitude: t5.value().longitude
            }
        } : t5 instanceof __PRIVATE_BlobValue ? {
            bytesValue: this.ii(t5.value())
        } : t5 instanceof __PRIVATE_RefValue ? {
            referenceValue: this.oi(t5.o, t5.key.path)
        } : fail("Unknown FieldValue " + JSON.stringify(t5));
    }, t2.prototype.Ri = function(t5) {
        var e6 = this;
        if ("nullValue" in t5) return __PRIVATE_NullValue.Le;
        if ("booleanValue" in t5) return __PRIVATE_BooleanValue.of(t5.booleanValue);
        if ("integerValue" in t5) return new __PRIVATE_IntegerValue(__PRIVATE_parseInt64(t5.integerValue));
        if ("doubleValue" in t5) {
            if (this.options.Jr) {
                if ("NaN" === t5.doubleValue) return __PRIVATE_DoubleValue.Ue;
                if ("Infinity" === t5.doubleValue) return __PRIVATE_DoubleValue.POSITIVE_INFINITY;
                if ("-Infinity" === t5.doubleValue) return __PRIVATE_DoubleValue.NEGATIVE_INFINITY;
            }
            return new __PRIVATE_DoubleValue(t5.doubleValue);
        }
        if ("stringValue" in t5) return new __PRIVATE_StringValue(t5.stringValue);
        if ("mapValue" in t5) return this.Ii(t5.mapValue.fields || {
        });
        if ("arrayValue" in t5) {
            __PRIVATE_assertPresent(t5.arrayValue, "arrayValue");
            var n = t5.arrayValue.values || [];
            return new ArrayValue(n.map(function(t6) {
                return e6.Ri(t6);
            }));
        }
        if ("timestampValue" in t5) return __PRIVATE_assertPresent(t5.timestampValue, "timestampValue"), new __PRIVATE_TimestampValue(this.q(t5.timestampValue));
        if ("geoPointValue" in t5) {
            __PRIVATE_assertPresent(t5.geoPointValue, "geoPointValue");
            var r = t5.geoPointValue.latitude || 0, i = t5.geoPointValue.longitude || 0;
            return new __PRIVATE_GeoPointValue(new GeoPoint(r, i));
        }
        if ("bytesValue" in t5) {
            __PRIVATE_assertPresent(t5.bytesValue, "bytesValue");
            var s = this.si(t5.bytesValue);
            return new __PRIVATE_BlobValue(s);
        }
        if ("referenceValue" in t5) {
            __PRIVATE_assertPresent(t5.referenceValue, "referenceValue");
            var o = this.ai(t5.referenceValue), u = new __PRIVATE_DatabaseId(o.get(1), o.get(3)), a = new __PRIVATE_DocumentKey(this.fi(o));
            return new __PRIVATE_RefValue(u, a);
        }
        return fail("Unknown Value proto " + JSON.stringify(t5));
    }, t2.prototype.Vi = function(t5, e6) {
        return {
            name: this.ci(t5),
            fields: this.mi(e6)
        };
    }, t2.prototype.vi = function(t5) {
        return assert(!t5.ce, "Can't serialize documents with mutations."), {
            name: this.ci(t5.key),
            fields: this.mi(t5.data()),
            updateTime: this.Y(t5.version.Y())
        };
    }, t2.prototype.pi = function(t5, e6) {
        var n = this, r = this.hi(t5.name), i = this.fromVersion(t5.updateTime);
        return new Document1(r, i, {
            hasCommittedMutations: !!e6
        }, void 0, t5, function(t6) {
            return n.Ri(t6);
        });
    }, t2.prototype.mi = function(t5) {
        var e6 = this, n = {
        };
        return t5.forEach(function(t6, r) {
            n[t6] = e6.Ei(r);
        }), n;
    }, t2.prototype.Ii = function(t5) {
        var e6 = this, n = t5, r = __PRIVATE_ObjectValue.EMPTY;
        return forEach(n, function(t6, n1) {
            r = r.set(new FieldPath([
                t6
            ]), e6.Ri(n1));
        }), r;
    }, t2.prototype.Pi = function(t5) {
        return {
            fields: this.mi(t5)
        };
    }, t2.prototype.Ai = function(t5) {
        var e6 = this, n = [];
        return t5.forEach(function(t6) {
            n.push(e6.Ei(t6));
        }), {
            values: n
        };
    }, t2.prototype.bi = function(t5) {
        var e6 = this;
        assert(!!t5.found, "Tried to deserialize a found document from a missing document."), __PRIVATE_assertPresent(t5.found.name, "doc.found.name"), __PRIVATE_assertPresent(t5.found.updateTime, "doc.found.updateTime");
        var n = this.hi(t5.found.name), r = this.fromVersion(t5.found.updateTime);
        return new Document1(n, r, {
        }, void 0, t5.found, function(t6) {
            return e6.Ri(t6);
        });
    }, t2.prototype.gi = function(t5) {
        assert(!!t5.missing, "Tried to deserialize a missing document from a found document."), assert(!!t5.readTime, "Tried to deserialize a missing document without a read time.");
        var e6 = this.hi(t5.missing), n = this.fromVersion(t5.readTime);
        return new __PRIVATE_NoDocument(e6, n);
    }, t2.prototype.wi = function(t5) {
        return "found" in t5 ? this.bi(t5) : "missing" in t5 ? this.gi(t5) : fail("invalid batch get response: " + JSON.stringify(t5));
    }, t2.prototype.yi = function(t5) {
        switch(t5){
            case __PRIVATE_WatchTargetChangeState.Un:
                return "ADD";
            case __PRIVATE_WatchTargetChangeState.lr:
                return "CURRENT";
            case __PRIVATE_WatchTargetChangeState.hr:
                return "NO_CHANGE";
            case __PRIVATE_WatchTargetChangeState.kn:
                return "REMOVE";
            case __PRIVATE_WatchTargetChangeState.dr:
                return "RESET";
            default:
                return fail("Unknown WatchTargetChangeState: " + t5);
        }
    }, t2.prototype.Si = function(t5) {
        if (t5 instanceof __PRIVATE_ExistenceFilterChange) return {
            filter: {
                count: t5.cr.count,
                targetId: t5.targetId
            }
        };
        if (t5 instanceof __PRIVATE_DocumentWatchChange) {
            if (t5._r instanceof Document1) {
                var e6 = t5._r;
                return {
                    documentChange: {
                        document: {
                            name: this.ci(e6.key),
                            fields: this.mi(e6.data()),
                            updateTime: this.toVersion(e6.version)
                        },
                        targetIds: t5.ar,
                        removedTargetIds: t5.removedTargetIds
                    }
                };
            }
            if (t5._r instanceof __PRIVATE_NoDocument) {
                e6 = t5._r;
                return {
                    documentDelete: {
                        document: this.ci(e6.key),
                        readTime: this.toVersion(e6.version),
                        removedTargetIds: t5.removedTargetIds
                    }
                };
            }
            if (null === t5._r) return {
                documentRemove: {
                    document: this.ci(t5.key),
                    removedTargetIds: t5.removedTargetIds
                }
            };
        }
        if (t5 instanceof __PRIVATE_WatchTargetChange) {
            var n = void 0;
            return t5.cause && (n = {
                code: __PRIVATE_mapRpcCodeFromCode(t5.cause.code),
                message: t5.cause.message
            }), {
                targetChange: {
                    targetChangeType: this.yi(t5.state),
                    targetIds: t5.targetIds,
                    resumeToken: this.Zr(t5.resumeToken),
                    cause: n
                }
            };
        }
        return fail("Unrecognized watch change: " + JSON.stringify(t5));
    }, t2.prototype.Di = function(t5) {
        var e7, n = this;
        if ("targetChange" in t5) {
            __PRIVATE_assertPresent(t5.targetChange, "targetChange");
            var r = this.Ci(t5.targetChange.targetChangeType || "NO_CHANGE"), i = t5.targetChange.targetIds || [], s = t5.targetChange.resumeToken || this.zr(), o = t5.targetChange.cause, u = o && this.ti(o);
            e7 = new __PRIVATE_WatchTargetChange(r, i, s, u || null);
        } else if ("documentChange" in t5) {
            __PRIVATE_assertPresent(t5.documentChange, "documentChange");
            var a = t5.documentChange;
            __PRIVATE_assertPresent(a.document, "documentChange.name"), __PRIVATE_assertPresent(a.document.name, "documentChange.document.name"), __PRIVATE_assertPresent(a.document.updateTime, "documentChange.document.updateTime");
            var _ = this.hi(a.document.name), c = this.fromVersion(a.document.updateTime), h = new Document1(_, c, {
            }, void 0, a.document, function(t6) {
                return n.Ri(t6);
            }), f = a.targetIds || [], l = a.removedTargetIds || [];
            e7 = new __PRIVATE_DocumentWatchChange(f, l, h.key, h);
        } else if ("documentDelete" in t5) {
            __PRIVATE_assertPresent(t5.documentDelete, "documentDelete");
            var d = t5.documentDelete;
            __PRIVATE_assertPresent(d.document, "documentDelete.document");
            _ = this.hi(d.document), c = d.readTime ? this.fromVersion(d.readTime) : __PRIVATE_SnapshotVersion.W(), h = new __PRIVATE_NoDocument(_, c), l = d.removedTargetIds || [];
            e7 = new __PRIVATE_DocumentWatchChange([], l, h.key, h);
        } else if ("documentRemove" in t5) {
            __PRIVATE_assertPresent(t5.documentRemove, "documentRemove");
            var T = t5.documentRemove;
            __PRIVATE_assertPresent(T.document, "documentRemove");
            _ = this.hi(T.document), l = T.removedTargetIds || [];
            e7 = new __PRIVATE_DocumentWatchChange([], l, _, null);
        } else {
            if (!("filter" in t5)) return fail("Unknown change type " + JSON.stringify(t5));
            __PRIVATE_assertPresent(t5.filter, "filter");
            var E = t5.filter;
            __PRIVATE_assertPresent(E.targetId, "filter.targetId");
            var P = E.count || 0, A = new ExistenceFilter(P), R = E.targetId;
            e7 = new __PRIVATE_ExistenceFilterChange(R, A);
        }
        return e7;
    }, t2.prototype.Ci = function(t5) {
        return "NO_CHANGE" === t5 ? __PRIVATE_WatchTargetChangeState.hr : "ADD" === t5 ? __PRIVATE_WatchTargetChangeState.Un : "REMOVE" === t5 ? __PRIVATE_WatchTargetChangeState.kn : "CURRENT" === t5 ? __PRIVATE_WatchTargetChangeState.lr : "RESET" === t5 ? __PRIVATE_WatchTargetChangeState.dr : fail("Got unexpected TargetChange.state: " + t5);
    }, t2.prototype.Oi = function(t5) {
        if (!("targetChange" in t5)) return __PRIVATE_SnapshotVersion.MIN;
        var e7 = t5.targetChange;
        return e7.targetIds && e7.targetIds.length ? __PRIVATE_SnapshotVersion.MIN : e7.readTime ? this.fromVersion(e7.readTime) : __PRIVATE_SnapshotVersion.MIN;
    }, t2.prototype.Fi = function(t5) {
        var e7, n = this;
        if (t5 instanceof __PRIVATE_SetMutation) e7 = {
            update: this.Vi(t5.key, t5.value)
        };
        else if (t5 instanceof __PRIVATE_DeleteMutation) e7 = {
            delete: this.ci(t5.key)
        };
        else if (t5 instanceof __PRIVATE_PatchMutation) e7 = {
            update: this.Vi(t5.key, t5.data),
            updateMask: this.Ni(t5.fe)
        };
        else if (t5 instanceof __PRIVATE_TransformMutation) e7 = {
            transform: {
                document: this.ci(t5.key),
                fieldTransforms: t5.fieldTransforms.map(function(t6) {
                    return n.Mi(t6);
                })
            }
        };
        else {
            if (!(t5 instanceof __PRIVATE_VerifyMutation)) return fail("Unknown mutation type " + t5.type);
            e7 = {
                verify: this.ci(t5.key)
            };
        }
        return t5._e.se || (e7.currentDocument = this.Li(t5._e)), e7;
    }, t2.prototype.Gi = function(t5) {
        var e7 = this, n = t5.currentDocument ? this.Bi(t5.currentDocument) : Precondition.NONE;
        if (t5.update) {
            __PRIVATE_assertPresent(t5.update.name, "name");
            var r = this.hi(t5.update.name), i = this.Ii(t5.update.fields || {
            });
            if (t5.updateMask) {
                var s = this.Ui(t5.updateMask);
                return new __PRIVATE_PatchMutation(r, i, s, n);
            }
            return new __PRIVATE_SetMutation(r, i, n);
        }
        if (t5.delete) {
            r = this.hi(t5.delete);
            return new __PRIVATE_DeleteMutation(r, n);
        }
        if (t5.transform) {
            r = this.hi(t5.transform.document);
            var o = t5.transform.fieldTransforms.map(function(t6) {
                return e7.ki(t6);
            });
            return assert(!0 === n.exists, 'Transforms only support precondition "exists == true"'), new __PRIVATE_TransformMutation(r, o);
        }
        if (t5.verify) {
            r = this.hi(t5.verify);
            return new __PRIVATE_VerifyMutation(r, n);
        }
        return fail("unknown mutation proto: " + JSON.stringify(t5));
    }, t2.prototype.Li = function(t5) {
        return assert(!t5.se, "Can't serialize an empty precondition"), (void 0) !== t5.updateTime ? {
            updateTime: this.toVersion(t5.updateTime)
        } : (void 0) !== t5.exists ? {
            exists: t5.exists
        } : fail("Unknown precondition");
    }, t2.prototype.Bi = function(t5) {
        return (void 0) !== t5.updateTime ? Precondition.updateTime(this.fromVersion(t5.updateTime)) : (void 0) !== t5.exists ? Precondition.exists(t5.exists) : Precondition.NONE;
    }, t2.prototype.xi = function(t5, e7) {
        var n = this, r = t5.updateTime ? this.fromVersion(t5.updateTime) : this.fromVersion(e7);
        r.isEqual(__PRIVATE_SnapshotVersion.MIN) && (r = this.fromVersion(e7));
        var i = null;
        return t5.transformResults && t5.transformResults.length > 0 && (i = t5.transformResults.map(function(t6) {
            return n.Ri(t6);
        })), new __PRIVATE_MutationResult(r, i);
    }, t2.prototype.Ki = function(t5, e7) {
        var n = this;
        return t5 && t5.length > 0 ? (assert((void 0) !== e7, "Received a write result without a commit time"), t5.map(function(t6) {
            return n.xi(t6, e7);
        })) : [];
    }, t2.prototype.Mi = function(t5) {
        var e7 = this, n = t5.transform;
        if (n instanceof __PRIVATE_ServerTimestampTransform) return {
            fieldPath: t5.field.ot(),
            setToServerValue: "REQUEST_TIME"
        };
        if (n instanceof __PRIVATE_ArrayUnionTransformOperation) return {
            fieldPath: t5.field.ot(),
            appendMissingElements: {
                values: n.elements.map(function(t6) {
                    return e7.Ei(t6);
                })
            }
        };
        if (n instanceof __PRIVATE_ArrayRemoveTransformOperation) return {
            fieldPath: t5.field.ot(),
            removeAllFromArray: {
                values: n.elements.map(function(t6) {
                    return e7.Ei(t6);
                })
            }
        };
        if (n instanceof __PRIVATE_NumericIncrementTransformOperation) return {
            fieldPath: t5.field.ot(),
            increment: this.Ei(n.Jt)
        };
        throw fail("Unknown transform: " + t5.transform);
    }, t2.prototype.ki = function(t5) {
        var e7 = this, n = null;
        if ("setToServerValue" in t5) assert("REQUEST_TIME" === t5.setToServerValue, "Unknown server value transform proto: " + JSON.stringify(t5)), n = __PRIVATE_ServerTimestampTransform.instance;
        else if ("appendMissingElements" in t5) {
            var r = t5.appendMissingElements.values || [];
            n = new __PRIVATE_ArrayUnionTransformOperation(r.map(function(t6) {
                return e7.Ri(t6);
            }));
        } else if ("removeAllFromArray" in t5) {
            r = t5.removeAllFromArray.values || [];
            n = new __PRIVATE_ArrayRemoveTransformOperation(r.map(function(t6) {
                return e7.Ri(t6);
            }));
        } else if ("increment" in t5) {
            var i = this.Ri(t5.increment);
            assert(i instanceof __PRIVATE_NumberValue, "NUMERIC_ADD transform requires a NumberValue"), n = new __PRIVATE_NumericIncrementTransformOperation(i);
        } else fail("Unknown transform proto: " + JSON.stringify(t5));
        var s = FieldPath.ft(t5.fieldPath);
        return new FieldTransform(s, n);
    }, t2.prototype.ji = function(t5) {
        return {
            documents: [
                this.li(t5.path)
            ]
        };
    }, t2.prototype.qi = function(t5) {
        var e7 = t5.documents.length;
        assert(1 === e7, "DocumentsTarget contained other than 1 document: " + e7);
        var n = t5.documents[0];
        return Query.rn(this.di(n)).Tn();
    }, t2.prototype.Qi = function(t5) {
        var e7 = {
            structuredQuery: {
            }
        }, n = t5.path;
        null !== t5.collectionGroup ? (assert(n.length % 2 == 0, "Collection Group queries should be within a document path or root."), e7.parent = this.li(n), e7.structuredQuery.from = [
            {
                collectionId: t5.collectionGroup,
                allDescendants: !0
            }
        ]) : (assert(n.length % 2 != 0, "Document queries with filters are not supported."), e7.parent = this.li(n.Z()), e7.structuredQuery.from = [
            {
                collectionId: n.nt()
            }
        ]);
        var r = this.Wi(t5.filters);
        r && (e7.structuredQuery.where = r);
        var i = this.$i(t5.orderBy);
        i && (e7.structuredQuery.orderBy = i);
        var s = this.ei(t5.limit);
        return null !== s && (e7.structuredQuery.limit = s), t5.startAt && (e7.structuredQuery.startAt = this.Yi(t5.startAt)), t5.endAt && (e7.structuredQuery.endAt = this.Yi(t5.endAt)), e7;
    }, t2.prototype.Hi = function(t5) {
        var e7 = this.di(t5.parent), n = t5.structuredQuery, r = n.from ? n.from.length : 0, i = null;
        if (r > 0) {
            assert(1 === r, "StructuredQuery.from with more than one collection is not supported.");
            var s = n.from[0];
            s.allDescendants ? i = s.collectionId : e7 = e7.child(s.collectionId);
        }
        var o = [];
        n.where && (o = this.Xi(n.where));
        var u = [];
        n.orderBy && (u = this.zi(n.orderBy));
        var a = null;
        n.limit && (a = this.ni(n.limit));
        var _ = null;
        n.startAt && (_ = this.Ji(n.startAt));
        var c = null;
        return n.endAt && (c = this.Ji(n.endAt)), new Query(e7, i, u, o, a, __PRIVATE_LimitType.Xe, _, c).Tn();
    }, t2.prototype.Zi = function(t5) {
        var e7 = this.ts(t5.Cn);
        return null == e7 ? null : {
            "goog-listen-tags": e7
        };
    }, t2.prototype.ts = function(t5) {
        switch(t5){
            case __PRIVATE_TargetPurpose.yn:
                return null;
            case __PRIVATE_TargetPurpose.Sn:
                return "existence-filter-mismatch";
            case __PRIVATE_TargetPurpose.Dn:
                return "limbo-document";
            default:
                return fail("Unrecognized query purpose: " + t5);
        }
    }, t2.prototype.Tn = function(t5) {
        var e7, n = t5.target;
        return (e7 = n.He() ? {
            documents: this.ji(n)
        } : {
            query: this.Qi(n)
        }).targetId = t5.targetId, t5.resumeToken.length > 0 && (e7.resumeToken = this.Zr(t5.resumeToken)), e7;
    }, t2.prototype.Wi = function(t5) {
        var e7 = this;
        if (0 !== t5.length) {
            var n = t5.map(function(t6) {
                return t6 instanceof FieldFilter ? e7.es(t6) : fail("Unrecognized filter: " + JSON.stringify(t6));
            });
            return 1 === n.length ? n[0] : {
                compositeFilter: {
                    op: "AND",
                    filters: n
                }
            };
        }
    }, t2.prototype.Xi = function(t5) {
        var e7 = this;
        return t5 ? (void 0) !== t5.unaryFilter ? [
            this.ns(t5)
        ] : (void 0) !== t5.fieldFilter ? [
            this.rs(t5)
        ] : (void 0) !== t5.compositeFilter ? t5.compositeFilter.filters.map(function(t6) {
            return e7.Xi(t6);
        }).reduce(function(t6, e8) {
            return t6.concat(e8);
        }) : fail("Unknown filter: " + JSON.stringify(t5)) : [];
    }, t2.prototype.$i = function(t5) {
        var e7 = this;
        if (0 !== t5.length) return t5.map(function(t6) {
            return e7.ss(t6);
        });
    }, t2.prototype.zi = function(t5) {
        var e7 = this;
        return t5.map(function(t6) {
            return e7.os(t6);
        });
    }, t2.prototype.Yi = function(t5) {
        var e7 = this;
        return {
            before: t5.before,
            values: t5.position.map(function(t6) {
                return e7.Ei(t6);
            })
        };
    }, t2.prototype.Ji = function(t5) {
        var e7 = this, n = !!t5.before, r = t5.values.map(function(t6) {
            return e7.Ri(t6);
        });
        return new __PRIVATE_Bound(r, n);
    }, t2.prototype.us = function(t5) {
        return __PRIVATE_DIRECTIONS[t5.name];
    }, t2.prototype.as = function(t5) {
        switch(t5){
            case "ASCENDING":
                return __PRIVATE_Direction.ASCENDING;
            case "DESCENDING":
                return __PRIVATE_Direction.DESCENDING;
            default:
                return;
        }
    }, t2.prototype._s = function(t5) {
        return __PRIVATE_OPERATORS[t5.name];
    }, t2.prototype.cs = function(t5) {
        switch(t5){
            case "EQUAL":
                return __PRIVATE_Operator.EQUAL;
            case "GREATER_THAN":
                return __PRIVATE_Operator.GREATER_THAN;
            case "GREATER_THAN_OR_EQUAL":
                return __PRIVATE_Operator.GREATER_THAN_OR_EQUAL;
            case "LESS_THAN":
                return __PRIVATE_Operator.LESS_THAN;
            case "LESS_THAN_OR_EQUAL":
                return __PRIVATE_Operator.LESS_THAN_OR_EQUAL;
            case "ARRAY_CONTAINS":
                return __PRIVATE_Operator.ARRAY_CONTAINS;
            case "IN":
                return __PRIVATE_Operator.IN;
            case "ARRAY_CONTAINS_ANY":
                return __PRIVATE_Operator.ARRAY_CONTAINS_ANY;
            case "OPERATOR_UNSPECIFIED":
                return fail("Unspecified operator");
            default:
                return fail("Unknown operator");
        }
    }, t2.prototype.hs = function(t5) {
        return {
            fieldPath: t5.ot()
        };
    }, t2.prototype.fs = function(t5) {
        return FieldPath.ft(t5.fieldPath);
    }, t2.prototype.ss = function(t5) {
        return {
            field: this.hs(t5.field),
            direction: this.us(t5.dir)
        };
    }, t2.prototype.os = function(t5) {
        return new __PRIVATE_OrderBy(this.fs(t5.field), this.as(t5.direction));
    }, t2.prototype.rs = function(t5) {
        return FieldFilter.create(this.fs(t5.fieldFilter.field), this.cs(t5.fieldFilter.op), this.Ri(t5.fieldFilter.value));
    }, t2.prototype.es = function(t5) {
        if (t5.op === __PRIVATE_Operator.EQUAL) {
            if (t5.value.isEqual(__PRIVATE_DoubleValue.Ue)) return {
                unaryFilter: {
                    field: this.hs(t5.field),
                    op: "IS_NAN"
                }
            };
            if (t5.value.isEqual(__PRIVATE_NullValue.Le)) return {
                unaryFilter: {
                    field: this.hs(t5.field),
                    op: "IS_NULL"
                }
            };
        }
        return {
            fieldFilter: {
                field: this.hs(t5.field),
                op: this._s(t5.op),
                value: this.Ei(t5.value)
            }
        };
    }, t2.prototype.ns = function(t5) {
        switch(t5.unaryFilter.op){
            case "IS_NAN":
                var e7 = this.fs(t5.unaryFilter.field);
                return FieldFilter.create(e7, __PRIVATE_Operator.EQUAL, __PRIVATE_DoubleValue.Ue);
            case "IS_NULL":
                var n = this.fs(t5.unaryFilter.field);
                return FieldFilter.create(n, __PRIVATE_Operator.EQUAL, __PRIVATE_NullValue.Le);
            case "OPERATOR_UNSPECIFIED":
                return fail("Unspecified filter");
            default:
                return fail("Unknown filter");
        }
    }, t2.prototype.Ni = function(t5) {
        var e7 = [];
        return t5.fields.forEach(function(t6) {
            return e7.push(t6.ot());
        }), {
            fieldPaths: e7
        };
    }, t2.prototype.Ui = function(t5) {
        var e7 = (t5.fieldPaths || []).map(function(t6) {
            return FieldPath.ft(t6);
        });
        return __PRIVATE_FieldMask.ee(e7);
    }, t2;
}(), __PRIVATE_PlatformSupport = function() {
    function t2() {
    }
    return t2.ls = function(e7) {
        t2.platform && fail("Platform already defined"), t2.platform = e7;
    }, t2.t = function() {
        return t2.platform || fail("Platform not set"), t2.platform;
    }, t2;
}();
function __PRIVATE_emptyByteString() {
    return __PRIVATE_PlatformSupport.t().zr;
}
function __PRIVATE_makeConstructorPrivate(t2, e7) {
    function n() {
        var t5 = "This constructor is private.";
        throw e7 && (t5 += " ", t5 += e7), new FirestoreError(Code.INVALID_ARGUMENT, t5);
    }
    for(var r in n.prototype = t2.prototype, t2)t2.hasOwnProperty(r) && (n[r] = t2[r]);
    return n;
}
function __PRIVATE_assertUint8ArrayAvailable() {
    if ("undefined" == typeof Uint8Array) throw new FirestoreError(Code.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}
function __PRIVATE_assertBase64Available() {
    if (!__PRIVATE_PlatformSupport.t().ds) throw new FirestoreError(Code.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}
var __PRIVATE_TimerId, Blob1 = function() {
    function t2(t5) {
        __PRIVATE_assertBase64Available(), this.Ts = t5;
    }
    return t2.fromBase64String = function(e7) {
        __PRIVATE_validateExactNumberOfArgs("Blob.fromBase64String", arguments, 1), __PRIVATE_validateArgType("Blob.fromBase64String", "string", 1, e7), __PRIVATE_assertBase64Available();
        try {
            var n = __PRIVATE_PlatformSupport.t().atob(e7);
            return new t2(n);
        } catch (t5) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Failed to construct Blob from Base64 string: " + t5);
        }
    }, t2.fromUint8Array = function(e7) {
        if (__PRIVATE_validateExactNumberOfArgs("Blob.fromUint8Array", arguments, 1), __PRIVATE_assertUint8ArrayAvailable(), !(e7 instanceof Uint8Array)) throw __PRIVATE_invalidClassError("Blob.fromUint8Array", "Uint8Array", 1, e7);
        var n = Array.prototype.map.call(e7, function(t5) {
            return String.fromCharCode(t5);
        }).join("");
        return new t2(n);
    }, t2.prototype.toBase64 = function() {
        return __PRIVATE_validateExactNumberOfArgs("Blob.toBase64", arguments, 0), __PRIVATE_assertBase64Available(), __PRIVATE_PlatformSupport.t().btoa(this.Ts);
    }, t2.prototype.toUint8Array = function() {
        __PRIVATE_validateExactNumberOfArgs("Blob.toUint8Array", arguments, 0), __PRIVATE_assertUint8ArrayAvailable();
        for(var t5 = new Uint8Array(this.Ts.length), e7 = 0; e7 < this.Ts.length; e7++)t5[e7] = this.Ts.charCodeAt(e7);
        return t5;
    }, t2.prototype.toString = function() {
        return "Blob(base64: " + this.toBase64() + ")";
    }, t2.prototype.isEqual = function(t5) {
        return this.Ts === t5.Ts;
    }, t2.prototype.xe = function() {
        return 2 * this.Ts.length;
    }, t2.prototype.K = function(t5) {
        return __PRIVATE_primitiveComparator(this.Ts, t5.Ts);
    }, t2;
}(), __PRIVATE_PublicBlob = __PRIVATE_makeConstructorPrivate(Blob1, "Use Blob.fromUint8Array() or Blob.fromBase64String() instead."), __PRIVATE_ListenSequence = function() {
    function t2(t5, e7) {
        var n = this;
        this.previousValue = t5, e7 && (e7.Es = function(t6) {
            return n.Ps(t6);
        }, this.As = function(t6) {
            return e7.Rs(t6);
        });
    }
    return t2.prototype.Ps = function(t5) {
        return this.previousValue = Math.max(t5, this.previousValue), this.previousValue;
    }, t2.prototype.next = function() {
        var t5 = ++this.previousValue;
        return this.As && this.As(t5), t5;
    }, t2.Is = -1, t2;
}(), __PRIVATE_Deferred = function() {
    var t2 = this;
    this.promise = new Promise(function(e7, n) {
        t2.resolve = e7, t2.reject = n;
    });
};
!function(t2) {
    t2.Vs = "all", t2.ms = "listen_stream_idle", t2.vs = "listen_stream_connection_backoff", t2.ps = "write_stream_idle", t2.bs = "write_stream_connection_backoff", t2.gs = "online_state_timeout", t2.ws = "client_metadata_refresh", t2.ys = "lru_garbage_collection", t2.Ss = "retry_transaction";
}(__PRIVATE_TimerId || (__PRIVATE_TimerId = {
}));
var __PRIVATE_DelayedOperation = function() {
    function t2(t5, e7, n, r, i) {
        this.Ds = t5, this.Cs = e7, this.Os = n, this.op = r, this.Fs = i, this.Ns = new __PRIVATE_Deferred, this.then = this.Ns.promise.then.bind(this.Ns.promise), this.catch = this.Ns.promise.catch.bind(this.Ns.promise), this.Ns.promise.catch(function(t6) {
        });
    }
    return t2.Ms = function(e7, n, r, i, s) {
        var o = new t2(e7, n, Date.now() + r, i, s);
        return o.start(r), o;
    }, t2.prototype.start = function(t5) {
        var e7 = this;
        this.Ls = setTimeout(function() {
            return e7.Gs();
        }, t5);
    }, t2.prototype.Bs = function() {
        return this.Gs();
    }, t2.prototype.cancel = function(t5) {
        null !== this.Ls && (this.clearTimeout(), this.Ns.reject(new FirestoreError(Code.CANCELLED, "Operation cancelled" + (t5 ? ": " + t5 : ""))));
    }, t2.prototype.Gs = function() {
        var t5 = this;
        this.Ds.Us(function() {
            return null !== t5.Ls ? (t5.clearTimeout(), t5.op().then(function(e7) {
                return t5.Ns.resolve(e7);
            })) : Promise.resolve();
        });
    }, t2.prototype.clearTimeout = function() {
        null !== this.Ls && (this.Fs(this), clearTimeout(this.Ls), this.Ls = null);
    }, t2;
}(), __PRIVATE_AsyncQueue = function() {
    function t2() {
        this.ks = Promise.resolve(), this.xs = !1, this.Ks = [], this.js = null, this.qs = !1, this.Qs = [];
    }
    return Object.defineProperty(t2.prototype, "Ws", {
        get: function() {
            return this.xs;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.Us = function(t5) {
        this.enqueue(t5);
    }, t2.prototype.$s = function(t5) {
        this.Ys(), this.Hs(t5);
    }, t2.prototype.Xs = function(t5) {
        return this.Ys(), this.Hs(t5);
    }, t2.prototype.zs = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(e7) {
                switch(e7.label){
                    case 0:
                        return this.Ys(), this.xs ? [
                            3,
                            2
                        ] : (this.xs = !0, [
                            4,
                            this.Xs(t5)
                        ]);
                    case 1:
                        e7.sent(), e7.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.enqueue = function(t5) {
        return this.Ys(), this.xs ? new Promise(function(t6) {
        }) : this.Hs(t5);
    }, t2.prototype.Hs = function(t5) {
        var e7 = this, n = this.ks.then(function() {
            return e7.qs = !0, t5().catch(function(t6) {
                e7.js = t6, e7.qs = !1;
                var n1 = t6.stack || t6.message || "";
                throw error("INTERNAL UNHANDLED ERROR: ", n1), n1.indexOf("Firestore Test Simulated Error") < 0 && setTimeout(function() {
                    throw t6;
                }, 0), t6;
            }).then(function(t6) {
                return e7.qs = !1, t6;
            });
        });
        return this.ks = n, n;
    }, t2.prototype.Js = function(t5, e7, n) {
        var r = this;
        this.Ys(), assert(e7 >= 0, "Attempted to schedule an operation with a negative delay of " + e7), this.Qs.indexOf(t5) > -1 && (e7 = 0);
        var i = __PRIVATE_DelayedOperation.Ms(this, t5, e7, n, function(t6) {
            return r.Zs(t6);
        });
        return this.Ks.push(i), i;
    }, t2.prototype.Ys = function() {
        this.js && fail("AsyncQueue is already failed: " + (this.js.stack || this.js.message));
    }, t2.prototype.to = function() {
        assert(this.qs, "verifyOpInProgress() called when no op in progress on this queue.");
    }, t2.prototype.eo = function() {
        return this.Xs(function() {
            return Promise.resolve();
        });
    }, t2.prototype.no = function(t5) {
        for(var e7 = 0, n = this.Ks; e7 < n.length; e7++){
            if (n[e7].Cs === t5) return !0;
        }
        return !1;
    }, t2.prototype.ro = function(t5) {
        var e7 = this;
        return this.eo().then(function() {
            assert(t5 === __PRIVATE_TimerId.Vs || e7.no(t5), "Attempted to drain to missing operation " + t5), e7.Ks.sort(function(t6, e8) {
                return t6.Os - e8.Os;
            });
            for(var n = 0, r = e7.Ks; n < r.length; n++){
                var i = r[n];
                if (i.Bs(), t5 !== __PRIVATE_TimerId.Vs && i.Cs === t5) break;
            }
            return e7.eo();
        });
    }, t2.prototype.io = function(t5) {
        this.Qs.push(t5);
    }, t2.prototype.Zs = function(t5) {
        var e7 = this.Ks.indexOf(t5);
        assert(e7 >= 0, "Delayed operation not found."), this.Ks.splice(e7, 1);
    }, t2;
}(), __PRIVATE_escapeChar = "", __PRIVATE_encodedSeparatorChar = "", __PRIVATE_encodedNul = "", __PRIVATE_encodedEscape = "";
function encode(t2) {
    for(var e7 = "", n = 0; n < t2.length; n++)e7.length > 0 && (e7 = __PRIVATE_encodeSeparator(e7)), e7 = __PRIVATE_encodeSegment(t2.get(n), e7);
    return __PRIVATE_encodeSeparator(e7);
}
function __PRIVATE_encodeSegment(t2, e7) {
    for(var n = e7, r = t2.length, i = 0; i < r; i++){
        var s = t2.charAt(i);
        switch(s){
            case "\0":
                n += __PRIVATE_escapeChar + __PRIVATE_encodedNul;
                break;
            case __PRIVATE_escapeChar:
                n += __PRIVATE_escapeChar + __PRIVATE_encodedEscape;
                break;
            default:
                n += s;
        }
    }
    return n;
}
function __PRIVATE_encodeSeparator(t2) {
    return t2 + __PRIVATE_escapeChar + __PRIVATE_encodedSeparatorChar;
}
function decode(t2) {
    var e7 = t2.length;
    if (assert(e7 >= 2, "Invalid path " + t2), 2 === e7) return assert(t2.charAt(0) === __PRIVATE_escapeChar && t2.charAt(1) === __PRIVATE_encodedSeparatorChar, "Non-empty path " + t2 + " had length 2"), ResourcePath.at;
    for(var n = e7 - 2, r = [], i = "", s = 0; s < e7;){
        var o = t2.indexOf(__PRIVATE_escapeChar, s);
        switch((o < 0 || o > n) && fail('Invalid encoded resource path: "' + t2 + '"'), t2.charAt(o + 1)){
            case __PRIVATE_encodedSeparatorChar:
                var u = t2.substring(s, o), a = void 0;
                0 === i.length ? a = u : (a = i += u, i = ""), r.push(a);
                break;
            case __PRIVATE_encodedNul:
                i += t2.substring(s, o), i += "\0";
                break;
            case __PRIVATE_encodedEscape:
                i += t2.substring(s, o + 1);
                break;
            default:
                fail('Invalid encoded resource path: "' + t2 + '"');
        }
        s = o + 2;
    }
    return new ResourcePath(r);
}
var __PRIVATE_BATCHID_UNKNOWN = -1, __PRIVATE_MutationBatch = function() {
    function t2(t5, e7, n, r) {
        this.batchId = t5, this.ke = e7, this.baseMutations = n, this.mutations = r, assert(r.length > 0, "Cannot create an empty mutation batch");
    }
    return t2.prototype.Xt = function(t5, e7, n) {
        e7 && assert(e7.key.isEqual(t5), "applyToRemoteDocument: key " + t5 + " should match maybeDoc key\n        " + e7.key);
        var r = n.so;
        assert(r.length === this.mutations.length, "Mismatch between mutations length\n      (" + this.mutations.length + ") and mutation results length\n      (" + r.length + ").");
        for(var i = 0; i < this.mutations.length; i++){
            var s = this.mutations[i];
            if (s.key.isEqual(t5)) {
                var o = r[i];
                e7 = s.Xt(e7, o);
            }
        }
        return e7;
    }, t2.prototype.Ht = function(t5, e7) {
        e7 && assert(e7.key.isEqual(t5), "applyToLocalDocument: key " + t5 + " should match maybeDoc key\n        " + e7.key);
        for(var n = 0, r = this.baseMutations; n < r.length; n++)(u = r[n]).key.isEqual(t5) && (e7 = u.Ht(e7, e7, this.ke));
        for(var i = e7, s = 0, o = this.mutations; s < o.length; s++){
            var u;
            (u = o[s]).key.isEqual(t5) && (e7 = u.Ht(e7, i, this.ke));
        }
        return e7;
    }, t2.prototype.oo = function(t5) {
        var e7 = this, n = t5;
        return this.mutations.forEach(function(r) {
            var i = e7.Ht(r.key, t5.get(r.key));
            i && (n = n.Pt(r.key, i));
        }), n;
    }, t2.prototype.keys = function() {
        return this.mutations.reduce(function(t5, e7) {
            return t5.add(e7.key);
        }, __PRIVATE_documentKeySet());
    }, t2.prototype.isEqual = function(t5) {
        return this.batchId === t5.batchId && __PRIVATE_arrayEquals(this.mutations, t5.mutations) && __PRIVATE_arrayEquals(this.baseMutations, t5.baseMutations);
    }, t2;
}(), __PRIVATE_MutationBatchResult = function() {
    function t2(t5, e7, n, r, i) {
        this.batch = t5, this.uo = e7, this.so = n, this.streamToken = r, this.ao = i;
    }
    return t2.from = function(e7, n, r, i) {
        assert(e7.mutations.length === r.length, "Mutations sent " + e7.mutations.length + " must equal results received " + r.length);
        for(var s = __PRIVATE_documentVersionMap(), o = e7.mutations, u = 0; u < o.length; u++)s = s.Pt(o[u].key, r[u].version);
        return new t2(e7, n, r, i, s);
    }, t2;
}(), __PRIVATE_ReferenceSet = function() {
    function t2() {
        this._o = new __PRIVATE_SortedSet(__PRIVATE_DocReference.je), this.co = new __PRIVATE_SortedSet(__PRIVATE_DocReference.ho);
    }
    return t2.prototype.tt = function() {
        return this._o.tt();
    }, t2.prototype.fo = function(t5, e7) {
        var n = new __PRIVATE_DocReference(t5, e7);
        this._o = this._o.add(n), this.co = this.co.add(n);
    }, t2.prototype.lo = function(t5, e7) {
        var n = this;
        t5.forEach(function(t6) {
            return n.fo(t6, e7);
        });
    }, t2.prototype.do = function(t5, e7) {
        this.To(new __PRIVATE_DocReference(t5, e7));
    }, t2.prototype.Eo = function(t5, e7) {
        var n = this;
        t5.forEach(function(t6) {
            return n.do(t6, e7);
        });
    }, t2.prototype.Po = function(t5) {
        var e7 = this, n = __PRIVATE_DocumentKey.EMPTY, r = new __PRIVATE_DocReference(n, t5), i = new __PRIVATE_DocReference(n, t5 + 1), s = [];
        return this.co.qt([
            r,
            i
        ], function(t6) {
            e7.To(t6), s.push(t6.key);
        }), s;
    }, t2.prototype.Ao = function() {
        var t5 = this;
        this._o.forEach(function(e7) {
            return t5.To(e7);
        });
    }, t2.prototype.To = function(t5) {
        this._o = this._o.delete(t5), this.co = this.co.delete(t5);
    }, t2.prototype.Ro = function(t5) {
        var e7 = __PRIVATE_DocumentKey.EMPTY, n = new __PRIVATE_DocReference(e7, t5), r = new __PRIVATE_DocReference(e7, t5 + 1), i = __PRIVATE_documentKeySet();
        return this.co.qt([
            n,
            r
        ], function(t6) {
            i = i.add(t6.key);
        }), i;
    }, t2.prototype.Io = function(t5) {
        var e7 = new __PRIVATE_DocReference(t5, 0), n = this._o.Wt(e7);
        return null !== n && t5.isEqual(n.key);
    }, t2;
}(), __PRIVATE_DocReference = function() {
    function t2(t5, e7) {
        this.key = t5, this.Vo = e7;
    }
    return t2.je = function(t5, e7) {
        return __PRIVATE_DocumentKey.H(t5.key, e7.key) || __PRIVATE_primitiveComparator(t5.Vo, e7.Vo);
    }, t2.ho = function(t5, e7) {
        return __PRIVATE_primitiveComparator(t5.Vo, e7.Vo) || __PRIVATE_DocumentKey.H(t5.key, e7.key);
    }, t2;
}(), __PRIVATE_ObjectMap = function() {
    function t2(t5) {
        this.mo = t5, this.vo = {
        };
    }
    return t2.prototype.get = function(t5) {
        var e7 = this.mo(t5), n = this.vo[e7];
        if ((void 0) !== n) for(var r = 0, i = n; r < i.length; r++){
            var s = i[r], o = s[0], u = s[1];
            if (o.isEqual(t5)) return u;
        }
    }, t2.prototype.has = function(t5) {
        return (void 0) !== this.get(t5);
    }, t2.prototype.set = function(t5, e7) {
        var n = this.mo(t5), r = this.vo[n];
        if ((void 0) !== r) {
            for(var i = 0; i < r.length; i++)if (r[i][0].isEqual(t5)) return void (r[i] = [
                t5,
                e7
            ]);
            r.push([
                t5,
                e7
            ]);
        } else this.vo[n] = [
            [
                t5,
                e7
            ]
        ];
    }, t2.prototype.delete = function(t5) {
        var e7 = this.mo(t5), n = this.vo[e7];
        if ((void 0) === n) return !1;
        for(var r = 0; r < n.length; r++)if (n[r][0].isEqual(t5)) return 1 === n.length ? delete this.vo[e7] : n.splice(r, 1), !0;
        return !1;
    }, t2.prototype.forEach = function(t5) {
        forEach(this.vo, function(e7, n) {
            for(var r = 0, i = n; r < i.length; r++){
                var s = i[r], o = s[0], u = s[1];
                t5(o, u);
            }
        });
    }, t2.prototype.tt = function() {
        return __PRIVATE_isEmpty(this.vo);
    }, t2;
}(), PersistencePromise = function() {
    function t2(t5) {
        var e7 = this;
        this.po = null, this.bo = null, this.result = void 0, this.error = void 0, this.wo = !1, this.yo = !1, t5(function(t6) {
            e7.wo = !0, e7.result = t6, e7.po && e7.po(t6);
        }, function(t6) {
            e7.wo = !0, e7.error = t6, e7.bo && e7.bo(t6);
        });
    }
    return t2.prototype.catch = function(t5) {
        return this.next(void 0, t5);
    }, t2.prototype.next = function(e7, n) {
        var r = this;
        return this.yo && fail("Called next() or catch() twice for PersistencePromise"), this.yo = !0, this.wo ? this.error ? this.So(n, this.error) : this.Do(e7, this.result) : new t2(function(t5, i) {
            r.po = function(n1) {
                r.Do(e7, n1).next(t5, i);
            }, r.bo = function(e8) {
                r.So(n, e8).next(t5, i);
            };
        });
    }, t2.prototype.Co = function() {
        var t5 = this;
        return new Promise(function(e7, n) {
            t5.next(e7, n);
        });
    }, t2.prototype.Oo = function(e7) {
        try {
            var n = e7();
            return n instanceof t2 ? n : t2.resolve(n);
        } catch (e8) {
            return t2.reject(e8);
        }
    }, t2.prototype.Do = function(e7, n) {
        return e7 ? this.Oo(function() {
            return e7(n);
        }) : t2.resolve(n);
    }, t2.prototype.So = function(e7, n) {
        return e7 ? this.Oo(function() {
            return e7(n);
        }) : t2.reject(n);
    }, t2.resolve = function(e7) {
        return new t2(function(t5, n) {
            t5(e7);
        });
    }, t2.reject = function(e7) {
        return new t2(function(t5, n) {
            n(e7);
        });
    }, t2.Fo = function(e7) {
        return new t2(function(t5, n) {
            var r = 0, i = 0, s = !1;
            e7.forEach(function(e8) {
                ++r, e8.next(function() {
                    ++i, s && i === r && t5();
                }, function(t6) {
                    return n(t6);
                });
            }), s = !0, i === r && t5();
        });
    }, t2.No = function(e7) {
        for(var n = t2.resolve(!1), r = function(e8) {
            n = n.next(function(n1) {
                return n1 ? t2.resolve(n1) : e8();
            });
        }, i = 0, s = e7; i < s.length; i++)r(s[i]);
        return n;
    }, t2.forEach = function(t5, e7) {
        var n = this, r = [];
        return t5.forEach(function(t6, i) {
            r.push(e7.call(n, t6, i));
        }), this.Fo(r);
    }, t2;
}(), __PRIVATE_RemoteDocumentChangeBuffer = function() {
    function t2() {
        this.Mo = new __PRIVATE_ObjectMap(function(t5) {
            return t5.toString();
        }), this.Lo = !1;
    }
    return Object.defineProperty(t2.prototype, "readTime", {
        get: function() {
            return assert((void 0) !== this.Go, "Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used."), this.Go;
        },
        set: function(t5) {
            assert((void 0) === this.Go || this.Go.isEqual(t5), "All changes in a RemoteDocumentChangeBuffer must have the same read time"), this.Go = t5;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.Bo = function(t5, e7) {
        this.Uo(), this.readTime = e7, this.Mo.set(t5.key, t5);
    }, t2.prototype.ko = function(t5, e7) {
        this.Uo(), e7 && (this.readTime = e7), this.Mo.set(t5, null);
    }, t2.prototype.xo = function(t5, e7) {
        this.Uo();
        var n = this.Mo.get(e7);
        return (void 0) !== n ? PersistencePromise.resolve(n) : this.Ko(t5, e7);
    }, t2.prototype.getEntries = function(t5, e7) {
        return this.jo(t5, e7);
    }, t2.prototype.apply = function(t5) {
        return this.Uo(), this.Lo = !0, this.qo(t5);
    }, t2.prototype.Uo = function() {
        assert(!this.Lo, "Changes have already been applied.");
    }, t2;
}(), __PRIVATE_PRIMARY_LEASE_LOST_ERROR_MSG = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", __PRIVATE_PersistenceTransaction = function() {
    function t2() {
        this.Qo = [];
    }
    return t2.prototype.Wo = function(t5) {
        this.Qo.push(t5);
    }, t2.prototype.$o = function() {
        this.Qo.forEach(function(t5) {
            return t5();
        });
    }, t2;
}(), __PRIVATE_LOG_TAG$1 = "SimpleDb", __PRIVATE_TRANSACTION_RETRY_COUNT = 3, __PRIVATE_SimpleDb = function() {
    function t2(e7) {
        this.db = e7, 12.2 === t2.Yo(util.getUA()) && error("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    return t2.Ho = function(e7, n, r) {
        return assert(t2.Xo(), "IndexedDB not supported in current environment."), debug(__PRIVATE_LOG_TAG$1, "Opening database:", e7), new PersistencePromise(function(i, s) {
            var o = window.indexedDB.open(e7, n);
            o.onsuccess = function(e8) {
                var n1 = e8.target.result;
                i(new t2(n1));
            }, o.onblocked = function() {
                s(new FirestoreError(Code.FAILED_PRECONDITION, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
            }, o.onerror = function(t5) {
                var e8 = t5.target.error;
                "VersionError" === e8.name ? s(new FirestoreError(Code.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : s(e8);
            }, o.onupgradeneeded = function(t5) {
                debug(__PRIVATE_LOG_TAG$1, 'Database "' + e7 + '" requires upgrade from version:', t5.oldVersion);
                var n1 = t5.target.result;
                r.createOrUpgrade(n1, o.transaction, t5.oldVersion, SCHEMA_VERSION).next(function() {
                    debug(__PRIVATE_LOG_TAG$1, "Database upgrade to version " + SCHEMA_VERSION + " complete");
                });
            };
        }).Co();
    }, t2.delete = function(t5) {
        return debug(__PRIVATE_LOG_TAG$1, "Removing database:", t5), __PRIVATE_wrapRequest(window.indexedDB.deleteDatabase(t5)).Co();
    }, t2.Xo = function() {
        if ("undefined" == typeof window || null == window.indexedDB) return !1;
        if (t2.zo()) return !0;
        if ((void 0) === window.navigator) return !1;
        var e7 = util.getUA(), n = t2.Yo(e7), r = 0 < n && n < 10, i = t2.Jo(e7), s = 0 < i && i < 4.5;
        return !(e7.indexOf("MSIE ") > 0 || e7.indexOf("Trident/") > 0 || e7.indexOf("Edge/") > 0 || r || s);
    }, t2.zo = function() {
        var t5;
        return "undefined" != typeof process && "YES" === ((t5 = {
        }, (void 0) === t5) ? void 0 : t5.Zo);
    }, t2.tu = function(t5, e7) {
        return t5.store(e7);
    }, t2.Yo = function(t5) {
        var e7 = t5.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e7 ? e7[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n);
    }, t2.Jo = function(t5) {
        var e7 = t5.match(/Android ([\d.]+)/i), n = e7 ? e7[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(n);
    }, t2.prototype.eu = function(t5) {
        this.db.onversionchange = function(e7) {
            return t5(e7);
        };
    }, t2.prototype.runTransaction = function(t5, e7, n) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var r, i, s, o, u, a;
            return tslib.__generator(this, function(_) {
                switch(_.label){
                    case 0:
                        r = t5.startsWith("readonly"), i = t5.endsWith("idempotent"), s = 0, o = function() {
                            var t6, o1, a1, _1;
                            return tslib.__generator(this, function(c) {
                                switch(c.label){
                                    case 0:
                                        ++s, t6 = __PRIVATE_SimpleDbTransaction.open(u.db, r ? "readonly" : "readwrite", e7), c.label = 1;
                                    case 1:
                                        return c.trys.push([
                                            1,
                                            3,
                                            ,
                                            4
                                        ]), (o1 = n(t6).catch(function(e8) {
                                            return t6.abort(e8), PersistencePromise.reject(e8);
                                        }).Co()).catch(function() {
                                        }), [
                                            4,
                                            t6.nu
                                        ];
                                    case 2:
                                        return c.sent(), [
                                            2,
                                            {
                                                value: o1
                                            }
                                        ];
                                    case 3:
                                        return a1 = c.sent(), _1 = i && "FirebaseError" !== a1.name && s < __PRIVATE_TRANSACTION_RETRY_COUNT, debug(__PRIVATE_LOG_TAG$1, "Transaction failed with error: %s. Retrying: %s.", a1.message, _1), _1 ? [
                                            3,
                                            4
                                        ] : [
                                            2,
                                            {
                                                value: Promise.reject(a1)
                                            }
                                        ];
                                    case 4:
                                        return [
                                            2
                                        ];
                                }
                            });
                        }, u = this, _.label = 1;
                    case 1:
                        return [
                            5,
                            o()
                        ];
                    case 2:
                        return "object" == typeof (a = _.sent()) ? [
                            2,
                            a.value
                        ] : [
                            3,
                            1
                        ];
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.close = function() {
        this.db.close();
    }, t2;
}(), __PRIVATE_IterationController = function() {
    function t2(t5) {
        this.ru = t5, this.iu = !1, this.su = null;
    }
    return Object.defineProperty(t2.prototype, "wo", {
        get: function() {
            return this.iu;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "ou", {
        get: function() {
            return this.su;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "cursor", {
        set: function(t5) {
            this.ru = t5;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.done = function() {
        this.iu = !0;
    }, t2.prototype.uu = function(t5) {
        this.su = t5;
    }, t2.prototype.delete = function() {
        return __PRIVATE_wrapRequest(this.ru.delete());
    }, t2;
}(), __PRIVATE_SimpleDbTransaction = function() {
    function t2(t5) {
        var e7 = this;
        this.transaction = t5, this.aborted = !1, this.au = new __PRIVATE_Deferred, this.transaction.oncomplete = function() {
            e7.au.resolve();
        }, this.transaction.onabort = function() {
            t5.error ? e7.au.reject(t5.error) : e7.au.resolve();
        }, this.transaction.onerror = function(t6) {
            var n = __PRIVATE_checkForAndReportiOSError(t6.target.error);
            e7.au.reject(n);
        };
    }
    return t2.open = function(e7, n, r) {
        return new t2(e7.transaction(r, n));
    }, Object.defineProperty(t2.prototype, "nu", {
        get: function() {
            return this.au.promise;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.abort = function(t5) {
        t5 && this.au.reject(t5), this.aborted || (debug(__PRIVATE_LOG_TAG$1, "Aborting transaction:", t5 ? t5.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort());
    }, t2.prototype.store = function(t5) {
        var e7 = this.transaction.objectStore(t5);
        return assert(!!e7, "Object store not part of transaction: " + t5), new __PRIVATE_SimpleDbStore(e7);
    }, t2;
}(), __PRIVATE_SimpleDbStore = function() {
    function t2(t5) {
        this.store = t5;
    }
    return t2.prototype.put = function(t5, e7) {
        var n;
        return (void 0) !== e7 ? (debug(__PRIVATE_LOG_TAG$1, "PUT", this.store.name, t5, e7), n = this.store.put(e7, t5)) : (debug(__PRIVATE_LOG_TAG$1, "PUT", this.store.name, "<auto-key>", t5), n = this.store.put(t5)), __PRIVATE_wrapRequest(n);
    }, t2.prototype.add = function(t5) {
        return debug(__PRIVATE_LOG_TAG$1, "ADD", this.store.name, t5, t5), __PRIVATE_wrapRequest(this.store.add(t5));
    }, t2.prototype.get = function(t5) {
        var e7 = this;
        return __PRIVATE_wrapRequest(this.store.get(t5)).next(function(n) {
            return (void 0) === n && (n = null), debug(__PRIVATE_LOG_TAG$1, "GET", e7.store.name, t5, n), n;
        });
    }, t2.prototype.delete = function(t5) {
        return debug(__PRIVATE_LOG_TAG$1, "DELETE", this.store.name, t5), __PRIVATE_wrapRequest(this.store.delete(t5));
    }, t2.prototype.count = function() {
        return debug(__PRIVATE_LOG_TAG$1, "COUNT", this.store.name), __PRIVATE_wrapRequest(this.store.count());
    }, t2.prototype._u = function(t5, e7) {
        var n = this.cursor(this.options(t5, e7)), r = [];
        return this.cu(n, function(t6, e8) {
            r.push(e8);
        }).next(function() {
            return r;
        });
    }, t2.prototype.hu = function(t5, e7) {
        debug(__PRIVATE_LOG_TAG$1, "DELETE ALL", this.store.name);
        var n = this.options(t5, e7);
        n.fu = !1;
        var r = this.cursor(n);
        return this.cu(r, function(t6, e8, n1) {
            return n1.delete();
        });
    }, t2.prototype.lu = function(t5, e7) {
        var n;
        e7 ? n = t5 : (n = {
        }, e7 = t5);
        var r = this.cursor(n);
        return this.cu(r, e7);
    }, t2.prototype.du = function(t5) {
        var e7 = this.cursor({
        });
        return new PersistencePromise(function(n, r) {
            e7.onerror = function(t6) {
                var e8 = __PRIVATE_checkForAndReportiOSError(t6.target.error);
                r(e8);
            }, e7.onsuccess = function(e8) {
                var r1 = e8.target.result;
                r1 ? t5(r1.primaryKey, r1.value).next(function(t6) {
                    t6 ? r1.continue() : n();
                }) : n();
            };
        });
    }, t2.prototype.cu = function(t5, e7) {
        var n = [];
        return new PersistencePromise(function(r, i) {
            t5.onerror = function(t6) {
                i(t6.target.error);
            }, t5.onsuccess = function(t6) {
                var i1 = t6.target.result;
                if (i1) {
                    var s = new __PRIVATE_IterationController(i1), o = e7(i1.primaryKey, i1.value, s);
                    if (o instanceof PersistencePromise) {
                        var u = o.catch(function(t7) {
                            return s.done(), PersistencePromise.reject(t7);
                        });
                        n.push(u);
                    }
                    s.wo ? r() : null === s.ou ? i1.continue() : i1.continue(s.ou);
                } else r();
            };
        }).next(function() {
            return PersistencePromise.Fo(n);
        });
    }, t2.prototype.options = function(t5, e7) {
        var n = void 0;
        return (void 0) !== t5 && ("string" == typeof t5 ? n = t5 : (assert((void 0) === e7, "3rd argument must not be defined if 2nd is a range."), e7 = t5)), {
            index: n,
            range: e7
        };
    }, t2.prototype.cursor = function(t5) {
        var e7 = "next";
        if (t5.reverse && (e7 = "prev"), t5.index) {
            var n = this.store.index(t5.index);
            return t5.fu ? n.openKeyCursor(t5.range, e7) : n.openCursor(t5.range, e7);
        }
        return this.store.openCursor(t5.range, e7);
    }, t2;
}();
function __PRIVATE_wrapRequest(t2) {
    return new PersistencePromise(function(e7, n) {
        t2.onsuccess = function(t5) {
            var n1 = t5.target.result;
            e7(n1);
        }, t2.onerror = function(t5) {
            var e8 = __PRIVATE_checkForAndReportiOSError(t5.target.error);
            n(e8);
        };
    });
}
var __PRIVATE_reportedIOSError = !1;
function __PRIVATE_checkForAndReportiOSError(t2) {
    var e7 = __PRIVATE_SimpleDb.Yo(util.getUA());
    if (e7 >= 12.2 && e7 < 13) {
        var n = "An internal error was encountered in the Indexed Database server";
        if (t2.message.indexOf(n) >= 0) {
            var r = new FirestoreError("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
            return __PRIVATE_reportedIOSError || (__PRIVATE_reportedIOSError = !0, setTimeout(function() {
                throw r;
            }, 0)), r;
        }
    }
    return t2;
}
var __PRIVATE_IndexedDbMutationQueue = function() {
    function t2(t5, e7, n, r) {
        this.userId = t5, this.serializer = e7, this.Tu = n, this.Eu = r, this.Pu = {
        };
    }
    return t2.Au = function(e7, n, r, i) {
        return assert("" !== e7.uid, "UserID must not be an empty string."), new t2(e7.R() ? e7.uid : "", n, r, i);
    }, t2.prototype.Ru = function(t5) {
        var e7 = !0, n = IDBKeyRange.bound([
            this.userId,
            Number.NEGATIVE_INFINITY
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return __PRIVATE_mutationsStore(t5).lu({
            index: DbMutationBatch.userMutationsIndex,
            range: n
        }, function(t6, n1, r) {
            e7 = !1, r.done();
        }).next(function() {
            return e7;
        });
    }, t2.prototype.Iu = function(t5, e7, n) {
        return this.Vu(t5).next(function(e8) {
            return e8.lastStreamToken = __PRIVATE_convertStreamToken(n), __PRIVATE_mutationQueuesStore(t5).put(e8);
        });
    }, t2.prototype.mu = function(t5) {
        return this.Vu(t5).next(function(t6) {
            return t6.lastStreamToken;
        });
    }, t2.prototype.vu = function(t5, e7) {
        return this.Vu(t5).next(function(n) {
            return n.lastStreamToken = __PRIVATE_convertStreamToken(e7), __PRIVATE_mutationQueuesStore(t5).put(n);
        });
    }, t2.prototype.pu = function(t5, e7, n, r) {
        var i = this, s = __PRIVATE_documentMutationsStore(t5), o = __PRIVATE_mutationsStore(t5);
        return o.add({
        }).next(function(u) {
            assert("number" == typeof u, "Auto-generated key is not a number");
            for(var a = new __PRIVATE_MutationBatch(u, e7, n, r), _ = i.serializer.bu(i.userId, a), c = [], h = new __PRIVATE_SortedSet(function(t6, e8) {
                return __PRIVATE_primitiveComparator(t6.ot(), e8.ot());
            }), f = 0, l = r; f < l.length; f++){
                var d = l[f], T = DbDocumentMutation.key(i.userId, d.key.path, u);
                h = h.add(d.key.path.Z()), c.push(o.put(_)), c.push(s.put(T, DbDocumentMutation.PLACEHOLDER));
            }
            return h.forEach(function(e8) {
                c.push(i.Tu.gu(t5, e8));
            }), t5.Wo(function() {
                i.Pu[u] = a.keys();
            }), PersistencePromise.Fo(c).next(function() {
                return a;
            });
        });
    }, t2.prototype.wu = function(t5, e7) {
        var n = this;
        return __PRIVATE_mutationsStore(t5).get(e7).next(function(t6) {
            return t6 ? (assert(t6.userId === n.userId, "Unexpected user '" + t6.userId + "' for mutation batch " + e7), n.serializer.yu(t6)) : null;
        });
    }, t2.prototype.Su = function(t5, e7) {
        var n = this;
        return this.Pu[e7] ? PersistencePromise.resolve(this.Pu[e7]) : this.wu(t5, e7).next(function(t6) {
            if (t6) {
                var r = t6.keys();
                return n.Pu[e7] = r, r;
            }
            return null;
        });
    }, t2.prototype.Du = function(t5, e7) {
        var n = this, r = e7 + 1, i = IDBKeyRange.lowerBound([
            this.userId,
            r
        ]), s = null;
        return __PRIVATE_mutationsStore(t5).lu({
            index: DbMutationBatch.userMutationsIndex,
            range: i
        }, function(t6, e8, i1) {
            e8.userId === n.userId && (assert(e8.batchId >= r, "Should have found mutation after " + r), s = n.serializer.yu(e8)), i1.done();
        }).next(function() {
            return s;
        });
    }, t2.prototype.Cu = function(t5) {
        var e7 = IDBKeyRange.upperBound([
            this.userId,
            Number.POSITIVE_INFINITY
        ]), n = __PRIVATE_BATCHID_UNKNOWN;
        return __PRIVATE_mutationsStore(t5).lu({
            index: DbMutationBatch.userMutationsIndex,
            range: e7,
            reverse: !0
        }, function(t6, e8, r) {
            n = e8.batchId, r.done();
        }).next(function() {
            return n;
        });
    }, t2.prototype.Ou = function(t5) {
        var e7 = this, n = IDBKeyRange.bound([
            this.userId,
            __PRIVATE_BATCHID_UNKNOWN
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return __PRIVATE_mutationsStore(t5)._u(DbMutationBatch.userMutationsIndex, n).next(function(t6) {
            return t6.map(function(t7) {
                return e7.serializer.yu(t7);
            });
        });
    }, t2.prototype.Fu = function(t5, e7) {
        var n = this, r = DbDocumentMutation.prefixForPath(this.userId, e7.path), i = IDBKeyRange.lowerBound(r), s = [];
        return __PRIVATE_documentMutationsStore(t5).lu({
            range: i
        }, function(r1, i1, o) {
            var u = r1[0], a = r1[1], _ = r1[2], c = decode(a);
            if (u === n.userId && e7.path.isEqual(c)) return __PRIVATE_mutationsStore(t5).get(_).next(function(t6) {
                if (!t6) throw fail("Dangling document-mutation reference found: " + r1 + " which points to " + _);
                assert(t6.userId === n.userId, "Unexpected user '" + t6.userId + "' for mutation batch " + _), s.push(n.serializer.yu(t6));
            });
            o.done();
        }).next(function() {
            return s;
        });
    }, t2.prototype.Nu = function(t5, e7) {
        var n = this, r = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator), i = [];
        return e7.forEach(function(e8) {
            var s = DbDocumentMutation.prefixForPath(n.userId, e8.path), o = IDBKeyRange.lowerBound(s), u = __PRIVATE_documentMutationsStore(t5).lu({
                range: o
            }, function(t6, i1, s1) {
                var o1 = t6[0], u1 = t6[1], a = t6[2], _ = decode(u1);
                o1 === n.userId && e8.path.isEqual(_) ? r = r.add(a) : s1.done();
            });
            i.push(u);
        }), PersistencePromise.Fo(i).next(function() {
            return n.Mu(t5, r);
        });
    }, t2.prototype.Lu = function(t5, e7) {
        var n = this;
        assert(!e7.He(), "Document queries shouldn't go down this path"), assert(!e7.pn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        var r = e7.path, i = r.length + 1, s = DbDocumentMutation.prefixForPath(this.userId, r), o = IDBKeyRange.lowerBound(s), u = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator);
        return __PRIVATE_documentMutationsStore(t5).lu({
            range: o
        }, function(t6, e8, s1) {
            var o1 = t6[0], a = t6[1], _ = t6[2], c = decode(a);
            o1 === n.userId && r.rt(c) ? c.length === i && (u = u.add(_)) : s1.done();
        }).next(function() {
            return n.Mu(t5, u);
        });
    }, t2.prototype.Mu = function(t5, e7) {
        var n = this, r = [], i = [];
        return e7.forEach(function(e8) {
            i.push(__PRIVATE_mutationsStore(t5).get(e8).next(function(t6) {
                if (null === t6) throw fail("Dangling document-mutation reference found, which points to " + e8);
                assert(t6.userId === n.userId, "Unexpected user '" + t6.userId + "' for mutation batch " + e8), r.push(n.serializer.yu(t6));
            }));
        }), PersistencePromise.Fo(i).next(function() {
            return r;
        });
    }, t2.prototype.Gu = function(t5, e7) {
        var n = this;
        return __PRIVATE_removeMutationBatch(t5.Bu, this.userId, e7).next(function(r) {
            return t5.Wo(function() {
                n.Uu(e7.batchId);
            }), PersistencePromise.forEach(r, function(e8) {
                return n.Eu.ku(t5, e8);
            });
        });
    }, t2.prototype.Uu = function(t5) {
        delete this.Pu[t5];
    }, t2.prototype.xu = function(t5) {
        var e7 = this;
        return this.Ru(t5).next(function(n) {
            if (!n) return PersistencePromise.resolve();
            var r = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(e7.userId)), i = [];
            return __PRIVATE_documentMutationsStore(t5).lu({
                range: r
            }, function(t6, n1, r1) {
                if (t6[0] === e7.userId) {
                    var s = decode(t6[1]);
                    i.push(s);
                } else r1.done();
            }).next(function() {
                assert(0 === i.length, "Document leak -- detected dangling mutation references when queue is empty. Dangling keys: " + i.map(function(t6) {
                    return t6.ot();
                }));
            });
        });
    }, t2.prototype.Io = function(t5, e7) {
        return __PRIVATE_mutationQueueContainsKey(t5, this.userId, e7);
    }, t2.prototype.Vu = function(t5) {
        var e7 = this;
        return __PRIVATE_mutationQueuesStore(t5).get(this.userId).next(function(t6) {
            return t6 || new DbMutationQueue(e7.userId, __PRIVATE_BATCHID_UNKNOWN, "");
        });
    }, t2;
}();
function __PRIVATE_mutationQueueContainsKey(t2, e7, n) {
    var r = DbDocumentMutation.prefixForPath(e7, n.path), i = r[1], s = IDBKeyRange.lowerBound(r), o = !1;
    return __PRIVATE_documentMutationsStore(t2).lu({
        range: s,
        fu: !0
    }, function(t5, n1, r1) {
        var s1 = t5[0], u = t5[1];
        t5[2];
        s1 === e7 && u === i && (o = !0), r1.done();
    }).next(function() {
        return o;
    });
}
function __PRIVATE_mutationQueuesContainKey(t2, e7) {
    var n = !1;
    return __PRIVATE_mutationQueuesStore(t2).du(function(r) {
        return __PRIVATE_mutationQueueContainsKey(t2, r, e7).next(function(t5) {
            return t5 && (n = !0), PersistencePromise.resolve(!t5);
        });
    }).next(function() {
        return n;
    });
}
function __PRIVATE_removeMutationBatch(t2, e7, n) {
    var r = t2.store(DbMutationBatch.store), i = t2.store(DbDocumentMutation.store), s = [], o = IDBKeyRange.only(n.batchId), u = 0, a = r.lu({
        range: o
    }, function(t5, e8, n1) {
        return u++, n1.delete();
    });
    s.push(a.next(function() {
        assert(1 === u, "Dangling document-mutation reference found: Missing batch " + n.batchId);
    }));
    for(var _ = [], c = 0, h = n.mutations; c < h.length; c++){
        var f = h[c], l = DbDocumentMutation.key(e7, f.key.path, n.batchId);
        s.push(i.delete(l)), _.push(f.key);
    }
    return PersistencePromise.Fo(s).next(function() {
        return _;
    });
}
function __PRIVATE_convertStreamToken(t2) {
    return t2 instanceof Uint8Array ? (assert(__PRIVATE_SimpleDb.zo(), "Persisting non-string stream tokens is only supported with mock persistence."), t2.toString()) : t2;
}
function __PRIVATE_mutationsStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbMutationBatch.store);
}
function __PRIVATE_documentMutationsStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbDocumentMutation.store);
}
function __PRIVATE_mutationQueuesStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbMutationQueue.store);
}
var __PRIVATE_GeneratorIds, __PRIVATE_RESERVED_BITS = 1;
!function(t2) {
    t2[t2.Ku = 0] = "__PRIVATE_QueryCache", t2[t2.ju = 1] = "__PRIVATE_SyncEngine";
}(__PRIVATE_GeneratorIds || (__PRIVATE_GeneratorIds = {
}));
var __PRIVATE_TargetIdGenerator = function() {
    function t2(t5, e7) {
        this.qu = t5, assert((t5 & __PRIVATE_RESERVED_BITS) === t5, "Generator ID " + t5 + " contains more than " + __PRIVATE_RESERVED_BITS + " reserved bits"), this.Qu((void 0) !== e7 ? e7 : this.qu);
    }
    return t2.prototype.next = function() {
        var t5 = this.Wu;
        return this.Wu += 1 << __PRIVATE_RESERVED_BITS, t5;
    }, t2.prototype.after = function(t5) {
        return this.Qu(t5 + (1 << __PRIVATE_RESERVED_BITS)), this.next();
    }, t2.prototype.Qu = function(t5) {
        assert((t5 & __PRIVATE_RESERVED_BITS) === this.qu, "Cannot supply target ID from different generator ID"), this.Wu = t5;
    }, t2.$u = function() {
        return new t2(__PRIVATE_GeneratorIds.Ku, 2);
    }, t2.Yu = function() {
        return new t2(__PRIVATE_GeneratorIds.ju);
    }, t2;
}(), __PRIVATE_LocalDocumentsView = function() {
    function t2(t5, e7, n) {
        this.Hu = t5, this.Xu = e7, this.Tu = n;
    }
    return t2.prototype.zu = function(t5, e7) {
        var n = this;
        return this.Xu.Fu(t5, e7).next(function(r) {
            return n.Ju(t5, e7, r);
        });
    }, t2.prototype.Ju = function(t5, e7, n) {
        return this.Hu.xo(t5, e7).next(function(t6) {
            for(var r = 0, i = n; r < i.length; r++)t6 = i[r].Ht(e7, t6);
            return t6;
        });
    }, t2.prototype.Zu = function(t5, e7, n) {
        var r = __PRIVATE_nullableMaybeDocumentMap();
        return e7.forEach(function(t6, e8) {
            for(var i = 0, s = n; i < s.length; i++)e8 = s[i].Ht(t6, e8);
            r = r.Pt(t6, e8);
        }), r;
    }, t2.prototype.ta = function(t5, e7) {
        var n = this;
        return this.Hu.getEntries(t5, e7).next(function(e8) {
            return n.ea(t5, e8);
        });
    }, t2.prototype.ea = function(t5, e7) {
        var n = this;
        return this.Xu.Nu(t5, e7).next(function(r) {
            var i = n.Zu(t5, e7, r), s = __PRIVATE_maybeDocumentMap();
            return i.forEach(function(t6, e8) {
                e8 || (e8 = new __PRIVATE_NoDocument(t6, __PRIVATE_SnapshotVersion.W())), s = s.Pt(t6, e8);
            }), s;
        });
    }, t2.prototype.na = function(t5, e7, n) {
        return e7.He() ? this.ra(t5, e7.path) : e7.pn() ? this.ia(t5, e7, n) : this.sa(t5, e7, n);
    }, t2.prototype.ra = function(t5, e7) {
        return this.zu(t5, new __PRIVATE_DocumentKey(e7)).next(function(t6) {
            var e8 = __PRIVATE_documentMap();
            return t6 instanceof Document1 && (e8 = e8.Pt(t6.key, t6)), e8;
        });
    }, t2.prototype.ia = function(t5, e7, n) {
        var r = this;
        assert(e7.path.tt(), "Currently we only support collection group queries at the root.");
        var i = e7.collectionGroup, s = __PRIVATE_documentMap();
        return this.Tu.oa(t5, i).next(function(o) {
            return PersistencePromise.forEach(o, function(o1) {
                var u = e7.ln(o1.child(i));
                return r.sa(t5, u, n).next(function(t6) {
                    t6.forEach(function(t7, e8) {
                        s = s.Pt(t7, e8);
                    });
                });
            }).next(function() {
                return s;
            });
        });
    }, t2.prototype.sa = function(t5, e7, n) {
        var r, i, s = this;
        return this.Hu.na(t5, e7, n).next(function(n1) {
            return r = n1, s.Xu.Lu(t5, e7);
        }).next(function(e8) {
            return i = e8, s.ua(t5, i, r).next(function(t6) {
                r = t6;
                for(var e9 = 0, n1 = i; e9 < n1.length; e9++)for(var s1 = n1[e9], o = 0, u = s1.mutations; o < u.length; o++){
                    var a = u[o], _ = a.key, c = r.get(_), h = a.Ht(c, c, s1.ke);
                    r = h instanceof Document1 ? r.Pt(_, h) : r.remove(_);
                }
            });
        }).next(function() {
            return r.forEach(function(t6, n1) {
                e7.matches(n1) || (r = r.remove(t6));
            }), r;
        });
    }, t2.prototype.ua = function(t5, e7, n) {
        for(var r = __PRIVATE_documentKeySet(), i = 0, s = e7; i < s.length; i++)for(var o = 0, u = s[i].mutations; o < u.length; o++){
            var a = u[o];
            a instanceof __PRIVATE_PatchMutation && null === n.get(a.key) && (r = r.add(a.key));
        }
        var _ = n;
        return this.Hu.getEntries(t5, r).next(function(t6) {
            return t6.forEach(function(t7, e8) {
                null !== e8 && e8 instanceof Document1 && (_ = _.Pt(t7, e8));
            }), _;
        });
    }, t2;
}(), __PRIVATE_LocalViewChanges = function() {
    function t2(t5, e7, n, r) {
        this.targetId = t5, this.fromCache = e7, this.aa = n, this._a = r;
    }
    return t2.ca = function(e7, n) {
        for(var r = __PRIVATE_documentKeySet(), i = __PRIVATE_documentKeySet(), s = 0, o = n.docChanges; s < o.length; s++){
            var u = o[s];
            switch(u.type){
                case __PRIVATE_ChangeType.Un:
                    r = r.add(u.doc.key);
                    break;
                case __PRIVATE_ChangeType.kn:
                    i = i.add(u.doc.key);
            }
        }
        return new t2(e7, n.fromCache, r, i);
    }, t2;
}(), __PRIVATE_LOG_TAG$2 = "LocalStore", __PRIVATE_LocalStore = function() {
    function t2(t5, e7, n) {
        this.persistence = t5, this.ha = e7, this.fa = new __PRIVATE_ReferenceSet, this.la = new __PRIVATE_SortedMap(__PRIVATE_primitiveComparator), this.da = new __PRIVATE_ObjectMap(function(t6) {
            return t6.canonicalId();
        }), this.Ta = __PRIVATE_SnapshotVersion.MIN, assert(t5.Ea, "LocalStore was passed an unstarted persistence implementation"), this.persistence.Eu.Pa(this.fa), this.Xu = t5.Aa(n), this.Ra = t5.Ia(), this.Va = t5.ma(), this.va = new __PRIVATE_LocalDocumentsView(this.Ra, this.Xu, this.persistence.pa()), this.ha.ba(this.va);
    }
    return t2.prototype.start = function() {
        return this.ga();
    }, t2.prototype.wa = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e7, n, r, i = this;
            return tslib.__generator(this, function(s) {
                switch(s.label){
                    case 0:
                        return e7 = this.Xu, n = this.va, [
                            4,
                            this.persistence.runTransaction("Handle user change", "readonly-idempotent", function(r1) {
                                var s1;
                                return i.Xu.Ou(r1).next(function(o) {
                                    return s1 = o, e7 = i.persistence.Aa(t5), n = new __PRIVATE_LocalDocumentsView(i.Ra, e7, i.persistence.pa()), e7.Ou(r1);
                                }).next(function(t6) {
                                    for(var e8 = [], i1 = [], o = __PRIVATE_documentKeySet(), u = 0, a = s1; u < a.length; u++){
                                        var _ = a[u];
                                        e8.push(_.batchId);
                                        for(var c = 0, h = _.mutations; c < h.length; c++){
                                            var f = h[c];
                                            o = o.add(f.key);
                                        }
                                    }
                                    for(var l = 0, d = t6; l < d.length; l++){
                                        _ = d[l];
                                        i1.push(_.batchId);
                                        for(var T = 0, E = _.mutations; T < E.length; T++){
                                            f = E[T];
                                            o = o.add(f.key);
                                        }
                                    }
                                    return n.ta(r1, o).next(function(t7) {
                                        return {
                                            ya: t7,
                                            Sa: e8,
                                            Da: i1
                                        };
                                    });
                                });
                            })
                        ];
                    case 1:
                        return r = s.sent(), this.Xu = e7, this.va = n, this.ha.ba(this.va), [
                            2,
                            r
                        ];
                }
            });
        });
    }, t2.prototype.Ca = function(t5) {
        var e7, n = this, r = Timestamp.now(), i = t5.reduce(function(t6, e8) {
            return t6.add(e8.key);
        }, __PRIVATE_documentKeySet());
        return this.persistence.runTransaction("Locally write mutations", "readwrite-idempotent", function(s) {
            return n.va.ta(s, i).next(function(i1) {
                e7 = i1;
                for(var o = [], u = 0, a = t5; u < a.length; u++){
                    var _ = a[u], c = _.he(e7.get(_.key));
                    null != c && o.push(new __PRIVATE_PatchMutation(_.key, c, c.fe(), Precondition.exists(!0)));
                }
                return n.Xu.pu(s, r, o, t5);
            });
        }).then(function(t6) {
            var n1 = t6.oo(e7);
            return {
                batchId: t6.batchId,
                Mo: n1
            };
        });
    }, t2.prototype.Oa = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Lookup mutation documents", "readonly-idempotent", function(n) {
            return e7.Xu.Su(n, t5).next(function(t6) {
                return t6 ? e7.va.ta(n, t6) : PersistencePromise.resolve(null);
            });
        });
    }, t2.prototype.Iu = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Acknowledge batch", "readwrite-primary-idempotent", function(n) {
            var r = t5.batch.keys(), i = e7.Ra.Fa({
                Na: !0
            });
            return e7.Xu.Iu(n, t5.batch, t5.streamToken).next(function() {
                return e7.Ma(n, t5, i);
            }).next(function() {
                return i.apply(n);
            }).next(function() {
                return e7.Xu.xu(n);
            }).next(function() {
                return e7.va.ta(n, r);
            });
        });
    }, t2.prototype.La = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Reject batch", "readwrite-primary-idempotent", function(n) {
            var r;
            return e7.Xu.wu(n, t5).next(function(t6) {
                return assert(null !== t6, "Attempt to reject nonexistent batch!"), r = t6.keys(), e7.Xu.Gu(n, t6);
            }).next(function() {
                return e7.Xu.xu(n);
            }).next(function() {
                return e7.va.ta(n, r);
            });
        });
    }, t2.prototype.Cu = function() {
        var t5 = this;
        return this.persistence.runTransaction("Get highest unacknowledged batch id", "readonly-idempotent", function(e7) {
            return t5.Xu.Cu(e7);
        });
    }, t2.prototype.mu = function() {
        var t5 = this;
        return this.persistence.runTransaction("Get last stream token", "readonly-idempotent", function(e7) {
            return t5.Xu.mu(e7);
        });
    }, t2.prototype.vu = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Set last stream token", "readwrite-primary-idempotent", function(n) {
            return e7.Xu.vu(n, t5);
        });
    }, t2.prototype.Ga = function() {
        var t5 = this;
        return this.persistence.runTransaction("Get last remote snapshot version", "readonly-idempotent", function(e7) {
            return t5.Va.Ga(e7);
        });
    }, t2.prototype.Ba = function(e7) {
        var n = this, r = e7.On, i = this.la;
        return this.persistence.runTransaction("Apply remote event", "readwrite-primary-idempotent", function(s) {
            var o = n.Ra.Fa({
                Na: !0
            });
            i = n.la;
            var u = [];
            __PRIVATE_forEachNumber(e7.Jn, function(e8, o1) {
                var a = i.get(e8);
                if (a) {
                    u.push(n.Va.Ua(s, o1.ur, e8).next(function() {
                        return n.Va.ka(s, o1.sr, e8);
                    }));
                    var _ = o1.resumeToken;
                    if (_.length > 0) {
                        var c = a.Nn(_, r).Fn(s.xa);
                        i = i.Pt(e8, c), t2.Ka(a, c, o1) && u.push(n.Va.ja(s, c));
                    }
                }
            });
            var a = __PRIVATE_maybeDocumentMap(), _ = __PRIVATE_documentKeySet();
            if (e7.tr.forEach(function(t5, e8) {
                _ = _.add(t5);
            }), u.push(o.getEntries(s, _).next(function(t5) {
                e7.tr.forEach(function(i1, _1) {
                    var c = t5.get(i1);
                    _1 instanceof __PRIVATE_NoDocument && _1.version.isEqual(__PRIVATE_SnapshotVersion.MIN) ? (o.ko(i1, r), a = a.Pt(i1, _1)) : null == c || _1.version._(c.version) > 0 || 0 === _1.version._(c.version) && c.hasPendingWrites ? (assert(!__PRIVATE_SnapshotVersion.MIN.isEqual(r), "Cannot add a document when the remote version is zero"), o.Bo(_1, r), a = a.Pt(i1, _1)) : debug(__PRIVATE_LOG_TAG$2, "Ignoring outdated watch update for ", i1, ". Current version:", c.version, " Watch version:", _1.version), e7.er.has(i1) && u.push(n.persistence.Eu.qa(s, i1));
                });
            })), !r.isEqual(__PRIVATE_SnapshotVersion.MIN)) {
                var c = n.Va.Ga(s).next(function(t5) {
                    return assert(r._(t5) >= 0, "Watch stream reverted to previous snapshot?? " + r + " < " + t5), n.Va.Qa(s, s.xa, r);
                });
                u.push(c);
            }
            return PersistencePromise.Fo(u).next(function() {
                return o.apply(s);
            }).next(function() {
                return n.va.ea(s, a);
            });
        }).then(function(t5) {
            return n.la = i, t5;
        });
    }, t2.Ka = function(t5, e7, n) {
        return assert(e7.resumeToken.length > 0, "Attempted to persist target data with no resume token"), 0 === t5.resumeToken.length || e7.On.$() - t5.On.$() >= this.Wa || n.sr.size + n.or.size + n.ur.size > 0;
    }, t2.prototype.$a = function(t5) {
        for(var e7 = this, n = 0, r = t5; n < r.length; n++){
            var i = r[n], s = i.targetId;
            if (this.fa.lo(i.aa, s), this.fa.Eo(i._a, s), !i.fromCache) {
                var o = this.la.get(s);
                assert(null !== o, "Can't set limbo-free snapshot version for unknown target: " + s);
                var u = o.On, a = o.Mn(u);
                this.la = this.la.Pt(s, a);
            }
        }
        return this.persistence.runTransaction("notifyLocalViewChanges", "readwrite-idempotent", function(n1) {
            return PersistencePromise.forEach(t5, function(t6) {
                return PersistencePromise.forEach(t6._a, function(t7) {
                    return e7.persistence.Eu.do(n1, t7);
                });
            });
        });
    }, t2.prototype.Ya = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Get next mutation batch", "readonly-idempotent", function(n) {
            return (void 0) === t5 && (t5 = __PRIVATE_BATCHID_UNKNOWN), e7.Xu.Du(n, t5);
        });
    }, t2.prototype.Ha = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("read document", "readonly-idempotent", function(n) {
            return e7.va.zu(n, t5);
        });
    }, t2.prototype.Xa = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Allocate target", "readwrite-idempotent", function(n) {
            var r;
            return e7.Va.za(n, t5).next(function(i) {
                return i ? (r = i, PersistencePromise.resolve(r)) : e7.Va.Ja(n).next(function(i1) {
                    return r = new __PRIVATE_TargetData(t5, i1, __PRIVATE_TargetPurpose.yn, n.xa), e7.Va.Za(n, r).next(function() {
                        return r;
                    });
                });
            });
        }).then(function(n) {
            return null === e7.la.get(n.targetId) && (e7.la = e7.la.Pt(n.targetId, n), e7.da.set(t5, n.targetId)), n;
        });
    }, t2.prototype.za = function(t5, e7) {
        var n = this.da.get(e7);
        return (void 0) !== n ? PersistencePromise.resolve(this.la.get(n)) : this.Va.za(t5, e7);
    }, t2.prototype.t_ = function(t5, e7) {
        var n = this, r = this.la.get(t5);
        assert(null !== r, "Tried to release nonexistent target: " + t5);
        var i = e7 ? "readwrite-idempotent" : "readwrite-primary-idempotent";
        return this.persistence.runTransaction("Release target", i, function(i1) {
            var s = n.fa.Po(t5);
            return e7 ? PersistencePromise.resolve() : PersistencePromise.forEach(s, function(t6) {
                return n.persistence.Eu.do(i1, t6);
            }).next(function() {
                n.persistence.Eu.removeTarget(i1, r);
            });
        }).then(function() {
            n.la = n.la.remove(t5), n.da.delete(r.target);
        });
    }, t2.prototype.e_ = function(t5, e7) {
        var n = this, r = __PRIVATE_SnapshotVersion.MIN, i = __PRIVATE_documentKeySet();
        return this.persistence.runTransaction("Execute query", "readonly-idempotent", function(s) {
            return n.za(s, t5.Tn()).next(function(t6) {
                if (t6) return r = t6.lastLimboFreeSnapshotVersion, n.Va.n_(s, t6.targetId).next(function(t7) {
                    i = t7;
                });
            }).next(function() {
                return n.ha.na(s, t5, e7 ? r : __PRIVATE_SnapshotVersion.MIN, e7 ? i : __PRIVATE_documentKeySet());
            }).next(function(t6) {
                return {
                    documents: t6,
                    r_: i
                };
            });
        });
    }, t2.prototype.i_ = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Remote document keys", "readonly-idempotent", function(n) {
            return e7.Va.n_(n, t5);
        });
    }, t2.prototype.s_ = function() {
        return this.persistence.s_();
    }, t2.prototype.o_ = function(t5) {
        this.Xu.Uu(t5);
    }, t2.prototype.u_ = function(t5) {
        this.persistence.u_(t5);
    }, t2.prototype.Ma = function(t5, e7, n) {
        var r = this, i = e7.batch, s = i.keys(), o = PersistencePromise.resolve();
        return s.forEach(function(r1) {
            o = o.next(function() {
                return n.xo(t5, r1);
            }).next(function(t6) {
                var s1 = t6, o1 = e7.ao.get(r1);
                assert(null !== o1, "ackVersions should contain every doc in the write."), (!s1 || s1.version._(o1) < 0) && ((s1 = i.Xt(r1, s1, e7)) ? n.Bo(s1, e7.uo) : assert(!t6, "Mutation batch " + i + " applied to document " + t6 + " resulted in null"));
            });
        }), o.next(function() {
            return r.Xu.Gu(t5, i);
        });
    }, t2.prototype.a_ = function(t5) {
        var e7 = this;
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary-idempotent", function(n) {
            return t5.__(n, e7.la);
        });
    }, t2.prototype.c_ = function(t5) {
        var e7 = this, n = this.la.get(t5);
        return n ? Promise.resolve(n.target) : this.persistence.runTransaction("Get target data", "readonly-idempotent", function(n1) {
            return e7.Va.Xr(n1, t5).next(function(t6) {
                return t6 ? t6.target : null;
            });
        });
    }, t2.prototype.h_ = function() {
        var t5 = this;
        return this.persistence.runTransaction("Get new document changes", "readonly-idempotent", function(e7) {
            return t5.Ra.h_(e7, t5.Ta);
        }).then(function(e7) {
            var n = e7.f_, r = e7.readTime;
            return t5.Ta = r, n;
        });
    }, t2.prototype.ga = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5, e7 = this;
            return tslib.__generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return t5 = this, [
                            4,
                            this.persistence.runTransaction("Synchronize last document change read time", "readonly-idempotent", function(t6) {
                                return e7.Ra.l_(t6);
                            })
                        ];
                    case 1:
                        return t5.Ta = n.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.Wa = 300000000, t2;
}();
function __PRIVATE_ignoreIfPrimaryLeaseLoss(t2) {
    return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(e7) {
            if (t2.code !== Code.FAILED_PRECONDITION || t2.message !== __PRIVATE_PRIMARY_LEASE_LOST_ERROR_MSG) throw t2;
            return debug(__PRIVATE_LOG_TAG$2, "Unexpectedly lost primary lease"), [
                2
            ];
        });
    });
}
function __PRIVATE_bufferEntryComparator(t2, e7) {
    var n = t2[0], r = t2[1], i = e7[0], s = e7[1], o = __PRIVATE_primitiveComparator(n, i);
    return 0 === o ? __PRIVATE_primitiveComparator(r, s) : o;
}
var __PRIVATE_RollingSequenceNumberBuffer = function() {
    function t2(t5) {
        this.d_ = t5, this.buffer = new __PRIVATE_SortedSet(__PRIVATE_bufferEntryComparator), this.T_ = 0;
    }
    return t2.prototype.E_ = function() {
        return ++this.T_;
    }, t2.prototype.P_ = function(t5) {
        var e7 = [
            t5,
            this.E_()
        ];
        if (this.buffer.size < this.d_) this.buffer = this.buffer.add(e7);
        else {
            var n = this.buffer.last();
            __PRIVATE_bufferEntryComparator(e7, n) < 0 && (this.buffer = this.buffer.delete(n).add(e7));
        }
    }, Object.defineProperty(t2.prototype, "maxValue", {
        get: function() {
            return this.buffer.last()[0];
        },
        enumerable: !0,
        configurable: !0
    }), t2;
}(), __PRIVATE_GC_DID_NOT_RUN = {
    A_: !1,
    R_: 0,
    I_: 0,
    V_: 0
}, __PRIVATE_LruParams = function() {
    function t2(t5, e7, n) {
        this.m_ = t5, this.v_ = e7, this.p_ = n;
    }
    return t2.b_ = function(e7) {
        return new t2(e7, t2.g_, t2.w_);
    }, t2.y_ = -1, t2.S_ = 1048576, t2.D_ = 41943040, t2.g_ = 10, t2.w_ = 1000, t2.C_ = new t2(t2.D_, t2.g_, t2.w_), t2.DISABLED = new t2(t2.y_, 0, 0), t2;
}(), __PRIVATE_INITIAL_GC_DELAY_MS = 60000, __PRIVATE_REGULAR_GC_DELAY_MS = 300000, __PRIVATE_LruScheduler = function() {
    function t2(t5, e7, n) {
        this.O_ = t5, this.Ds = e7, this.F_ = n, this.N_ = !1, this.M_ = null;
    }
    return t2.prototype.start = function() {
        assert(null === this.M_, "Cannot start an already started LruScheduler"), this.O_.params.m_ !== __PRIVATE_LruParams.y_ && this.L_();
    }, t2.prototype.stop = function() {
        this.M_ && (this.M_.cancel(), this.M_ = null);
    }, Object.defineProperty(t2.prototype, "Ea", {
        get: function() {
            return null !== this.M_;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.L_ = function() {
        var t5 = this;
        assert(null === this.M_, "Cannot schedule GC while a task is pending");
        var e7 = this.N_ ? __PRIVATE_REGULAR_GC_DELAY_MS : __PRIVATE_INITIAL_GC_DELAY_MS;
        debug("LruGarbageCollector", "Garbage collection scheduled in " + e7 + "ms"), this.M_ = this.Ds.Js(__PRIVATE_TimerId.ys, e7, function() {
            return t5.M_ = null, t5.N_ = !0, t5.F_.a_(t5.O_).then(function() {
                return t5.L_();
            }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
        });
    }, t2;
}(), __PRIVATE_LruGarbageCollector = function() {
    function t2(t5, e7) {
        this.G_ = t5, this.params = e7;
    }
    return t2.prototype.B_ = function(t5, e7) {
        return this.G_.U_(t5).next(function(t6) {
            return Math.floor(e7 / 100 * t6);
        });
    }, t2.prototype.k_ = function(t5, e7) {
        var n = this;
        if (0 === e7) return PersistencePromise.resolve(__PRIVATE_ListenSequence.Is);
        var r = new __PRIVATE_RollingSequenceNumberBuffer(e7);
        return this.G_.Ur(t5, function(t6) {
            return r.P_(t6.sequenceNumber);
        }).next(function() {
            return n.G_.x_(t5, function(t6) {
                return r.P_(t6);
            });
        }).next(function() {
            return r.maxValue;
        });
    }, t2.prototype.K_ = function(t5, e7, n) {
        return this.G_.K_(t5, e7, n);
    }, t2.prototype.j_ = function(t5, e7) {
        return this.G_.j_(t5, e7);
    }, t2.prototype.__ = function(t5, e7) {
        var n = this;
        return this.params.m_ === __PRIVATE_LruParams.y_ ? (debug("LruGarbageCollector", "Garbage collection skipped; disabled"), PersistencePromise.resolve(__PRIVATE_GC_DID_NOT_RUN)) : this.q_(t5).next(function(r) {
            return r < n.params.m_ ? (debug("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.m_), __PRIVATE_GC_DID_NOT_RUN) : n.Q_(t5, e7);
        });
    }, t2.prototype.q_ = function(t5) {
        return this.G_.q_(t5);
    }, t2.prototype.Q_ = function(t5, e7) {
        var n, r, i, s, o, u, a, _ = this, c = Date.now();
        return this.B_(t5, this.params.v_).next(function(e8) {
            return e8 > _.params.p_ ? (debug("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + _.params.p_ + " from " + e8), r = _.params.p_) : r = e8, s = Date.now(), _.k_(t5, r);
        }).next(function(r1) {
            return n = r1, o = Date.now(), _.K_(t5, n, e7);
        }).next(function(e8) {
            return i = e8, u = Date.now(), _.j_(t5, n);
        }).next(function(t6) {
            (a = Date.now(), __PRIVATE_getLogLevel() <= LogLevel.DEBUG) && debug("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (s - c) + "ms\n\tDetermined least recently used " + r + " in " + (o - s) + "ms\n\tRemoved " + i + " targets in " + (u - o) + "ms\n\tRemoved " + t6 + " documents in " + (a - u) + "ms\nTotal Duration: " + (a - c) + "ms");
            return PersistencePromise.resolve({
                A_: !0,
                R_: r,
                I_: i,
                V_: t6
            });
        });
    }, t2;
}(), __PRIVATE_IndexedDbTargetCache = function() {
    function t2(t5, e7) {
        this.Eu = t5, this.serializer = e7, this.W_ = __PRIVATE_TargetIdGenerator.$u();
    }
    return t2.prototype.Ja = function(t5) {
        var e7 = this;
        return this.Y_(t5).next(function(n) {
            return n.highestTargetId = e7.W_.after(n.highestTargetId), e7.H_(t5, n).next(function() {
                return n.highestTargetId;
            });
        });
    }, t2.prototype.Ga = function(t5) {
        return this.Y_(t5).next(function(t6) {
            return __PRIVATE_SnapshotVersion.q(new Timestamp(t6.lastRemoteSnapshotVersion.seconds, t6.lastRemoteSnapshotVersion.nanoseconds));
        });
    }, t2.prototype.X_ = function(t5) {
        return __PRIVATE_getHighestListenSequenceNumber(t5.Bu);
    }, t2.prototype.Qa = function(t5, e7, n) {
        var r = this;
        return this.Y_(t5).next(function(i) {
            return i.highestListenSequenceNumber = e7, n && (i.lastRemoteSnapshotVersion = n.Y()), e7 > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e7), r.H_(t5, i);
        });
    }, t2.prototype.Za = function(t5, e7) {
        var n = this;
        return this.z_(t5, e7).next(function() {
            return n.Y_(t5).next(function(r) {
                return r.targetCount += 1, n.J_(e7, r), n.H_(t5, r);
            });
        });
    }, t2.prototype.ja = function(t5, e7) {
        return this.z_(t5, e7);
    }, t2.prototype.Z_ = function(t5, e7) {
        var n = this;
        return this.tc(t5, e7.targetId).next(function() {
            return __PRIVATE_targetsStore(t5).delete(e7.targetId);
        }).next(function() {
            return n.Y_(t5);
        }).next(function(e8) {
            return assert(e8.targetCount > 0, "Removing from an empty target cache"), e8.targetCount -= 1, n.H_(t5, e8);
        });
    }, t2.prototype.K_ = function(t5, e7, n) {
        var r = this, i = 0, s = [];
        return __PRIVATE_targetsStore(t5).lu(function(o, u) {
            var a = r.serializer.ec(u);
            a.sequenceNumber <= e7 && null === n.get(a.targetId) && (i++, s.push(r.Z_(t5, a)));
        }).next(function() {
            return PersistencePromise.Fo(s);
        }).next(function() {
            return i;
        });
    }, t2.prototype.Ur = function(t5, e7) {
        var n = this;
        return __PRIVATE_targetsStore(t5).lu(function(t6, r) {
            var i = n.serializer.ec(r);
            e7(i);
        });
    }, t2.prototype.Y_ = function(t5) {
        return __PRIVATE_retrieveMetadata(t5.Bu);
    }, t2.prototype.H_ = function(t5, e7) {
        return __PRIVATE_globalTargetStore(t5).put(DbTargetGlobal.key, e7);
    }, t2.prototype.z_ = function(t5, e7) {
        return __PRIVATE_targetsStore(t5).put(this.serializer.nc(e7));
    }, t2.prototype.J_ = function(t5, e7) {
        var n = !1;
        return t5.targetId > e7.highestTargetId && (e7.highestTargetId = t5.targetId, n = !0), t5.sequenceNumber > e7.highestListenSequenceNumber && (e7.highestListenSequenceNumber = t5.sequenceNumber, n = !0), n;
    }, t2.prototype.rc = function(t5) {
        return this.Y_(t5).next(function(t6) {
            return t6.targetCount;
        });
    }, t2.prototype.za = function(t5, e7) {
        var n = this, r = e7.canonicalId(), i = IDBKeyRange.bound([
            r,
            Number.NEGATIVE_INFINITY
        ], [
            r,
            Number.POSITIVE_INFINITY
        ]), s = null;
        return __PRIVATE_targetsStore(t5).lu({
            range: i,
            index: DbTarget.queryTargetsIndexName
        }, function(t6, r1, i1) {
            var o = n.serializer.ec(r1);
            e7.isEqual(o.target) && (s = o, i1.done());
        }).next(function() {
            return s;
        });
    }, t2.prototype.ka = function(t5, e7, n) {
        var r = this, i = [], s = __PRIVATE_documentTargetStore(t5);
        return e7.forEach(function(e8) {
            var o = encode(e8.path);
            i.push(s.put(new DbTargetDocument(n, o))), i.push(r.Eu.fo(t5, e8));
        }), PersistencePromise.Fo(i);
    }, t2.prototype.Ua = function(t5, e7, n) {
        var r = this, i = __PRIVATE_documentTargetStore(t5);
        return PersistencePromise.forEach(e7, function(e8) {
            var s = encode(e8.path);
            return PersistencePromise.Fo([
                i.delete([
                    n,
                    s
                ]),
                r.Eu.do(t5, e8)
            ]);
        });
    }, t2.prototype.tc = function(t5, e7) {
        var n = __PRIVATE_documentTargetStore(t5), r = IDBKeyRange.bound([
            e7
        ], [
            e7 + 1
        ], !1, !0);
        return n.delete(r);
    }, t2.prototype.n_ = function(t5, e7) {
        var n = IDBKeyRange.bound([
            e7
        ], [
            e7 + 1
        ], !1, !0), r = __PRIVATE_documentTargetStore(t5), i = __PRIVATE_documentKeySet();
        return r.lu({
            range: n,
            fu: !0
        }, function(t6, e8, n1) {
            var r1 = decode(t6[1]), s = new __PRIVATE_DocumentKey(r1);
            i = i.add(s);
        }).next(function() {
            return i;
        });
    }, t2.prototype.Io = function(t5, e7) {
        var n = encode(e7.path), r = IDBKeyRange.bound([
            n
        ], [
            __PRIVATE_immediateSuccessor(n)
        ], !1, !0), i = 0;
        return __PRIVATE_documentTargetStore(t5).lu({
            index: DbTargetDocument.documentTargetsIndex,
            fu: !0,
            range: r
        }, function(t6, e8, n1) {
            var r1 = t6[0];
            t6[1];
            0 !== r1 && (i++, n1.done());
        }).next(function() {
            return i > 0;
        });
    }, t2.prototype.Xr = function(t5, e7) {
        var n = this;
        return __PRIVATE_targetsStore(t5).get(e7).next(function(t6) {
            return t6 ? n.serializer.ec(t6) : null;
        });
    }, t2;
}();
function __PRIVATE_targetsStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbTarget.store);
}
function __PRIVATE_globalTargetStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbTargetGlobal.store);
}
function __PRIVATE_retrieveMetadata(t2) {
    return __PRIVATE_SimpleDb.tu(t2, DbTargetGlobal.store).get(DbTargetGlobal.key).next(function(t5) {
        return assert(null !== t5, "Missing metadata row."), t5;
    });
}
function __PRIVATE_getHighestListenSequenceNumber(t2) {
    return __PRIVATE_retrieveMetadata(t2).next(function(t5) {
        return t5.highestListenSequenceNumber;
    });
}
function __PRIVATE_documentTargetStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbTargetDocument.store);
}
var __PRIVATE_IndexedDbRemoteDocumentCache = function() {
    function t2(t5, e7) {
        this.serializer = t5, this.Tu = e7;
    }
    return t2.prototype.Bo = function(t5, e7, n) {
        return __PRIVATE_remoteDocumentsStore(t5).put(__PRIVATE_dbKey(e7), n);
    }, t2.prototype.ko = function(t5, e7) {
        var n = __PRIVATE_remoteDocumentsStore(t5), r = __PRIVATE_dbKey(e7);
        return n.delete(r);
    }, t2.prototype.updateMetadata = function(t5, e7) {
        var n = this;
        return this.getMetadata(t5).next(function(r) {
            return r.byteSize += e7, n.ic(t5, r);
        });
    }, t2.prototype.xo = function(t5, e7) {
        var n = this;
        return __PRIVATE_remoteDocumentsStore(t5).get(__PRIVATE_dbKey(e7)).next(function(t6) {
            return n.sc(t6);
        });
    }, t2.prototype.oc = function(t5, e7) {
        var n = this;
        return __PRIVATE_remoteDocumentsStore(t5).get(__PRIVATE_dbKey(e7)).next(function(t6) {
            var e8 = n.sc(t6);
            return e8 ? {
                uc: e8,
                size: __PRIVATE_dbDocumentSize(t6)
            } : null;
        });
    }, t2.prototype.getEntries = function(t5, e7) {
        var n = this, r = __PRIVATE_nullableMaybeDocumentMap();
        return this.ac(t5, e7, function(t6, e8) {
            var i = n.sc(e8);
            r = r.Pt(t6, i);
        }).next(function() {
            return r;
        });
    }, t2.prototype._c = function(t5, e7) {
        var n = this, r = __PRIVATE_nullableMaybeDocumentMap(), i = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
        return this.ac(t5, e7, function(t6, e8) {
            var s = n.sc(e8);
            s ? (r = r.Pt(t6, s), i = i.Pt(t6, __PRIVATE_dbDocumentSize(e8))) : (r = r.Pt(t6, null), i = i.Pt(t6, 0));
        }).next(function() {
            return {
                cc: r,
                hc: i
            };
        });
    }, t2.prototype.ac = function(t5, e7, n) {
        if (e7.tt()) return PersistencePromise.resolve();
        var r = IDBKeyRange.bound(e7.first().path.st(), e7.last().path.st()), i = e7.pt(), s = i.Dt();
        return __PRIVATE_remoteDocumentsStore(t5).lu({
            range: r
        }, function(t6, e8, r1) {
            for(var o = __PRIVATE_DocumentKey.Tt(t6); s && __PRIVATE_DocumentKey.H(s, o) < 0;)n(s, null), s = i.Dt();
            s && s.isEqual(o) && (n(s, e8), s = i.Ct() ? i.Dt() : null), s ? r1.uu(s.path.st()) : r1.done();
        }).next(function() {
            for(; s;)n(s, null), s = i.Ct() ? i.Dt() : null;
        });
    }, t2.prototype.na = function(t5, e7, n) {
        var r = this;
        assert(!e7.pn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        var i = __PRIVATE_documentMap(), s = e7.path.length + 1, o = {
        };
        if (n.isEqual(__PRIVATE_SnapshotVersion.MIN)) {
            var u = e7.path.st();
            o.range = IDBKeyRange.lowerBound(u);
        } else {
            var a = e7.path.st(), _ = this.serializer.fc(n);
            o.range = IDBKeyRange.lowerBound([
                a,
                _
            ], !0), o.index = DbRemoteDocument.collectionReadTimeIndex;
        }
        return __PRIVATE_remoteDocumentsStore(t5).lu(o, function(t6, n1, o1) {
            if (t6.length === s) {
                var u = r.serializer.lc(n1);
                e7.path.rt(u.key.path) ? u instanceof Document1 && e7.matches(u) && (i = i.Pt(u.key, u)) : o1.done();
            }
        }).next(function() {
            return i;
        });
    }, t2.prototype.h_ = function(t5, e7) {
        var n = this, r = __PRIVATE_maybeDocumentMap(), i = this.serializer.fc(e7), s = __PRIVATE_remoteDocumentsStore(t5), o = IDBKeyRange.lowerBound(i, !0);
        return s.lu({
            index: DbRemoteDocument.readTimeIndex,
            range: o
        }, function(t6, e8) {
            var s1 = n.serializer.lc(e8);
            r = r.Pt(s1.key, s1), i = e8.readTime;
        }).next(function() {
            return {
                f_: r,
                readTime: n.serializer.dc(i)
            };
        });
    }, t2.prototype.l_ = function(t5) {
        var e7 = this, n = __PRIVATE_remoteDocumentsStore(t5), r = __PRIVATE_SnapshotVersion.MIN;
        return n.lu({
            index: DbRemoteDocument.readTimeIndex,
            reverse: !0
        }, function(t6, n1, i) {
            n1.readTime && (r = e7.serializer.dc(n1.readTime)), i.done();
        }).next(function() {
            return r;
        });
    }, t2.prototype.Fa = function(e7) {
        return new t2.Tc(this, !!e7 && e7.Na);
    }, t2.prototype.Ec = function(t5) {
        return this.getMetadata(t5).next(function(t6) {
            return t6.byteSize;
        });
    }, t2.prototype.getMetadata = function(t5) {
        return __PRIVATE_documentGlobalStore(t5).get(DbRemoteDocumentGlobal.key).next(function(t6) {
            return assert(!!t6, "Missing document cache metadata"), t6;
        });
    }, t2.prototype.ic = function(t5, e7) {
        return __PRIVATE_documentGlobalStore(t5).put(DbRemoteDocumentGlobal.key, e7);
    }, t2.prototype.sc = function(t5) {
        if (t5) {
            var e7 = this.serializer.lc(t5);
            return e7 instanceof __PRIVATE_NoDocument && e7.version.isEqual(__PRIVATE_SnapshotVersion.W()) ? null : e7;
        }
        return null;
    }, t2.Tc = (function(t5) {
        function e8(e9, n) {
            var r = t5.call(this) || this;
            return r.Pc = e9, r.Na = n, r.Ac = new __PRIVATE_ObjectMap(function(t6) {
                return t6.toString();
            }), r;
        }
        return tslib.__extends(e8, t5), e8.prototype.qo = function(t6) {
            var e9 = this, n = [], r = 0, i = new __PRIVATE_SortedSet(function(t7, e10) {
                return __PRIVATE_primitiveComparator(t7.ot(), e10.ot());
            });
            return this.Mo.forEach(function(s, o) {
                var u = e9.Ac.get(s);
                if (assert((void 0) !== u, "Cannot modify a document that wasn't read (for " + s + ")"), o) {
                    assert(!e9.readTime.isEqual(__PRIVATE_SnapshotVersion.MIN), "Cannot add a document with a read time of zero");
                    var a = e9.Pc.serializer.Rc(o, e9.readTime);
                    i = i.add(s.path.Z());
                    var _ = __PRIVATE_dbDocumentSize(a);
                    r += _ - u, n.push(e9.Pc.Bo(t6, s, a));
                } else if (r -= u, e9.Na) {
                    var c = e9.Pc.serializer.Rc(new __PRIVATE_NoDocument(s, __PRIVATE_SnapshotVersion.W()), e9.readTime);
                    n.push(e9.Pc.Bo(t6, s, c));
                } else n.push(e9.Pc.ko(t6, s));
            }), i.forEach(function(r1) {
                n.push(e9.Pc.Tu.gu(t6, r1));
            }), n.push(this.Pc.updateMetadata(t6, r)), PersistencePromise.Fo(n);
        }, e8.prototype.Ko = function(t6, e9) {
            var n = this;
            return this.Pc.oc(t6, e9).next(function(t7) {
                return null === t7 ? (n.Ac.set(e9, 0), null) : (n.Ac.set(e9, t7.size), t7.uc);
            });
        }, e8.prototype.jo = function(t6, e9) {
            var n = this;
            return this.Pc._c(t6, e9).next(function(t7) {
                var e10 = t7.cc;
                return t7.hc.forEach(function(t8, e11) {
                    n.Ac.set(t8, e11);
                }), e10;
            });
        }, e8;
    })(__PRIVATE_RemoteDocumentChangeBuffer), t2;
}();
function __PRIVATE_documentGlobalStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbRemoteDocumentGlobal.store);
}
function __PRIVATE_remoteDocumentsStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbRemoteDocument.store);
}
function __PRIVATE_dbKey(t2) {
    return t2.path.st();
}
function __PRIVATE_dbDocumentSize(t2) {
    var e8;
    if (t2.document) e8 = t2.document;
    else if (t2.unknownDocument) e8 = t2.unknownDocument;
    else {
        if (!t2.noDocument) throw fail("Unknown remote document type");
        e8 = t2.noDocument;
    }
    return JSON.stringify(e8).length;
}
var __PRIVATE_MemoryIndexManager = function() {
    function t2() {
        this.Ic = new __PRIVATE_MemoryCollectionParentIndex;
    }
    return t2.prototype.gu = function(t5, e8) {
        return this.Ic.add(e8), PersistencePromise.resolve();
    }, t2.prototype.oa = function(t5, e8) {
        return PersistencePromise.resolve(this.Ic.getEntries(e8));
    }, t2;
}(), __PRIVATE_MemoryCollectionParentIndex = function() {
    function t2() {
        this.index = {
        };
    }
    return t2.prototype.add = function(t5) {
        assert(t5.length % 2 == 1, "Expected a collection path.");
        var e8 = t5.nt(), n = t5.Z(), r = this.index[e8] || new __PRIVATE_SortedSet(ResourcePath.H), i = !r.has(n);
        return this.index[e8] = r.add(n), i;
    }, t2.prototype.has = function(t5) {
        var e8 = t5.nt(), n = t5.Z(), r = this.index[e8];
        return r && r.has(n);
    }, t2.prototype.getEntries = function(t5) {
        return (this.index[t5] || new __PRIVATE_SortedSet(ResourcePath.H)).st();
    }, t2;
}(), SCHEMA_VERSION = 9, SchemaConverter = function() {
    function t2(t5) {
        this.serializer = t5;
    }
    return t2.prototype.createOrUpgrade = function(t5, e8, n, r) {
        var i = this;
        assert(n < r && n >= 0 && r <= SCHEMA_VERSION, "Unexpected schema upgrade from v" + n + " to v{toVersion}.");
        var s = new __PRIVATE_SimpleDbTransaction(e8);
        n < 1 && r >= 1 && (__PRIVATE_createPrimaryClientStore(t5), __PRIVATE_createMutationQueue(t5), __PRIVATE_createQueryCache(t5), __PRIVATE_createRemoteDocumentCache(t5));
        var o = PersistencePromise.resolve();
        return n < 3 && r >= 3 && (0 !== n && (__PRIVATE_dropQueryCache(t5), __PRIVATE_createQueryCache(t5)), o = o.next(function() {
            return __PRIVATE_writeEmptyTargetGlobalEntry(s);
        })), n < 4 && r >= 4 && (0 !== n && (o = o.next(function() {
            return __PRIVATE_upgradeMutationBatchSchemaAndMigrateData(t5, s);
        })), o = o.next(function() {
            __PRIVATE_createClientMetadataStore(t5);
        })), n < 5 && r >= 5 && (o = o.next(function() {
            return i.removeAcknowledgedMutations(s);
        })), n < 6 && r >= 6 && (o = o.next(function() {
            return __PRIVATE_createDocumentGlobalStore(t5), i.addDocumentGlobal(s);
        })), n < 7 && r >= 7 && (o = o.next(function() {
            return i.ensureSequenceNumbers(s);
        })), n < 8 && r >= 8 && (o = o.next(function() {
            return i.createCollectionParentIndex(t5, s);
        })), n < 9 && r >= 9 && (o = o.next(function() {
            __PRIVATE_dropRemoteDocumentChangesStore(t5), __PRIVATE_createRemoteDocumentReadTimeIndex(e8);
        })), o;
    }, t2.prototype.addDocumentGlobal = function(t5) {
        var e8 = 0;
        return t5.store(DbRemoteDocument.store).lu(function(t6, n) {
            e8 += __PRIVATE_dbDocumentSize(n);
        }).next(function() {
            var n = new DbRemoteDocumentGlobal(e8);
            return t5.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, n);
        });
    }, t2.prototype.removeAcknowledgedMutations = function(t5) {
        var e8 = this, n = t5.store(DbMutationQueue.store), r = t5.store(DbMutationBatch.store);
        return n._u().next(function(n1) {
            return PersistencePromise.forEach(n1, function(n2) {
                var i = IDBKeyRange.bound([
                    n2.userId,
                    __PRIVATE_BATCHID_UNKNOWN
                ], [
                    n2.userId,
                    n2.lastAcknowledgedBatchId
                ]);
                return r._u(DbMutationBatch.userMutationsIndex, i).next(function(r1) {
                    return PersistencePromise.forEach(r1, function(r2) {
                        assert(r2.userId === n2.userId, "Cannot process batch " + r2.batchId + " from unexpected user");
                        var i1 = e8.serializer.yu(r2);
                        return __PRIVATE_removeMutationBatch(t5, n2.userId, i1).next(function() {
                        });
                    });
                });
            });
        });
    }, t2.prototype.ensureSequenceNumbers = function(t5) {
        var e8 = t5.store(DbTargetDocument.store), n = t5.store(DbRemoteDocument.store);
        return __PRIVATE_getHighestListenSequenceNumber(t5).next(function(t6) {
            var r = [];
            return n.lu(function(n1, i) {
                var s = new ResourcePath(n1), o = __PRIVATE_sentinelKey(s);
                r.push(e8.get(o).next(function(n2) {
                    return n2 ? PersistencePromise.resolve() : (function(n3) {
                        return e8.put(new DbTargetDocument(0, encode(n3), t6));
                    })(s);
                }));
            }).next(function() {
                return PersistencePromise.Fo(r);
            });
        });
    }, t2.prototype.createCollectionParentIndex = function(t5, e8) {
        t5.createObjectStore(DbCollectionParent.store, {
            keyPath: DbCollectionParent.keyPath
        });
        var n = e8.store(DbCollectionParent.store), r = new __PRIVATE_MemoryCollectionParentIndex, i = function(t6) {
            if (r.add(t6)) {
                var e9 = t6.nt(), i1 = t6.Z();
                return n.put({
                    collectionId: e9,
                    parent: encode(i1)
                });
            }
        };
        return e8.store(DbRemoteDocument.store).lu({
            fu: !0
        }, function(t6, e10) {
            var n1 = new ResourcePath(t6);
            return i(n1.Z());
        }).next(function() {
            return e8.store(DbDocumentMutation.store).lu({
                fu: !0
            }, function(t6, e10) {
                t6[0];
                var n1 = t6[1], r1 = (t6[2], decode(n1));
                return i(r1.Z());
            });
        });
    }, t2;
}();
function __PRIVATE_sentinelKey(t2) {
    return [
        0,
        encode(t2)
    ];
}
var DbTimestamp = function(t2, e8) {
    this.seconds = t2, this.nanoseconds = e8;
}, DbPrimaryClient = function() {
    function t2(t5, e8, n) {
        this.ownerId = t5, this.allowTabSynchronization = e8, this.leaseTimestampMs = n;
    }
    return t2.store = "owner", t2.key = "owner", t2;
}();
function __PRIVATE_createPrimaryClientStore(t2) {
    t2.createObjectStore(DbPrimaryClient.store);
}
var DbMutationQueue = function() {
    function t2(t5, e8, n) {
        this.userId = t5, this.lastAcknowledgedBatchId = e8, this.lastStreamToken = n;
    }
    return t2.store = "mutationQueues", t2.keyPath = "userId", t2;
}(), DbMutationBatch = function() {
    function t2(t5, e8, n, r, i2) {
        this.userId = t5, this.batchId = e8, this.localWriteTimeMs = n, this.baseMutations = r, this.mutations = i2;
    }
    return t2.store = "mutations", t2.keyPath = "batchId", t2.userMutationsIndex = "userMutationsIndex", t2.userMutationsKeyPath = [
        "userId",
        "batchId"
    ], t2;
}();
function __PRIVATE_createMutationQueue(t2) {
    t2.createObjectStore(DbMutationQueue.store, {
        keyPath: DbMutationQueue.keyPath
    }), t2.createObjectStore(DbMutationBatch.store, {
        keyPath: DbMutationBatch.keyPath,
        autoIncrement: !0
    }).createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {
        unique: !0
    }), t2.createObjectStore(DbDocumentMutation.store);
}
function __PRIVATE_upgradeMutationBatchSchemaAndMigrateData(t2, e8) {
    return e8.store(DbMutationBatch.store)._u().next(function(n) {
        t2.deleteObjectStore(DbMutationBatch.store), t2.createObjectStore(DbMutationBatch.store, {
            keyPath: DbMutationBatch.keyPath,
            autoIncrement: !0
        }).createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {
            unique: !0
        });
        var r = e8.store(DbMutationBatch.store), i2 = n.map(function(t5) {
            return r.put(t5);
        });
        return PersistencePromise.Fo(i2);
    });
}
var DbDocumentMutation = function() {
    function t2() {
    }
    return t2.prefixForUser = function(t5) {
        return [
            t5
        ];
    }, t2.prefixForPath = function(t5, e8) {
        return [
            t5,
            encode(e8)
        ];
    }, t2.key = function(t5, e8, n) {
        return [
            t5,
            encode(e8),
            n
        ];
    }, t2.store = "documentMutations", t2.PLACEHOLDER = new t2, t2;
}();
function __PRIVATE_createRemoteDocumentCache(t2) {
    t2.createObjectStore(DbRemoteDocument.store);
}
var DbNoDocument = function(t2, e8) {
    this.path = t2, this.readTime = e8;
}, DbUnknownDocument = function(t2, e8) {
    this.path = t2, this.version = e8;
}, DbRemoteDocument = function() {
    function t2(t5, e8, n, r, i2, s) {
        this.unknownDocument = t5, this.noDocument = e8, this.document = n, this.hasCommittedMutations = r, this.readTime = i2, this.parentPath = s;
    }
    return t2.store = "remoteDocuments", t2.readTimeIndex = "readTimeIndex", t2.readTimeIndexPath = "readTime", t2.collectionReadTimeIndex = "collectionReadTimeIndex", t2.collectionReadTimeIndexPath = [
        "parentPath",
        "readTime"
    ], t2;
}(), DbRemoteDocumentGlobal = function() {
    function t2(t5) {
        this.byteSize = t5;
    }
    return t2.store = "remoteDocumentGlobal", t2.key = "remoteDocumentGlobalKey", t2;
}();
function __PRIVATE_createDocumentGlobalStore(t2) {
    t2.createObjectStore(DbRemoteDocumentGlobal.store);
}
<<<<<<< Updated upstream
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","./navigation-view.scss":"9VXEy","react-router-dom":"cpyQW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"9VXEy":[function() {},{}],"cx3Hi":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$18ef = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$18ef.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageSlideView", ()=>ImageSlideView
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _imageslideViewScss = require("./imageslide-view.scss");
var _twoTrucksPng = require("./TwoTrucks.png");
var _twoTrucksPngDefault = parcelHelpers.interopDefault(_twoTrucksPng);
var _willyBrandtPng = require("./WillyBrandt.png");
var _willyBrandtPngDefault = parcelHelpers.interopDefault(_willyBrandtPng);
var _corporateIdentityPng = require("./CorporateIdentity.png");
var _corporateIdentityPngDefault = parcelHelpers.interopDefault(_corporateIdentityPng);
var _reactMediumImageZoom = require("react-medium-image-zoom");
var _reactMediumImageZoomDefault = parcelHelpers.interopDefault(_reactMediumImageZoom);
var _stylesCss = require("react-medium-image-zoom/dist/styles.css");
var _reactImageGallery = require("react-image-gallery");
var _reactImageGalleryDefault = parcelHelpers.interopDefault(_reactImageGallery);
var _imageGalleryCss = require("react-image-gallery/styles/css/image-gallery.css");
const axios = require('axios');
class ImageSlideView extends _reactDefault.default.Component {
    constructor(){
        super();
        this.state = {
            slideDuration: 0,
            slideInterval: 3500,
            showGalleryPlayButton: false,
            showNav: false,
            showPlayButton: false,
            showBullets: false,
            infinite: true,
            showThumbnails: false,
            showFullscreenButton: false,
            showGalleryFullscreenButton: false,
            autoPlay: true,
            useTranslate3D: true,
            swipeThreshold: 0,
            lazyLoad: true,
            stopPropagation: false,
            clickedImage: null,
            isZoomed: true,
            fullscreen: false,
            imageIndex: 0
        };
    }
    _onImageClick(event) {
        let image = event.target.src;
        let index = this._imageGallery.getCurrentIndex();
        this.setState({
            clickedImage: image,
            isZoomed: true,
            fullscreen: true,
            imageIndex: index
=======
var DbTarget = function() {
    function t2(t5, e8, n, r, i2, s, o) {
        this.targetId = t5, this.canonicalId = e8, this.readTime = n, this.resumeToken = r, this.lastListenSequenceNumber = i2, this.lastLimboFreeSnapshotVersion = s, this.query = o;
    }
    return t2.store = "targets", t2.keyPath = "targetId", t2.queryTargetsIndexName = "queryTargetsIndex", t2.queryTargetsKeyPath = [
        "canonicalId",
        "targetId"
    ], t2;
}(), DbTargetDocument = function() {
    function t2(t5, e8, n) {
        this.targetId = t5, this.path = e8, this.sequenceNumber = n, assert(0 === t5 == ((void 0) !== n), "A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number");
    }
    return t2.store = "targetDocuments", t2.keyPath = [
        "targetId",
        "path"
    ], t2.documentTargetsIndex = "documentTargetsIndex", t2.documentTargetsKeyPath = [
        "path",
        "targetId"
    ], t2;
}(), DbTargetGlobal = function() {
    function t2(t5, e8, n, r) {
        this.highestTargetId = t5, this.highestListenSequenceNumber = e8, this.lastRemoteSnapshotVersion = n, this.targetCount = r;
    }
    return t2.key = "targetGlobalKey", t2.store = "targetGlobal", t2;
}(), DbCollectionParent = function() {
    function t2(t5, e8) {
        this.collectionId = t5, this.parent = e8;
    }
    return t2.store = "collectionParents", t2.keyPath = [
        "collectionId",
        "parent"
    ], t2;
}();
function __PRIVATE_createQueryCache(t2) {
    t2.createObjectStore(DbTargetDocument.store, {
        keyPath: DbTargetDocument.keyPath
    }).createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, {
        unique: !0
    }), t2.createObjectStore(DbTarget.store, {
        keyPath: DbTarget.keyPath
    }).createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, {
        unique: !0
    }), t2.createObjectStore(DbTargetGlobal.store);
}
function __PRIVATE_dropQueryCache(t2) {
    t2.deleteObjectStore(DbTargetDocument.store), t2.deleteObjectStore(DbTarget.store), t2.deleteObjectStore(DbTargetGlobal.store);
}
function __PRIVATE_dropRemoteDocumentChangesStore(t2) {
    t2.objectStoreNames.contains("remoteDocumentChanges") && t2.deleteObjectStore("remoteDocumentChanges");
}
function __PRIVATE_writeEmptyTargetGlobalEntry(t2) {
    var e8 = t2.store(DbTargetGlobal.store), n = new DbTargetGlobal(0, 0, __PRIVATE_SnapshotVersion.MIN.Y(), 0);
    return e8.put(DbTargetGlobal.key, n);
}
function __PRIVATE_createRemoteDocumentReadTimeIndex(t2) {
    var e8 = t2.objectStore(DbRemoteDocument.store);
    e8.createIndex(DbRemoteDocument.readTimeIndex, DbRemoteDocument.readTimeIndexPath, {
        unique: !1
    }), e8.createIndex(DbRemoteDocument.collectionReadTimeIndex, DbRemoteDocument.collectionReadTimeIndexPath, {
        unique: !1
    });
}
var DbClientMetadata = function() {
    function t2(t5, e8, n, r) {
        this.clientId = t5, this.updateTimeMs = e8, this.networkEnabled = n, this.inForeground = r;
    }
    return t2.store = "clientMetadata", t2.keyPath = "clientId", t2;
}();
function __PRIVATE_createClientMetadataStore(t2) {
    t2.createObjectStore(DbClientMetadata.store, {
        keyPath: DbClientMetadata.keyPath
    });
}
var V1_STORES = [
    DbMutationQueue.store,
    DbMutationBatch.store,
    DbDocumentMutation.store,
    DbRemoteDocument.store,
    DbTarget.store,
    DbPrimaryClient.store,
    DbTargetGlobal.store,
    DbTargetDocument.store
], V3_STORES = V1_STORES, V4_STORES = tslib.__spreadArrays(V3_STORES, [
    DbClientMetadata.store
]), V6_STORES = tslib.__spreadArrays(V4_STORES, [
    DbRemoteDocumentGlobal.store
]), V8_STORES = tslib.__spreadArrays(V6_STORES, [
    DbCollectionParent.store
]), ALL_STORES = V8_STORES, __PRIVATE_IndexedDbIndexManager = function() {
    function t2() {
        this.Vc = new __PRIVATE_MemoryCollectionParentIndex;
    }
    return t2.prototype.gu = function(t5, e8) {
        var n = this;
        if (assert(e8.length % 2 == 1, "Expected a collection path."), !this.Vc.has(e8)) {
            var r = e8.nt(), i2 = e8.Z();
            t5.Wo(function() {
                n.Vc.add(e8);
            });
            var s = {
                collectionId: r,
                parent: encode(i2)
            };
            return __PRIVATE_collectionParentsStore(t5).put(s);
        }
        return PersistencePromise.resolve();
    }, t2.prototype.oa = function(t5, e8) {
        var n = [], r = IDBKeyRange.bound([
            e8,
            ""
        ], [
            __PRIVATE_immediateSuccessor(e8),
            ""
        ], !1, !0);
        return __PRIVATE_collectionParentsStore(t5)._u(r).next(function(t6) {
            for(var r1 = 0, i3 = t6; r1 < i3.length; r1++){
                var s = i3[r1];
                if (s.collectionId !== e8) break;
                n.push(decode(s.parent));
            }
            return n;
>>>>>>> Stashed changes
        });
    }, t2;
}();
function __PRIVATE_collectionParentsStore(t2) {
    return __PRIVATE_IndexedDbPersistence.tu(t2, DbCollectionParent.store);
}
var LocalSerializer = function() {
    function t2(t5) {
        this.mc = t5;
    }
    return t2.prototype.lc = function(t5) {
        if (t5.document) return this.mc.pi(t5.document, !!t5.hasCommittedMutations);
        if (t5.noDocument) {
            var e8 = __PRIVATE_DocumentKey.Tt(t5.noDocument.path), n = this.vc(t5.noDocument.readTime);
            return new __PRIVATE_NoDocument(e8, n, {
                hasCommittedMutations: !!t5.hasCommittedMutations
            });
        }
        if (t5.unknownDocument) {
            e8 = __PRIVATE_DocumentKey.Tt(t5.unknownDocument.path), n = this.vc(t5.unknownDocument.version);
            return new __PRIVATE_UnknownDocument(e8, n);
        }
        return fail("Unexpected DbRemoteDocument");
    }, t2.prototype.Rc = function(t5, e10) {
        var n = this.fc(e10), r = t5.key.path.Z().st();
        if (t5 instanceof Document1) {
            var i3 = t5.proto ? t5.proto : this.mc.vi(t5), s = t5.hasCommittedMutations;
            return new DbRemoteDocument(null, null, i3, s, n, r);
        }
        if (t5 instanceof __PRIVATE_NoDocument) {
            var o = t5.key.path.st(), u = this.pc(t5.version);
            s = t5.hasCommittedMutations;
            return new DbRemoteDocument(null, new DbNoDocument(o, u), null, s, n, r);
        }
        if (t5 instanceof __PRIVATE_UnknownDocument) {
            o = t5.key.path.st();
            var a = this.pc(t5.version);
            return new DbRemoteDocument(new DbUnknownDocument(o, a), null, null, !0, n, r);
        }
        return fail("Unexpected MaybeDocument");
    }, t2.prototype.fc = function(t5) {
        var e10 = t5.Y();
        return [
            e10.seconds,
            e10.nanoseconds
        ];
    }, t2.prototype.dc = function(t5) {
        var e10 = new Timestamp(t5[0], t5[1]);
        return __PRIVATE_SnapshotVersion.q(e10);
    }, t2.prototype.pc = function(t5) {
        var e10 = t5.Y();
        return new DbTimestamp(e10.seconds, e10.nanoseconds);
    }, t2.prototype.vc = function(t5) {
        var e10 = new Timestamp(t5.seconds, t5.nanoseconds);
        return __PRIVATE_SnapshotVersion.q(e10);
    }, t2.prototype.bu = function(t5, e10) {
        var n = this, r = e10.baseMutations.map(function(t6) {
            return n.mc.Fi(t6);
        }), i4 = e10.mutations.map(function(t6) {
            return n.mc.Fi(t6);
        });
        return new DbMutationBatch(t5, e10.batchId, e10.ke.toMillis(), r, i4);
    }, t2.prototype.yu = function(t5) {
        var e10 = this, n = (t5.baseMutations || []).map(function(t6) {
            return e10.mc.Gi(t6);
        }), r = t5.mutations.map(function(t6) {
            return e10.mc.Gi(t6);
        }), i4 = Timestamp.fromMillis(t5.localWriteTimeMs);
        return new __PRIVATE_MutationBatch(t5.batchId, i4, n, r);
    }, t2.prototype.bc = function(t5) {
        var e10 = [];
        return t5.forEach(function(t6) {
            e10.push(encode(t6.path));
        }), e10;
    }, t2.prototype.gc = function(t5) {
        for(var e10 = __PRIVATE_documentKeySet(), n = 0, r = t5; n < r.length; n++){
            var i4 = r[n];
            e10 = e10.add(new __PRIVATE_DocumentKey(decode(i4)));
        }
        return e10;
    }, t2.prototype.ec = function(t5) {
        var e10, n = this.vc(t5.readTime), r = (void 0) !== t5.lastLimboFreeSnapshotVersion ? this.vc(t5.lastLimboFreeSnapshotVersion) : __PRIVATE_SnapshotVersion.MIN, i5 = t5.resumeToken;
        return e10 = __PRIVATE_isDocumentQuery(t5.query) ? this.mc.qi(t5.query) : this.mc.Hi(t5.query), new __PRIVATE_TargetData(e10, t5.targetId, __PRIVATE_TargetPurpose.yn, t5.lastListenSequenceNumber, n, r, i5);
    }, t2.prototype.nc = function(t5) {
        assert(__PRIVATE_TargetPurpose.yn === t5.Cn, "Only queries with purpose " + __PRIVATE_TargetPurpose.yn + " may be stored, got " + t5.Cn);
        var e10, n, r = this.pc(t5.On), i5 = this.pc(t5.lastLimboFreeSnapshotVersion);
        return e10 = t5.target.He() ? this.mc.ji(t5.target) : this.mc.Qi(t5.target), t5.resumeToken instanceof Uint8Array ? (assert(__PRIVATE_SimpleDb.zo(), "Persisting non-string stream tokens is only supported with mock persistence ."), n = t5.resumeToken.toString()) : n = t5.resumeToken, new DbTarget(t5.targetId, t5.target.canonicalId(), r, n, t5.sequenceNumber, i5, e10);
    }, t2;
}();
function __PRIVATE_isDocumentQuery(t2) {
    return (void 0) !== t2.documents;
}
var __PRIVATE_LOG_TAG$3 = "IndexedDbPersistence", __PRIVATE_MAX_CLIENT_AGE_MS = 1800000, __PRIVATE_MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000, __PRIVATE_CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000, __PRIVATE_PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = "Another tab has exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs.", __PRIVATE_UNSUPPORTED_PLATFORM_ERROR_MSG = "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.", __PRIVATE_ZOMBIED_CLIENTS_KEY_PREFIX = "firestore_zombie", __PRIVATE_IndexedDbTransaction = function(t2) {
    function e10(e11, n) {
        var r = t2.call(this) || this;
        return r.Bu = e11, r.xa = n, r;
    }
    return tslib.__extends(e10, t2), e10;
}(__PRIVATE_PersistenceTransaction), __PRIVATE_IndexedDbPersistence = function() {
    function t2(e10, n, r, i5, s, o, u, a) {
        if (this.allowTabSynchronization = e10, this.persistenceKey = n, this.clientId = r, this.wc = o, this.yc = a, this.Sc = !1, this.isPrimary = !1, this.networkEnabled = !0, this.Dc = null, this.inForeground = !1, this.Cc = null, this.Oc = null, this.Fc = Number.NEGATIVE_INFINITY, this.Nc = function(t5) {
            return Promise.resolve();
        }, this.Eu = new __PRIVATE_IndexedDbLruDelegate(this, s), this.Mc = n + t2.Lc, this.serializer = new LocalSerializer(u), this.document = i5.document, this.Va = new __PRIVATE_IndexedDbTargetCache(this.Eu, this.serializer), this.Tu = new __PRIVATE_IndexedDbIndexManager, this.Hu = new __PRIVATE_IndexedDbRemoteDocumentCache(this.serializer, this.Tu), !i5.window || !i5.window.localStorage) throw new FirestoreError(Code.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        this.window = i5.window, this.Gc = this.window.localStorage;
    }
    return t2.tu = function(t5, e10) {
        if (t5 instanceof __PRIVATE_IndexedDbTransaction) return __PRIVATE_SimpleDb.tu(t5.Bu, e10);
        throw fail("IndexedDbPersistence must use instances of IndexedDbTransaction");
    }, t2.Bc = function(e10) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        if (!t2.Xo()) throw new FirestoreError(Code.UNIMPLEMENTED, __PRIVATE_UNSUPPORTED_PLATFORM_ERROR_MSG);
                        return [
                            4,
                            (n = new t2(e10.allowTabSynchronization, e10.persistenceKey, e10.clientId, e10.platform, e10.Uc, e10.wc, e10.serializer, e10.yc)).start()
                        ];
                    case 1:
                        return r.sent(), [
                            2,
                            n
                        ];
                }
            });
        });
    }, t2.prototype.start = function() {
        var t5 = this;
        return assert(!this.Ea, "IndexedDbPersistence double-started!"), assert(null !== this.window, "Expected 'window' to be defined"), __PRIVATE_SimpleDb.Ho(this.Mc, SCHEMA_VERSION, new SchemaConverter(this.serializer)).then(function(e10) {
            return t5.kc = e10, t5.xc();
        }).then(function() {
            return t5.Kc(), t5.jc(), t5.qc(), t5.kc.runTransaction("readonly-idempotent", [
                DbTargetGlobal.store
            ], function(t6) {
                return __PRIVATE_getHighestListenSequenceNumber(t6);
            });
        }).then(function(e10) {
            t5.Qc = new __PRIVATE_ListenSequence(e10, t5.yc);
        }).then(function() {
            t5.Sc = !0;
        }).catch(function(e10) {
            return t5.kc && t5.kc.close(), Promise.reject(e10);
        });
    }, t2.prototype.Wc = function(t5) {
        var e10 = this;
        return this.Nc = function(n) {
            return tslib.__awaiter(e10, void 0, void 0, function() {
                return tslib.__generator(this, function(e11) {
                    return this.Ea ? [
                        2,
                        t5(n)
                    ] : [
                        2
                    ];
                });
            });
        }, t5(this.isPrimary);
    }, t2.prototype.$c = function(t5) {
        var e10 = this;
        this.kc.eu(function(n) {
            return tslib.__awaiter(e10, void 0, void 0, function() {
                return tslib.__generator(this, function(e11) {
                    switch(e11.label){
                        case 0:
                            return null !== n.newVersion ? [
                                3,
                                2
                            ] : [
                                4,
                                t5()
                            ];
                        case 1:
                            e11.sent(), e11.label = 2;
                        case 2:
                            return [
                                2
                            ];
                    }
                });
            });
        });
    }, t2.prototype.u_ = function(t5) {
        var e10 = this;
        this.networkEnabled !== t5 && (this.networkEnabled = t5, this.wc.Us(function() {
            return tslib.__awaiter(e10, void 0, void 0, function() {
                return tslib.__generator(this, function(t6) {
                    switch(t6.label){
                        case 0:
                            return this.Ea ? [
                                4,
                                this.xc()
                            ] : [
                                3,
                                2
                            ];
                        case 1:
                            t6.sent(), t6.label = 2;
                        case 2:
                            return [
                                2
                            ];
                    }
                });
            });
        }));
    }, t2.prototype.xc = function() {
        var t5 = this;
        return this.kc.runTransaction("readwrite-idempotent", ALL_STORES, function(e10) {
            return __PRIVATE_clientMetadataStore(e10).put(new DbClientMetadata(t5.clientId, Date.now(), t5.networkEnabled, t5.inForeground)).next(function() {
                if (t5.isPrimary) return t5.Yc(e10).next(function(e11) {
                    e11 || (t5.isPrimary = !1, t5.wc.Us(function() {
                        return t5.Nc(!1);
                    }));
                });
            }).next(function() {
                return t5.Hc(e10);
            }).next(function(n) {
                return t5.isPrimary && !n ? t5.Xc(e10).next(function() {
                    return !1;
                }) : !!n && t5.zc(e10).next(function() {
                    return !0;
                });
            });
        }).catch(function(e10) {
            if (!t5.allowTabSynchronization) throw e10;
            return debug(__PRIVATE_LOG_TAG$3, "Releasing owner lease after error during lease refresh", e10), !1;
        }).then(function(e10) {
            t5.isPrimary !== e10 && t5.wc.Us(function() {
                return t5.Nc(e10);
            }), t5.isPrimary = e10;
        });
    }, t2.prototype.Yc = function(t5) {
        var e10 = this;
        return __PRIVATE_primaryClientStore(t5).get(DbPrimaryClient.key).next(function(t6) {
            return PersistencePromise.resolve(e10.Jc(t6));
        });
    }, t2.prototype.Zc = function(t5) {
        return __PRIVATE_clientMetadataStore(t5).delete(this.clientId);
    }, t2.prototype.th = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e10 = this;
            return tslib.__generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return !this.isPrimary || this.eh(this.Fc, __PRIVATE_MAX_CLIENT_AGE_MS) ? [
                            3,
                            2
                        ] : (this.Fc = Date.now(), [
                            4,
                            this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary-idempotent", function(n1) {
                                var r = t2.tu(n1, DbClientMetadata.store);
                                return r._u().next(function(t5) {
                                    var n2 = e10.nh(t5, __PRIVATE_MAX_CLIENT_AGE_MS), i5 = t5.filter(function(t6) {
                                        return -1 === n2.indexOf(t6);
                                    });
                                    return PersistencePromise.forEach(i5, function(t6) {
                                        return r.delete(t6.clientId);
                                    }).next(function() {
                                        return i5;
                                    });
                                });
                            }).catch(function() {
                                return [];
                            })
                        ]);
                    case 1:
                        n.sent().forEach(function(t5) {
                            e10.window.localStorage.removeItem(e10.rh(t5.clientId));
                        }), n.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.qc = function() {
        var t5 = this;
        this.Oc = this.wc.Js(__PRIVATE_TimerId.ws, __PRIVATE_CLIENT_METADATA_REFRESH_INTERVAL_MS, function() {
            return t5.xc().then(function() {
                return t5.th();
            }).then(function() {
                return t5.qc();
            });
        });
    }, t2.prototype.Jc = function(t5) {
        return !!t5 && t5.ownerId === this.clientId;
    }, t2.prototype.Hc = function(t5) {
        var e10 = this;
        return __PRIVATE_primaryClientStore(t5).get(DbPrimaryClient.key).next(function(n) {
            if (null !== n && e10.eh(n.leaseTimestampMs, __PRIVATE_MAX_PRIMARY_ELIGIBLE_AGE_MS) && !e10.ih(n.ownerId)) {
                if (e10.Jc(n) && e10.networkEnabled) return !0;
                if (!e10.Jc(n)) {
                    if (!n.allowTabSynchronization) throw new FirestoreError(Code.FAILED_PRECONDITION, __PRIVATE_PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
                    return !1;
                }
            }
            return !(!e10.networkEnabled || !e10.inForeground) || __PRIVATE_clientMetadataStore(t5)._u().next(function(t6) {
                return (void 0) === e10.nh(t6, __PRIVATE_MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function(t7) {
                    if (e10.clientId !== t7.clientId) {
                        var n1 = !e10.networkEnabled && t7.networkEnabled, r = !e10.inForeground && t7.inForeground, i5 = e10.networkEnabled === t7.networkEnabled;
                        if (n1 || r && i5) return !0;
                    }
                    return !1;
                });
            });
        }).next(function(t6) {
            return e10.isPrimary !== t6 && debug(__PRIVATE_LOG_TAG$3, "Client " + (t6 ? "is" : "is not") + " eligible for a primary lease."), t6;
        });
    }, t2.prototype.shutdown = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5 = this;
            return tslib.__generator(this, function(e10) {
                switch(e10.label){
                    case 0:
                        return this.Sc = !1, this.sh(), this.Oc && (this.Oc.cancel(), this.Oc = null), this.oh(), this.uh(), [
                            4,
                            this.kc.runTransaction("readwrite-idempotent", [
                                DbPrimaryClient.store,
                                DbClientMetadata.store
                            ], function(e11) {
                                return t5.Xc(e11).next(function() {
                                    return t5.Zc(e11);
                                });
                            })
                        ];
                    case 1:
                        return e10.sent(), this.kc.close(), this.ah(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.nh = function(t5, e10) {
        var n2 = this;
        return t5.filter(function(t6) {
            return n2.eh(t6.updateTimeMs, e10) && !n2.ih(t6.clientId);
        });
    }, t2.prototype.s_ = function() {
        var t5 = this;
        return this.kc.runTransaction("readonly-idempotent", [
            DbClientMetadata.store
        ], function(e10) {
            return __PRIVATE_clientMetadataStore(e10)._u().next(function(e11) {
                return t5.nh(e11, __PRIVATE_MAX_CLIENT_AGE_MS).map(function(t6) {
                    return t6.clientId;
                });
            });
        });
    }, t2.clearPersistence = function(e10) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n2;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return t2.Xo() ? (n2 = e10 + t2.Lc, [
                            4,
                            __PRIVATE_SimpleDb.delete(n2)
                        ]) : [
                            2,
                            Promise.resolve()
                        ];
                    case 1:
                        return r.sent(), [
                            2
                        ];
                }
            });
        });
    }, Object.defineProperty(t2.prototype, "Ea", {
        get: function() {
            return this.Sc;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.Aa = function(t5) {
        return assert(this.Ea, "Cannot initialize MutationQueue before persistence is started."), __PRIVATE_IndexedDbMutationQueue.Au(t5, this.serializer, this.Tu, this.Eu);
    }, t2.prototype.ma = function() {
        return assert(this.Ea, "Cannot initialize TargetCache before persistence is started."), this.Va;
    }, t2.prototype.Ia = function() {
        return assert(this.Ea, "Cannot initialize RemoteDocumentCache before persistence is started."), this.Hu;
    }, t2.prototype.pa = function() {
        return assert(this.Ea, "Cannot initialize IndexManager before persistence is started."), this.Tu;
    }, t2.prototype.runTransaction = function(t5, e10, n2) {
        var r = this;
        debug(__PRIVATE_LOG_TAG$3, "Starting transaction:", t5);
        var i6, s = e10.endsWith("idempotent"), o = e10.startsWith("readonly") ? s ? "readonly-idempotent" : "readonly" : s ? "readwrite-idempotent" : "readwrite";
        return this.kc.runTransaction(o, ALL_STORES, function(s1) {
            return i6 = new __PRIVATE_IndexedDbTransaction(s1, r.Qc.next()), "readwrite-primary" === e10 || "readwrite-primary-idempotent" === e10 ? r.Yc(s1).next(function(t6) {
                return !!t6 || r.Hc(s1);
            }).next(function(e11) {
                if (!e11) throw error("Failed to obtain primary lease for action '" + t5 + "'."), r.isPrimary = !1, r.wc.Us(function() {
                    return r.Nc(!1);
                }), new FirestoreError(Code.FAILED_PRECONDITION, __PRIVATE_PRIMARY_LEASE_LOST_ERROR_MSG);
                return n2(i6);
            }).next(function(t6) {
                return r.zc(s1).next(function() {
                    return t6;
                });
            }) : r._h(s1).next(function() {
                return n2(i6);
            });
        }).then(function(t6) {
            return i6.$o(), t6;
        });
    }, t2.prototype._h = function(t5) {
        var e10 = this;
        return __PRIVATE_primaryClientStore(t5).get(DbPrimaryClient.key).next(function(t6) {
            if (null !== t6 && e10.eh(t6.leaseTimestampMs, __PRIVATE_MAX_PRIMARY_ELIGIBLE_AGE_MS) && !e10.ih(t6.ownerId) && !e10.Jc(t6) && !t6.allowTabSynchronization) throw new FirestoreError(Code.FAILED_PRECONDITION, __PRIVATE_PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
        });
    }, t2.prototype.zc = function(t5) {
        var e10 = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
        return __PRIVATE_primaryClientStore(t5).put(DbPrimaryClient.key, e10);
    }, t2.Xo = function() {
        return __PRIVATE_SimpleDb.Xo();
    }, t2.hh = function(t5) {
        var e10 = t5.o.projectId;
        return t5.o.u || (e10 += "." + t5.o.database), "firestore/" + t5.persistenceKey + "/" + e10 + "/";
    }, t2.prototype.Xc = function(t5) {
        var e10 = this, n2 = __PRIVATE_primaryClientStore(t5);
        return n2.get(DbPrimaryClient.key).next(function(t6) {
            return e10.Jc(t6) ? (debug(__PRIVATE_LOG_TAG$3, "Releasing primary lease."), n2.delete(DbPrimaryClient.key)) : PersistencePromise.resolve();
        });
    }, t2.prototype.eh = function(t5, e10) {
        var n2 = Date.now();
        return !(t5 < n2 - e10) && (!(t5 > n2) || (error("Detected an update time that is in the future: " + t5 + " > " + n2), !1));
    }, t2.prototype.Kc = function() {
        var t5 = this;
        null !== this.document && "function" == typeof this.document.addEventListener && (this.Cc = function() {
            t5.wc.Us(function() {
                return t5.inForeground = "visible" === t5.document.visibilityState, t5.xc();
            });
        }, this.document.addEventListener("visibilitychange", this.Cc), this.inForeground = "visible" === this.document.visibilityState);
    }, t2.prototype.oh = function() {
        this.Cc && (assert(null !== this.document && "function" == typeof this.document.addEventListener, "Expected 'document.addEventListener' to be a function"), this.document.removeEventListener("visibilitychange", this.Cc), this.Cc = null);
    }, t2.prototype.jc = function() {
        var t5 = this;
        "function" == typeof this.window.addEventListener && (this.Dc = function() {
            t5.sh(), t5.wc.Us(function() {
                return t5.shutdown();
            });
        }, this.window.addEventListener("unload", this.Dc));
    }, t2.prototype.uh = function() {
        this.Dc && (assert("function" == typeof this.window.removeEventListener, "Expected 'window.removeEventListener' to be a function"), this.window.removeEventListener("unload", this.Dc), this.Dc = null);
    }, t2.prototype.ih = function(t5) {
        try {
            var e10 = null !== this.Gc.getItem(this.rh(t5));
            return debug(__PRIVATE_LOG_TAG$3, "Client '" + t5 + "' " + (e10 ? "is" : "is not") + " zombied in LocalStorage"), e10;
        } catch (t6) {
            return error(__PRIVATE_LOG_TAG$3, "Failed to get zombied client id.", t6), !1;
        }
    }, t2.prototype.sh = function() {
        try {
            this.Gc.setItem(this.rh(this.clientId), String(Date.now()));
        } catch (t5) {
            error("Failed to set zombie client id.", t5);
        }
    }, t2.prototype.ah = function() {
        try {
            this.Gc.removeItem(this.rh(this.clientId));
        } catch (t5) {
        }
    }, t2.prototype.rh = function(t5) {
        return __PRIVATE_ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + t5;
    }, t2.Lc = "main", t2;
}();
function __PRIVATE_primaryClientStore(t2) {
    return t2.store(DbPrimaryClient.store);
}
function __PRIVATE_clientMetadataStore(t2) {
    return t2.store(DbClientMetadata.store);
}
var __PRIVATE_IndexedDbLruDelegate = function() {
    function t2(t5, e10) {
        this.db = t5, this.fh = null, this.O_ = new __PRIVATE_LruGarbageCollector(this, e10);
    }
    return t2.prototype.U_ = function(t5) {
        var e10 = this.lh(t5);
        return this.db.ma().rc(t5).next(function(t6) {
            return e10.next(function(e11) {
                return t6 + e11;
            });
        });
    }, t2.prototype.lh = function(t5) {
        var e10 = 0;
        return this.x_(t5, function(t6) {
            e10++;
        }).next(function() {
            return e10;
        });
    }, t2.prototype.Ur = function(t5, e10) {
        return this.db.ma().Ur(t5, e10);
    }, t2.prototype.x_ = function(t5, e10) {
        return this.dh(t5, function(t6, n2) {
            return e10(n2);
        });
    }, t2.prototype.Pa = function(t5) {
        this.fh = t5;
    }, t2.prototype.fo = function(t5, e10) {
        return __PRIVATE_writeSentinelKey(t5, e10);
    }, t2.prototype.do = function(t5, e10) {
        return __PRIVATE_writeSentinelKey(t5, e10);
    }, t2.prototype.K_ = function(t5, e10, n2) {
        return this.db.ma().K_(t5, e10, n2);
    }, t2.prototype.ku = function(t5, e10) {
        return __PRIVATE_writeSentinelKey(t5, e10);
    }, t2.prototype.Th = function(t5, e10) {
        return this.fh.Io(e10) ? PersistencePromise.resolve(!0) : __PRIVATE_mutationQueuesContainKey(t5, e10);
    }, t2.prototype.j_ = function(t5, e10) {
        var n2 = this, r = this.db.Ia().Fa(), i6 = [], s = 0;
        return this.dh(t5, function(o, u) {
            if (u <= e10) {
                var a = n2.Th(t5, o).next(function(e11) {
                    if (!e11) return s++, r.xo(t5, o).next(function() {
                        return r.ko(o), __PRIVATE_documentTargetStore(t5).delete(__PRIVATE_sentinelKey$1(o));
                    });
                });
                i6.push(a);
            }
        }).next(function() {
            return PersistencePromise.Fo(i6);
        }).next(function() {
            return r.apply(t5);
        }).next(function() {
            return s;
        });
    }, t2.prototype.removeTarget = function(t5, e10) {
        var n2 = e10.Fn(t5.xa);
        return this.db.ma().ja(t5, n2);
    }, t2.prototype.qa = function(t5, e10) {
        return __PRIVATE_writeSentinelKey(t5, e10);
    }, t2.prototype.dh = function(t5, e10) {
        var n2, r = __PRIVATE_documentTargetStore(t5), i6 = __PRIVATE_ListenSequence.Is;
        return r.lu({
            index: DbTargetDocument.documentTargetsIndex
        }, function(t6, r1) {
            var s = t6[0], o = (t6[1], r1.path), u = r1.sequenceNumber;
            0 === s ? (i6 !== __PRIVATE_ListenSequence.Is && e10(new __PRIVATE_DocumentKey(decode(n2)), i6), i6 = u, n2 = o) : i6 = __PRIVATE_ListenSequence.Is;
        }).next(function() {
            i6 !== __PRIVATE_ListenSequence.Is && e10(new __PRIVATE_DocumentKey(decode(n2)), i6);
        });
    }, t2.prototype.q_ = function(t5) {
        return this.db.Ia().Ec(t5);
    }, t2;
}();
function __PRIVATE_sentinelKey$1(t2) {
    return [
        0,
        encode(t2.path)
    ];
}
function __PRIVATE_sentinelRow(t2, e10) {
    return new DbTargetDocument(0, encode(t2.path), e10);
}
function __PRIVATE_writeSentinelKey(t2, e10) {
    return __PRIVATE_documentTargetStore(t2).put(__PRIVATE_sentinelRow(e10, t2.xa));
}
var __PRIVATE_IndexFreeQueryEngine = function() {
    function t2() {
    }
    return t2.prototype.ba = function(t5) {
        this.Eh = t5;
    }, t2.prototype.na = function(t5, e10, n2, r) {
        var i6 = this;
        return assert((void 0) !== this.Eh, "setLocalDocumentsView() not called"), e10.dn() ? this.Ph(t5, e10) : n2.isEqual(__PRIVATE_SnapshotVersion.MIN) ? this.Ph(t5, e10) : this.Eh.ta(t5, r).next(function(s) {
            var o = i6.Ah(e10, s);
            return (e10.Vn() || e10.mn()) && i6.Rh(e10.Ze, o, r, n2) ? i6.Ph(t5, e10) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && debug("IndexFreeQueryEngine", "Re-using previous result from %s to execute query: %s", n2.toString(), e10.toString()), i6.Eh.na(t5, e10, n2).next(function(t6) {
                return o.forEach(function(e11) {
                    t6 = t6.Pt(e11.key, e11);
                }), t6;
            }));
        });
    }, t2.prototype.Ah = function(t5, e10) {
        var n2 = new __PRIVATE_SortedSet(function(e11, n3) {
            return t5.En(e11, n3);
        });
        return e10.forEach(function(e11, r) {
            r instanceof Document1 && t5.matches(r) && (n2 = n2.add(r));
        }), n2;
    }, t2.prototype.Rh = function(t5, e10, n2, r) {
        if (n2.size !== e10.size) return !0;
        var i6 = t5 === __PRIVATE_LimitType.Xe ? e10.last() : e10.first();
        return !!i6 && (i6.hasPendingWrites || i6.version._(r) > 0);
    }, t2.prototype.Ph = function(t5, e10) {
        return __PRIVATE_getLogLevel() <= LogLevel.DEBUG && debug("IndexFreeQueryEngine", "Using full collection scan to execute query: %s", e10.toString()), this.Eh.na(t5, e10, __PRIVATE_SnapshotVersion.MIN);
    }, t2;
}(), __PRIVATE_MemoryMutationQueue = function() {
    function t2(t5, e10) {
        this.Tu = t5, this.Eu = e10, this.Xu = [], this.Ih = 1, this.lastStreamToken = __PRIVATE_emptyByteString(), this.Vh = new __PRIVATE_SortedSet(__PRIVATE_DocReference.je);
    }
    return t2.prototype.Ru = function(t5) {
        return PersistencePromise.resolve(0 === this.Xu.length);
    }, t2.prototype.Iu = function(t5, e10, n2) {
        var r = e10.batchId, i6 = this.mh(r, "acknowledged");
        assert(0 === i6, "Can only acknowledge the first batch in the mutation queue");
        var s = this.Xu[i6];
        return assert(r === s.batchId, "Queue ordering failure: expected batch " + r + ", got batch " + s.batchId), this.lastStreamToken = n2, PersistencePromise.resolve();
    }, t2.prototype.mu = function(t5) {
        return PersistencePromise.resolve(this.lastStreamToken);
    }, t2.prototype.vu = function(t5, e10) {
        return this.lastStreamToken = e10, PersistencePromise.resolve();
    }, t2.prototype.pu = function(t5, e10, n2, r) {
        assert(0 !== r.length, "Mutation batches should not be empty");
        var i6 = this.Ih;
        (this.Ih++, this.Xu.length > 0) && assert(this.Xu[this.Xu.length - 1].batchId < i6, "Mutation batchIDs must be monotonically increasing order");
        var s = new __PRIVATE_MutationBatch(i6, e10, n2, r);
        this.Xu.push(s);
        for(var o = 0, u = r; o < u.length; o++){
            var a = u[o];
            this.Vh = this.Vh.add(new __PRIVATE_DocReference(a.key, i6)), this.Tu.gu(t5, a.key.path.Z());
        }
        return PersistencePromise.resolve(s);
    }, t2.prototype.wu = function(t5, e10) {
        return PersistencePromise.resolve(this.vh(e10));
    }, t2.prototype.Su = function(t5, e10) {
        var n2 = this.vh(e10);
        return assert(null != n2, "Failed to find local mutation batch."), PersistencePromise.resolve(n2.keys());
    }, t2.prototype.Du = function(t5, e10) {
        var n2 = e10 + 1, r = this.ph(n2), i6 = r < 0 ? 0 : r;
        return PersistencePromise.resolve(this.Xu.length > i6 ? this.Xu[i6] : null);
    }, t2.prototype.Cu = function() {
        return PersistencePromise.resolve(0 === this.Xu.length ? __PRIVATE_BATCHID_UNKNOWN : this.Ih - 1);
    }, t2.prototype.Ou = function(t5) {
        return PersistencePromise.resolve(this.Xu.slice());
    }, t2.prototype.Fu = function(t5, e10) {
        var n2 = this, r = new __PRIVATE_DocReference(e10, 0), i6 = new __PRIVATE_DocReference(e10, Number.POSITIVE_INFINITY), s = [];
        return this.Vh.qt([
            r,
            i6
        ], function(t6) {
            assert(e10.isEqual(t6.key), "Should only iterate over a single key's batches");
            var r1 = n2.vh(t6.Vo);
            assert(null !== r1, "Batches in the index must exist in the main table"), s.push(r1);
        }), PersistencePromise.resolve(s);
    }, t2.prototype.Nu = function(t5, e10) {
        var n2 = this, r = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator);
        return e10.forEach(function(t6) {
            var e11 = new __PRIVATE_DocReference(t6, 0), i6 = new __PRIVATE_DocReference(t6, Number.POSITIVE_INFINITY);
            n2.Vh.qt([
                e11,
                i6
            ], function(e12) {
                assert(t6.isEqual(e12.key), "For each key, should only iterate over a single key's batches"), r = r.add(e12.Vo);
            });
        }), PersistencePromise.resolve(this.bh(r));
    }, t2.prototype.Lu = function(t5, e10) {
        assert(!e10.pn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        var n2 = e10.path, r = n2.length + 1, i6 = n2;
        __PRIVATE_DocumentKey.lt(i6) || (i6 = i6.child(""));
        var s = new __PRIVATE_DocReference(new __PRIVATE_DocumentKey(i6), 0), o = new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator);
        return this.Vh.Qt(function(t6) {
            var e11 = t6.key.path;
            return !!n2.rt(e11) && (e11.length === r && (o = o.add(t6.Vo)), !0);
        }, s), PersistencePromise.resolve(this.bh(o));
    }, t2.prototype.bh = function(t5) {
        var e10 = this, n2 = [];
        return t5.forEach(function(t6) {
            var r = e10.vh(t6);
            null !== r && n2.push(r);
        }), n2;
    }, t2.prototype.Gu = function(t5, e10) {
        var n2 = this;
        assert(0 === this.mh(e10.batchId, "removed"), "Can only remove the first entry of the mutation queue"), this.Xu.shift();
        var r = this.Vh;
        return PersistencePromise.forEach(e10.mutations, function(i6) {
            var s = new __PRIVATE_DocReference(i6.key, e10.batchId);
            return r = r.delete(s), n2.Eu.ku(t5, i6.key);
        }).next(function() {
            n2.Vh = r;
        });
    }, t2.prototype.Uu = function(t5) {
    }, t2.prototype.Io = function(t5, e10) {
        var n2 = new __PRIVATE_DocReference(e10, 0), r = this.Vh.Wt(n2);
        return PersistencePromise.resolve(e10.isEqual(r && r.key));
    }, t2.prototype.xu = function(t5) {
        return 0 === this.Xu.length && assert(this.Vh.tt(), "Document leak -- detected dangling mutation references when queue is empty."), PersistencePromise.resolve();
    }, t2.prototype.mh = function(t5, e10) {
        var n2 = this.ph(t5);
        return assert(n2 >= 0 && n2 < this.Xu.length, "Batches must exist to be " + e10), n2;
    }, t2.prototype.ph = function(t5) {
        return 0 === this.Xu.length ? 0 : t5 - this.Xu[0].batchId;
    }, t2.prototype.vh = function(t5) {
        var e10 = this.ph(t5);
        if (e10 < 0 || e10 >= this.Xu.length) return null;
        var n2 = this.Xu[e10];
        return assert(n2.batchId === t5, "If found batch must match"), n2;
    }, t2;
}();
function __PRIVATE_documentEntryMap() {
    return new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
}
var __PRIVATE_PersistentStreamState, __PRIVATE_MemoryRemoteDocumentCache = function() {
    function t2(t5, e10) {
        this.Tu = t5, this.gh = e10, this.docs = __PRIVATE_documentEntryMap(), this.size = 0;
    }
    return t2.prototype.Bo = function(t5, e10, n2) {
        assert(!n2.isEqual(__PRIVATE_SnapshotVersion.MIN), "Cannot add a document with a read time of zero");
        var r = e10.key, i6 = this.docs.get(r), s = i6 ? i6.size : 0, o = this.gh(e10);
        return this.docs = this.docs.Pt(r, {
            uc: e10,
            size: o,
            readTime: n2
        }), this.size += o - s, this.Tu.gu(t5, r.path.Z());
    }, t2.prototype.ko = function(t5) {
        var e10 = this.docs.get(t5);
        e10 && (this.docs = this.docs.remove(t5), this.size -= e10.size);
    }, t2.prototype.xo = function(t5, e10) {
        var n2 = this.docs.get(e10);
        return PersistencePromise.resolve(n2 ? n2.uc : null);
    }, t2.prototype.getEntries = function(t5, e10) {
        var n2 = this, r = __PRIVATE_nullableMaybeDocumentMap();
        return e10.forEach(function(t6) {
            var e11 = n2.docs.get(t6);
            r = r.Pt(t6, e11 ? e11.uc : null);
        }), PersistencePromise.resolve(r);
    }, t2.prototype.na = function(t5, e10, n2) {
        assert(!e10.pn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        for(var r = __PRIVATE_documentMap(), i6 = new __PRIVATE_DocumentKey(e10.path.child("")), s = this.docs.bt(i6); s.Ct();){
            var o = s.Dt(), u = o.key, a = o.value, _ = a.uc, c = a.readTime;
            if (!e10.path.rt(u.path)) break;
            c._(n2) <= 0 || _ instanceof Document1 && e10.matches(_) && (r = r.Pt(_.key, _));
        }
        return PersistencePromise.resolve(r);
    }, t2.prototype.wh = function(t5, e10) {
        return PersistencePromise.forEach(this.docs, function(t6) {
            return e10(t6);
        });
    }, t2.prototype.h_ = function(t5, e10) {
        throw new Error("getNewDocumentChanges() is not supported with MemoryPersistence");
    }, t2.prototype.l_ = function(t5) {
        return PersistencePromise.resolve(__PRIVATE_SnapshotVersion.MIN);
    }, t2.prototype.Fa = function(e10) {
        return new t2.Tc(this);
    }, t2.prototype.Ec = function(t5) {
        return PersistencePromise.resolve(this.size);
    }, t2.Tc = (function(t5) {
        function e10(e11) {
            var n2 = t5.call(this) || this;
            return n2.Pc = e11, n2;
        }
        return tslib.__extends(e10, t5), e10.prototype.qo = function(t6) {
            var e11 = this, n2 = [];
            return this.Mo.forEach(function(r, i6) {
                i6 ? n2.push(e11.Pc.Bo(t6, i6, e11.readTime)) : e11.Pc.ko(r);
            }), PersistencePromise.Fo(n2);
        }, e10.prototype.Ko = function(t6, e11) {
            return this.Pc.xo(t6, e11);
        }, e10.prototype.jo = function(t6, e11) {
            return this.Pc.getEntries(t6, e11);
        }, e10;
    })(__PRIVATE_RemoteDocumentChangeBuffer), t2;
}(), __PRIVATE_MemoryTargetCache = function() {
    function t2(t5) {
        this.persistence = t5, this.yh = new __PRIVATE_ObjectMap(function(t6) {
            return t6.canonicalId();
        }), this.lastRemoteSnapshotVersion = __PRIVATE_SnapshotVersion.MIN, this.highestTargetId = 0, this.Sh = 0, this.Dh = new __PRIVATE_ReferenceSet, this.targetCount = 0, this.W_ = __PRIVATE_TargetIdGenerator.$u();
    }
    return t2.prototype.Ur = function(t5, e10) {
        return this.yh.forEach(function(t6, n2) {
            return e10(n2);
        }), PersistencePromise.resolve();
    }, t2.prototype.Ga = function(t5) {
        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
    }, t2.prototype.X_ = function(t5) {
        return PersistencePromise.resolve(this.Sh);
    }, t2.prototype.Ja = function(t5) {
        var e10 = this.W_.after(this.highestTargetId);
        return this.highestTargetId = e10, PersistencePromise.resolve(e10);
    }, t2.prototype.Qa = function(t5, e10, n2) {
        return n2 && (this.lastRemoteSnapshotVersion = n2), e10 > this.Sh && (this.Sh = e10), PersistencePromise.resolve();
    }, t2.prototype.z_ = function(t5) {
        this.yh.set(t5.target, t5);
        var e10 = t5.targetId;
        e10 > this.highestTargetId && (this.highestTargetId = e10), t5.sequenceNumber > this.Sh && (this.Sh = t5.sequenceNumber);
    }, t2.prototype.Za = function(t5, e10) {
        return assert(!this.yh.has(e10.target), "Adding a target that already exists"), this.z_(e10), this.targetCount += 1, PersistencePromise.resolve();
    }, t2.prototype.ja = function(t5, e10) {
        return assert(this.yh.has(e10.target), "Updating a non-existent target"), this.z_(e10), PersistencePromise.resolve();
    }, t2.prototype.Z_ = function(t5, e10) {
        return assert(this.targetCount > 0, "Removing a target from an empty cache"), assert(this.yh.has(e10.target), "Removing a non-existent target from the cache"), this.yh.delete(e10.target), this.Dh.Po(e10.targetId), this.targetCount -= 1, PersistencePromise.resolve();
    }, t2.prototype.K_ = function(t5, e10, n2) {
        var r = this, i6 = 0, s = [];
        return this.yh.forEach(function(o, u) {
            u.sequenceNumber <= e10 && null === n2.get(u.targetId) && (r.yh.delete(o), s.push(r.tc(t5, u.targetId)), i6++);
        }), PersistencePromise.Fo(s).next(function() {
            return i6;
        });
    }, t2.prototype.rc = function(t5) {
        return PersistencePromise.resolve(this.targetCount);
    }, t2.prototype.za = function(t5, e10) {
        var n2 = this.yh.get(e10) || null;
        return PersistencePromise.resolve(n2);
    }, t2.prototype.Xr = function(t5, e10) {
        return fail("Not yet implemented.");
    }, t2.prototype.ka = function(t5, e10, n2) {
        this.Dh.lo(e10, n2);
        var r = this.persistence.Eu, i6 = [];
        return r && e10.forEach(function(e11) {
            i6.push(r.fo(t5, e11));
        }), PersistencePromise.Fo(i6);
    }, t2.prototype.Ua = function(t5, e10, n2) {
        this.Dh.Eo(e10, n2);
        var r = this.persistence.Eu, i6 = [];
        return r && e10.forEach(function(e11) {
            i6.push(r.do(t5, e11));
        }), PersistencePromise.Fo(i6);
    }, t2.prototype.tc = function(t5, e10) {
        return this.Dh.Po(e10), PersistencePromise.resolve();
    }, t2.prototype.n_ = function(t5, e10) {
        var n2 = this.Dh.Ro(e10);
        return PersistencePromise.resolve(n2);
    }, t2.prototype.Io = function(t5, e10) {
        return PersistencePromise.resolve(this.Dh.Io(e10));
    }, t2;
}(), __PRIVATE_LOG_TAG$4 = "MemoryPersistence", __PRIVATE_MemoryPersistence = function() {
    function t2(t5, e10) {
        var n2 = this;
        this.clientId = t5, this.Ch = {
        }, this.Qc = new __PRIVATE_ListenSequence(0), this.Sc = !1, this.Sc = !0, this.Eu = e10(this), this.Va = new __PRIVATE_MemoryTargetCache(this);
        this.Tu = new __PRIVATE_MemoryIndexManager, this.Hu = new __PRIVATE_MemoryRemoteDocumentCache(this.Tu, function(t6) {
            return n2.Eu.Oh(t6);
        });
    }
    return t2.Fh = function(e10, n2) {
        return new t2(e10, function(t5) {
            return new __PRIVATE_MemoryLruDelegate(t5, n2);
        });
    }, t2.Nh = function(e10) {
        return new t2(e10, function(t5) {
            return new __PRIVATE_MemoryEagerDelegate(t5);
        });
    }, t2.prototype.shutdown = function() {
        return this.Sc = !1, Promise.resolve();
    }, Object.defineProperty(t2.prototype, "Ea", {
        get: function() {
            return this.Sc;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.s_ = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                return [
                    2,
                    [
                        this.clientId
                    ]
                ];
            });
        });
    }, t2.prototype.Wc = function(t5) {
        return t5(!0);
    }, t2.prototype.$c = function() {
    }, t2.prototype.u_ = function(t5) {
    }, t2.prototype.pa = function() {
        return this.Tu;
    }, t2.prototype.Aa = function(t5) {
        var e10 = this.Ch[t5.I()];
        return e10 || (e10 = new __PRIVATE_MemoryMutationQueue(this.Tu, this.Eu), this.Ch[t5.I()] = e10), e10;
    }, t2.prototype.ma = function() {
        return this.Va;
    }, t2.prototype.Ia = function() {
        return this.Hu;
    }, t2.prototype.runTransaction = function(t5, e10, n2) {
        var r = this;
        debug(__PRIVATE_LOG_TAG$4, "Starting transaction:", t5);
        var i6 = new __PRIVATE_MemoryTransaction(this.Qc.next());
        return this.Eu.Mh(), n2(i6).next(function(t6) {
            return r.Eu.Lh(i6).next(function() {
                return t6;
            });
        }).Co().then(function(t6) {
            return i6.$o(), t6;
        });
    }, t2.prototype.Gh = function(t5, e10) {
        return PersistencePromise.No(values(this.Ch).map(function(n2) {
            return function() {
                return n2.Io(t5, e10);
            };
        }));
    }, t2;
}(), __PRIVATE_MemoryTransaction = function(t2) {
    function e10(e11) {
        var n2 = t2.call(this) || this;
        return n2.xa = e11, n2;
    }
    return tslib.__extends(e10, t2), e10;
}(__PRIVATE_PersistenceTransaction), __PRIVATE_MemoryEagerDelegate = function() {
    function t2(t5) {
        this.persistence = t5, this.fh = null, this.Bh = null;
    }
    return Object.defineProperty(t2.prototype, "Uh", {
        get: function() {
            if (this.Bh) return this.Bh;
            throw fail("orphanedDocuments is only valid during a transaction.");
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.Pa = function(t5) {
        this.fh = t5;
    }, t2.prototype.fo = function(t5, e10) {
        return this.Uh.delete(e10), PersistencePromise.resolve();
    }, t2.prototype.do = function(t5, e10) {
        return this.Uh.add(e10), PersistencePromise.resolve();
    }, t2.prototype.ku = function(t5, e10) {
        return this.Uh.add(e10), PersistencePromise.resolve();
    }, t2.prototype.removeTarget = function(t5, e10) {
        var n2 = this, r = this.persistence.ma();
        return r.n_(t5, e10.targetId).next(function(t6) {
            t6.forEach(function(t7) {
                return n2.Uh.add(t7);
            });
        }).next(function() {
            return r.Z_(t5, e10);
        });
    }, t2.prototype.Mh = function() {
        this.Bh = new Set;
    }, t2.prototype.Lh = function(t5) {
        var e10 = this, n2 = this.persistence.Ia().Fa();
        return PersistencePromise.forEach(this.Uh, function(r) {
            return e10.kh(t5, r).next(function(t6) {
                t6 || n2.ko(r);
            });
        }).next(function() {
            return e10.Bh = null, n2.apply(t5);
        });
    }, t2.prototype.qa = function(t5, e10) {
        var n2 = this;
        return this.kh(t5, e10).next(function(t6) {
            t6 ? n2.Uh.delete(e10) : n2.Uh.add(e10);
        });
    }, t2.prototype.Oh = function(t5) {
        return 0;
    }, t2.prototype.kh = function(t5, e10) {
        var n2 = this;
        return PersistencePromise.No([
            function() {
                return n2.persistence.ma().Io(t5, e10);
            },
            function() {
                return n2.persistence.Gh(t5, e10);
            },
            function() {
                return PersistencePromise.resolve(n2.fh.Io(e10));
            }
<<<<<<< Updated upstream
        ];
        if (fullscreen === false) return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: "imageslide",
            __source: {
                fileName: "src/components/imageslide-view/imageslide-view.jsx",
                lineNumber: 80
            },
            __self: this,
            children: /*#__PURE__*/ _jsxRuntime.jsx(_reactImageGalleryDefault.default, {
                items: images,
                ref: (i)=>this._imageGallery = i
                ,
                slideDuration: this.state.slideDuration,
                slideInterval: this.state.slideInterval,
                showPlayButton: this.state.showPlayButton,
                infinite: this.state.infinite,
                showThumbnails: this.state.showThumbnails,
                showGalleryFullscreenButton: this.state.showGalleryFullscreenButton,
                showFullscreenButton: this.state.showFullscreenButton,
                showBullets: this.state.showBullets,
                autoPlay: this.state.autoPlay,
                showNav: this.state.showNav,
                useTranslate3D: this.state.useTranslate3D,
                isRTL: this.state.isRTL,
                swipeThreshold: this.state.swipeThreshold,
                additionalClass: "app-image-gallery",
                lazyLoad: this.state.lazyLoad,
                stopPropagation: this.state.stopPropagation,
                onClick: this._onImageClick.bind(this),
                startIndex: this.state.imageIndex,
                __source: {
                    fileName: "src/components/imageslide-view/imageslide-view.jsx",
                    lineNumber: 81
                },
                __self: this
            })
        }));
        else if (fullscreen === true) return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: "fullscreen",
            __source: {
                fileName: "src/components/imageslide-view/imageslide-view.jsx",
                lineNumber: 107
            },
            __self: this,
            children: /*#__PURE__*/ _jsxRuntime.jsx(_reactMediumImageZoom.Controlled, {
                transitionDuration: 0,
                isZoomed: isZoomed,
                zoomMargin: 190,
                overlayBgColorEnd: "rgba(0,0,0,1)",
                onZoomChange: this._handleZoomChange.bind(this),
                __source: {
                    fileName: "src/components/imageslide-view/imageslide-view.jsx",
                    lineNumber: 108
                },
                __self: this,
                children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                    __source: {
                        fileName: "src/components/imageslide-view/imageslide-view.jsx",
                        lineNumber: 108
                    },
                    __self: this,
                    children: /*#__PURE__*/ _jsxRuntime.jsx("img", {
                        src: this.state.clickedImage,
                        alt: "",
                        __source: {
                            fileName: "src/components/imageslide-view/imageslide-view.jsx",
                            lineNumber: 108
                        },
                        __self: this
                    })
                })
            })
=======
        ]);
    }, t2;
}(), __PRIVATE_MemoryLruDelegate = function() {
    function t2(t5, e10) {
        this.persistence = t5, this.fh = null, this.xh = new __PRIVATE_ObjectMap(function(t6) {
            return encode(t6.path);
        }), this.O_ = new __PRIVATE_LruGarbageCollector(this, e10);
    }
    return t2.prototype.Mh = function() {
    }, t2.prototype.Lh = function(t5) {
        return PersistencePromise.resolve();
    }, t2.prototype.Ur = function(t5, e10) {
        return this.persistence.ma().Ur(t5, e10);
    }, t2.prototype.U_ = function(t5) {
        var e10 = this.Kh(t5);
        return this.persistence.ma().rc(t5).next(function(t6) {
            return e10.next(function(e11) {
                return t6 + e11;
            });
        });
    }, t2.prototype.Kh = function(t5) {
        var e10 = 0;
        return this.x_(t5, function(t6) {
            e10++;
        }).next(function() {
            return e10;
        });
    }, t2.prototype.x_ = function(t5, e10) {
        var n2 = this;
        return PersistencePromise.forEach(this.xh, function(r, i6) {
            return n2.Th(t5, r, i6).next(function(t6) {
                return t6 ? PersistencePromise.resolve() : e10(i6);
            });
        });
    }, t2.prototype.Pa = function(t5) {
        this.fh = t5;
    }, t2.prototype.K_ = function(t5, e10, n2) {
        return this.persistence.ma().K_(t5, e10, n2);
    }, t2.prototype.j_ = function(t5, e10) {
        var n2 = this, r = 0, i6 = this.persistence.Ia(), s = i6.Fa();
        return i6.wh(t5, function(i7) {
            return n2.Th(t5, i7, e10).next(function(t6) {
                t6 || (r++, s.ko(i7));
            });
        }).next(function() {
            return s.apply(t5);
        }).next(function() {
            return r;
        });
    }, t2.prototype.ku = function(t5, e10) {
        return this.xh.set(e10, t5.xa), PersistencePromise.resolve();
    }, t2.prototype.removeTarget = function(t5, e10) {
        var n2 = e10.Fn(t5.xa);
        return this.persistence.ma().ja(t5, n2);
    }, t2.prototype.fo = function(t5, e10) {
        return this.xh.set(e10, t5.xa), PersistencePromise.resolve();
    }, t2.prototype.do = function(t5, e10) {
        return this.xh.set(e10, t5.xa), PersistencePromise.resolve();
    }, t2.prototype.qa = function(t5, e10) {
        return this.xh.set(e10, t5.xa), PersistencePromise.resolve();
    }, t2.prototype.Oh = function(t5) {
        var e10 = t5.key.toString().length;
        return t5 instanceof Document1 && (e10 += t5.data().Me()), e10;
    }, t2.prototype.Th = function(t5, e10, n2) {
        var r = this;
        return PersistencePromise.No([
            function() {
                return r.persistence.Gh(t5, e10);
            },
            function() {
                return PersistencePromise.resolve(r.fh.Io(e10));
            },
            function() {
                return r.persistence.ma().Io(t5, e10);
            },
            function() {
                var t6 = r.xh.get(e10);
                return PersistencePromise.resolve((void 0) !== t6 && t6 > n2);
            }
        ]);
    }, t2.prototype.q_ = function(t5) {
        return this.persistence.Ia().Ec(t5);
    }, t2;
}(), __PRIVATE_LOG_TAG$5 = "ExponentialBackoff", __PRIVATE_DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000, __PRIVATE_DEFAULT_BACKOFF_FACTOR = 1.5, __PRIVATE_DEFAULT_BACKOFF_MAX_DELAY_MS = 60000, __PRIVATE_ExponentialBackoff = function() {
    function t2(t5, e10, n2, r, i6) {
        (void 0) === n2 && (n2 = __PRIVATE_DEFAULT_BACKOFF_INITIAL_DELAY_MS), (void 0) === r && (r = __PRIVATE_DEFAULT_BACKOFF_FACTOR), (void 0) === i6 && (i6 = __PRIVATE_DEFAULT_BACKOFF_MAX_DELAY_MS), this.wc = t5, this.Cs = e10, this.jh = n2, this.qh = r, this.Qh = i6, this.Wh = 0, this.$h = null, this.Yh = Date.now(), this.reset();
    }
    return t2.prototype.reset = function() {
        this.Wh = 0;
    }, t2.prototype.Hh = function() {
        this.Wh = this.Qh;
    }, t2.prototype.Xh = function(t5) {
        var e10 = this;
        this.cancel();
        var n2 = Math.floor(this.Wh + this.zh()), r = Math.max(0, Date.now() - this.Yh), i6 = Math.max(0, n2 - r);
        this.Wh > 0 && debug(__PRIVATE_LOG_TAG$5, "Backing off for " + i6 + " ms (base delay: " + this.Wh + " ms, delay with jitter: " + n2 + " ms, last attempt: " + r + " ms ago)"), this.$h = this.wc.Js(this.Cs, i6, function() {
            return e10.Yh = Date.now(), t5();
        }), this.Wh *= this.qh, this.Wh < this.jh && (this.Wh = this.jh), this.Wh > this.Qh && (this.Wh = this.Qh);
    }, t2.prototype.cancel = function() {
        null !== this.$h && (this.$h.cancel(), this.$h = null);
    }, t2.prototype.zh = function() {
        return (Math.random() - 0.5) * this.Wh;
    }, t2;
}(), __PRIVATE_LOG_TAG$6 = "PersistentStream";
!function(t2) {
    t2[t2.Jh = 0] = "__PRIVATE_Initial", t2[t2.Zh = 1] = "__PRIVATE_Starting", t2[t2.tf = 2] = "__PRIVATE_Open", t2[t2.Error = 3] = "Error", t2[t2.ef = 4] = "__PRIVATE_Backoff";
}(__PRIVATE_PersistentStreamState || (__PRIVATE_PersistentStreamState = {
}));
var __PRIVATE_IDLE_TIMEOUT_MS = 60000, __PRIVATE_PersistentStream = function() {
    function t2(t5, e10, n2, r, i6, s) {
        this.wc = t5, this.nf = n2, this.connection = r, this.rf = i6, this.listener = s, this.state = __PRIVATE_PersistentStreamState.Jh, this.if = 0, this.sf = null, this.stream = null, this.uf = new __PRIVATE_ExponentialBackoff(t5, e10);
    }
    return t2.prototype.af = function() {
        return this.state === __PRIVATE_PersistentStreamState.Zh || this.state === __PRIVATE_PersistentStreamState.tf || this.state === __PRIVATE_PersistentStreamState.ef;
    }, t2.prototype._f = function() {
        return this.state === __PRIVATE_PersistentStreamState.tf;
    }, t2.prototype.start = function() {
        this.state !== __PRIVATE_PersistentStreamState.Error ? (assert(this.state === __PRIVATE_PersistentStreamState.Jh, "Already started"), this.auth()) : this.cf();
    }, t2.prototype.stop = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                switch(t5.label){
                    case 0:
                        return this.af() ? [
                            4,
                            this.close(__PRIVATE_PersistentStreamState.Jh)
                        ] : [
                            3,
                            2
                        ];
                    case 1:
                        t5.sent(), t5.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.hf = function() {
        assert(!this.af(), "Can only inhibit backoff in a stopped state"), this.state = __PRIVATE_PersistentStreamState.Jh, this.uf.reset();
    }, t2.prototype.ff = function() {
        var t5 = this;
        this._f() && null === this.sf && (this.sf = this.wc.Js(this.nf, __PRIVATE_IDLE_TIMEOUT_MS, function() {
            return t5.lf();
>>>>>>> Stashed changes
        }));
    }, t2.prototype.df = function(t5) {
        this.Tf(), this.stream.send(t5);
    }, t2.prototype.lf = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                return this._f() ? [
                    2,
                    this.close(__PRIVATE_PersistentStreamState.Jh)
                ] : [
                    2
                ];
            });
        });
    }, t2.prototype.Tf = function() {
        this.sf && (this.sf.cancel(), this.sf = null);
    }, t2.prototype.close = function(t5, e10) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(n2) {
                switch(n2.label){
                    case 0:
                        return assert(this.af(), "Only started streams should be closed."), assert(t5 === __PRIVATE_PersistentStreamState.Error || isNullOrUndefined(e10), "Can't provide an error when not in an error state."), this.Tf(), this.uf.cancel(), this.if++, t5 !== __PRIVATE_PersistentStreamState.Error ? this.uf.reset() : e10 && e10.code === Code.RESOURCE_EXHAUSTED ? (error(e10.toString()), error("Using maximum backoff delay to prevent overloading the backend."), this.uf.Hh()) : e10 && e10.code === Code.UNAUTHENTICATED && this.rf.g(), null !== this.stream && (this.Ef(), this.stream.close(), this.stream = null), this.state = t5, [
                            4,
                            this.listener.Pf(e10)
                        ];
                    case 1:
                        return n2.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Ef = function() {
    }, t2.prototype.auth = function() {
        var t5 = this;
        assert(this.state === __PRIVATE_PersistentStreamState.Jh, "Must be in initial state to auth"), this.state = __PRIVATE_PersistentStreamState.Zh;
        var e10 = this.Af(this.if), n2 = this.if;
        this.rf.getToken().then(function(e11) {
            t5.if === n2 && t5.Rf(e11);
        }, function(n3) {
            e10(function() {
                var e11 = new FirestoreError(Code.UNKNOWN, "Fetching auth token failed: " + n3.message);
                return t5.If(e11);
            });
        });
    }, t2.prototype.Rf = function(t5) {
        var e10 = this;
        assert(this.state === __PRIVATE_PersistentStreamState.Zh, "Trying to start stream in a non-starting state");
        var n2 = this.Af(this.if);
        this.stream = this.Vf(t5), this.stream.mf(function() {
            n2(function() {
                return assert(e10.state === __PRIVATE_PersistentStreamState.Zh, "Expected stream to be in state Starting, but was " + e10.state), e10.state = __PRIVATE_PersistentStreamState.tf, e10.listener.mf();
            });
        }), this.stream.Pf(function(t6) {
            n2(function() {
                return e10.If(t6);
            });
        }), this.stream.onMessage(function(t6) {
            n2(function() {
                return e10.onMessage(t6);
            });
        });
    }, t2.prototype.cf = function() {
        var t5 = this;
        assert(this.state === __PRIVATE_PersistentStreamState.Error, "Should only perform backoff when in Error state"), this.state = __PRIVATE_PersistentStreamState.ef, this.uf.Xh(function() {
            return tslib.__awaiter(t5, void 0, void 0, function() {
                return tslib.__generator(this, function(t6) {
                    return assert(this.state === __PRIVATE_PersistentStreamState.ef, "Backoff elapsed but state is now: " + this.state), this.state = __PRIVATE_PersistentStreamState.Jh, this.start(), assert(this.af(), "PersistentStream should have started"), [
                        2
                    ];
                });
            });
        });
    }, t2.prototype.If = function(t5) {
        return assert(this.af(), "Can't handle server close on non-started stream"), debug(__PRIVATE_LOG_TAG$6, "close with error: " + t5), this.stream = null, this.close(__PRIVATE_PersistentStreamState.Error, t5);
    }, t2.prototype.Af = function(t5) {
        var e10 = this;
        return function(n2) {
            e10.wc.Us(function() {
                return e10.if === t5 ? n2() : (debug(__PRIVATE_LOG_TAG$6, "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
            });
        };
    }, t2;
}(), __PRIVATE_PersistentListenStream = function(t2) {
    function e10(e11, n2, r, i6, s) {
        var o = t2.call(this, e11, __PRIVATE_TimerId.vs, __PRIVATE_TimerId.ms, n2, r, s) || this;
        return o.serializer = i6, o;
    }
    return tslib.__extends(e10, t2), e10.prototype.Vf = function(t5) {
        return this.connection.vf("Listen", t5);
    }, e10.prototype.onMessage = function(t5) {
        this.uf.reset();
        var e11 = this.serializer.Di(t5), n2 = this.serializer.Oi(t5);
        return this.listener.pf(e11, n2);
    }, e10.prototype.watch = function(t5) {
        var e11 = {
        };
        e11.database = this.serializer.Ti, e11.addTarget = this.serializer.Tn(t5);
        var n2 = this.serializer.Zi(t5);
        n2 && (e11.labels = n2), this.df(e11);
    }, e10.prototype.bf = function(t5) {
        var e11 = {
        };
        e11.database = this.serializer.Ti, e11.removeTarget = t5, this.df(e11);
    }, e10;
}(__PRIVATE_PersistentStream), __PRIVATE_PersistentWriteStream = function(t2) {
    function e10(e11, n2, r, i6, s) {
        var o = t2.call(this, e11, __PRIVATE_TimerId.bs, __PRIVATE_TimerId.ps, n2, r, s) || this;
        return o.serializer = i6, o.gf = !1, o.lastStreamToken = __PRIVATE_emptyByteString(), o;
    }
    return tslib.__extends(e10, t2), Object.defineProperty(e10.prototype, "wf", {
        get: function() {
            return this.gf;
        },
        enumerable: !0,
        configurable: !0
    }), e10.prototype.start = function() {
        this.gf = !1, t2.prototype.start.call(this);
    }, e10.prototype.Ef = function() {
        this.gf && this.yf([]);
    }, e10.prototype.Vf = function(t5) {
        return this.connection.vf("Write", t5);
    }, e10.prototype.onMessage = function(t5) {
        if (assert(!!t5.streamToken, "Got a write response without a stream token"), this.lastStreamToken = t5.streamToken, this.gf) {
            this.uf.reset();
            var e11 = this.serializer.Ki(t5.writeResults, t5.commitTime), n2 = this.serializer.fromVersion(t5.commitTime);
            return this.listener.Sf(n2, e11);
        }
        return assert(!t5.writeResults || 0 === t5.writeResults.length, "Got mutation results for handshake"), this.gf = !0, this.listener.Df();
    }, e10.prototype.Cf = function() {
        assert(this._f(), "Writing handshake requires an opened stream"), assert(!this.gf, "Handshake already completed");
        var t5 = {
        };
        t5.database = this.serializer.Ti, this.df(t5);
    }, e10.prototype.yf = function(t5) {
        var e12 = this;
        assert(this._f(), "Writing mutations requires an opened stream"), assert(this.gf, "Handshake must be complete before writing mutations"), assert(this.lastStreamToken.length > 0, "Trying to write mutation without a token");
        var n3 = {
            streamToken: this.lastStreamToken,
            writes: t5.map(function(t6) {
                return e12.serializer.Fi(t6);
            })
        };
        this.df(n3);
    }, e10;
}(__PRIVATE_PersistentStream), __PRIVATE_Datastore = function() {
    function t2(t5, e10, n3, r) {
        this.wc = t5, this.connection = e10, this.credentials = n3, this.serializer = r;
    }
    return t2.prototype.Of = function(t5) {
        return new __PRIVATE_PersistentWriteStream(this.wc, this.connection, this.credentials, this.serializer, t5);
    }, t2.prototype.Ff = function(t5) {
        return new __PRIVATE_PersistentListenStream(this.wc, this.connection, this.credentials, this.serializer, t5);
    }, t2.prototype.commit = function(t5) {
        var e10 = this, n3 = {
            database: this.serializer.Ti,
            writes: t5.map(function(t6) {
                return e10.serializer.Fi(t6);
            })
        };
        return this.Nf("Commit", n3).then(function(t6) {
            return e10.serializer.Ki(t6.writeResults, t6.commitTime);
        });
    }, t2.prototype.lookup = function(t5) {
        var e10 = this, n3 = {
            database: this.serializer.Ti,
            documents: t5.map(function(t6) {
                return e10.serializer.ci(t6);
            })
        };
        return this.Mf("BatchGetDocuments", n3).then(function(n4) {
            var r = __PRIVATE_maybeDocumentMap();
            n4.forEach(function(t6) {
                var n5 = e10.serializer.wi(t6);
                r = r.Pt(n5.key, n5);
            });
            var i6 = [];
            return t5.forEach(function(t6) {
                var e12 = r.get(t6);
                assert(!!e12, "Missing entity in write response for " + t6), i6.push(e12);
            }), i6;
        });
    }, t2.prototype.Nf = function(t5, e10) {
        var n3 = this;
        return this.credentials.getToken().then(function(r) {
            return n3.connection.Nf(t5, e10, r);
        }).catch(function(t6) {
            throw t6.code === Code.UNAUTHENTICATED && n3.credentials.g(), t6;
        });
    }, t2.prototype.Mf = function(t5, e10) {
        var n3 = this;
        return this.credentials.getToken().then(function(r) {
            return n3.connection.Mf(t5, e10, r);
        }).catch(function(t6) {
            throw t6.code === Code.UNAUTHENTICATED && n3.credentials.g(), t6;
        });
    }, t2;
}(), FieldPath$1 = function() {
    function t2() {
        for(var t5 = [], e10 = 0; e10 < arguments.length; e10++)t5[e10] = arguments[e10];
        __PRIVATE_validateNamedArrayAtLeastNumberOfElements("FieldPath", t5, "fieldNames", 1);
        for(var n3 = 0; n3 < t5.length; ++n3)if (__PRIVATE_validateArgType("FieldPath", "string", n3, t5[n3]), 0 === t5[n3].length) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this.Lf = new FieldPath(t5);
    }
    return t2.documentId = function() {
        return t2.Gf;
    }, t2.prototype.isEqual = function(e10) {
        if (!(e10 instanceof t2)) throw __PRIVATE_invalidClassError("isEqual", "FieldPath", 1, e10);
        return this.Lf.isEqual(e10.Lf);
    }, t2.Gf = new t2(FieldPath.ht().ot()), t2;
}(), __PRIVATE_RESERVED = new RegExp("[~\\*/\\[\\]]");
function __PRIVATE_fromDotSeparatedString(t2) {
    if (t2.search(__PRIVATE_RESERVED) >= 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + t2 + "). Paths must not contain '~', '*', '/', '[', or ']'");
    try {
        return new (FieldPath$1.bind.apply(FieldPath$1, tslib.__spreadArrays([
            void 0
        ], t2.split("."))));
    } catch (e10) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + t2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
    }
}
var __PRIVATE_UserDataSource, __PRIVATE_FieldValueImpl = function() {
    function t2(t5) {
        this.Bf = t5;
    }
    return t2.delete = function() {
        return __PRIVATE_validateNoArgs("FieldValue.delete", arguments), __PRIVATE_DeleteFieldValueImpl.instance;
    }, t2.serverTimestamp = function() {
        return __PRIVATE_validateNoArgs("FieldValue.serverTimestamp", arguments), __PRIVATE_ServerTimestampFieldValueImpl.instance;
    }, t2.arrayUnion = function() {
        for(var t5 = [], e10 = 0; e10 < arguments.length; e10++)t5[e10] = arguments[e10];
        return __PRIVATE_validateAtLeastNumberOfArgs("FieldValue.arrayUnion", arguments, 1), new __PRIVATE_ArrayUnionFieldValueImpl(t5);
    }, t2.arrayRemove = function() {
        for(var t5 = [], e10 = 0; e10 < arguments.length; e10++)t5[e10] = arguments[e10];
        return __PRIVATE_validateAtLeastNumberOfArgs("FieldValue.arrayRemove", arguments, 1), new __PRIVATE_ArrayRemoveFieldValueImpl(t5);
    }, t2.increment = function(t5) {
        return __PRIVATE_validateArgType("FieldValue.increment", "number", 1, t5), __PRIVATE_validateExactNumberOfArgs("FieldValue.increment", arguments, 1), new __PRIVATE_NumericIncrementFieldValueImpl(t5);
    }, t2.prototype.isEqual = function(t5) {
        return this === t5;
    }, t2;
}(), __PRIVATE_DeleteFieldValueImpl = function(t2) {
    function e10() {
        return t2.call(this, "FieldValue.delete") || this;
    }
    return tslib.__extends(e10, t2), e10.instance = new e10, e10;
}(__PRIVATE_FieldValueImpl), __PRIVATE_ServerTimestampFieldValueImpl = function(t2) {
    function e10() {
        return t2.call(this, "FieldValue.serverTimestamp") || this;
    }
    return tslib.__extends(e10, t2), e10.instance = new e10, e10;
}(__PRIVATE_FieldValueImpl), __PRIVATE_ArrayUnionFieldValueImpl = function(t2) {
    function e10(e12) {
        var n3 = t2.call(this, "FieldValue.arrayUnion") || this;
        return n3.Uf = e12, n3;
    }
    return tslib.__extends(e10, t2), e10;
}(__PRIVATE_FieldValueImpl), __PRIVATE_ArrayRemoveFieldValueImpl = function(t2) {
    function e10(e12) {
        var n3 = t2.call(this, "FieldValue.arrayRemove") || this;
        return n3.Uf = e12, n3;
    }
    return tslib.__extends(e10, t2), e10;
}(__PRIVATE_FieldValueImpl), __PRIVATE_NumericIncrementFieldValueImpl = function(t2) {
    function e10(e12) {
        var n3 = t2.call(this, "FieldValue.increment") || this;
        return n3.kf = e12, n3;
    }
    return tslib.__extends(e10, t2), e10;
}(__PRIVATE_FieldValueImpl), __PRIVATE_PublicFieldValue = __PRIVATE_makeConstructorPrivate(__PRIVATE_FieldValueImpl, "Use FieldValue.<field>() instead."), __PRIVATE_RESERVED_FIELD_REGEX = /^__.*__$/, __PRIVATE_ParsedSetData = function() {
    function t2(t5, e10, n3) {
        this.data = t5, this.fe = e10, this.fieldTransforms = n3;
    }
    return t2.prototype.xf = function(t5, e10) {
        var n3 = [];
        return null !== this.fe ? n3.push(new __PRIVATE_PatchMutation(t5, this.data, this.fe, e10)) : n3.push(new __PRIVATE_SetMutation(t5, this.data, e10)), this.fieldTransforms.length > 0 && n3.push(new __PRIVATE_TransformMutation(t5, this.fieldTransforms)), n3;
    }, t2;
}(), __PRIVATE_ParsedUpdateData = function() {
    function t2(t5, e10, n3) {
        this.data = t5, this.fe = e10, this.fieldTransforms = n3;
    }
    return t2.prototype.xf = function(t5, e10) {
        var n3 = [
            new __PRIVATE_PatchMutation(t5, this.data, this.fe, e10)
        ];
        return this.fieldTransforms.length > 0 && n3.push(new __PRIVATE_TransformMutation(t5, this.fieldTransforms)), n3;
    }, t2;
}();
function __PRIVATE_isWrite(t2) {
    switch(t2){
        case __PRIVATE_UserDataSource.Set:
        case __PRIVATE_UserDataSource.Kf:
        case __PRIVATE_UserDataSource.jf:
            return !0;
        case __PRIVATE_UserDataSource.qf:
        case __PRIVATE_UserDataSource.Qf:
            return !1;
        default:
            throw fail("Unexpected case for UserDataSource: " + t2);
    }
}
!function(t2) {
    t2[t2.Set = 0] = "Set", t2[t2.jf = 1] = "__PRIVATE_Update", t2[t2.Kf = 2] = "__PRIVATE_MergeSet", t2[t2.qf = 3] = "__PRIVATE_Argument", t2[t2.Qf = 4] = "__PRIVATE_ArrayArgument";
}(__PRIVATE_UserDataSource || (__PRIVATE_UserDataSource = {
}));
var __PRIVATE_ParseContext = function() {
    function t2(t5, e10, n3, r, i6, s) {
        this.Wf = t5, this.methodName = e10, this.path = n3, this.$f = r, (void 0) === i6 && this.Yf(), this.$f = (void 0) !== r && r, this.fieldTransforms = i6 || [], this.fe = s || [];
    }
    return t2.prototype.Hf = function(e10) {
        var n3 = null == this.path ? null : this.path.child(e10), r = new t2(this.Wf, this.methodName, n3, !1, this.fieldTransforms, this.fe);
        return r.Xf(e10), r;
    }, t2.prototype.zf = function(e10) {
        var n3 = null == this.path ? null : this.path.child(e10), r = new t2(this.Wf, this.methodName, n3, !1, this.fieldTransforms, this.fe);
        return r.Yf(), r;
    }, t2.prototype.Jf = function(e10) {
        return new t2(this.Wf, this.methodName, null, !0, this.fieldTransforms, this.fe);
    }, t2.prototype.Zf = function(t5) {
        var e10 = null === this.path || this.path.tt() ? "" : " (found in field " + this.path.toString() + ")";
        return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + this.methodName + "() called with invalid data. " + t5 + e10);
    }, t2.prototype.contains = function(t5) {
        return (void 0) !== this.fe.find(function(e10) {
            return t5.rt(e10);
        }) || (void 0) !== this.fieldTransforms.find(function(e10) {
            return t5.rt(e10.field);
        });
    }, t2.prototype.Yf = function() {
        if (null !== this.path) for(var t5 = 0; t5 < this.path.length; t5++)this.Xf(this.path.get(t5));
    }, t2.prototype.Xf = function(t5) {
        if (0 === t5.length) throw this.Zf("Document fields must not be empty");
        if (__PRIVATE_isWrite(this.Wf) && __PRIVATE_RESERVED_FIELD_REGEX.test(t5)) throw this.Zf('Document fields cannot begin and end with "__"');
    }, t2;
}(), __PRIVATE_DocumentKeyReference = function(t2, e10) {
    this.o = t2, this.key = e10;
}, __PRIVATE_UserDataConverter = function() {
    function t2(t5) {
        this.tl = t5;
    }
    return t2.prototype.el = function(t5, e10) {
        var n3 = new __PRIVATE_ParseContext(__PRIVATE_UserDataSource.Set, t5, FieldPath.at);
        __PRIVATE_validatePlainObject("Data must be an object, but it was:", n3, e10);
        var r = this.nl(e10, n3);
        return new __PRIVATE_ParsedSetData(r, null, n3.fieldTransforms);
    }, t2.prototype.rl = function(t5, e10, n3) {
        var r = new __PRIVATE_ParseContext(__PRIVATE_UserDataSource.Kf, t5, FieldPath.at);
        __PRIVATE_validatePlainObject("Data must be an object, but it was:", r, e10);
        var i6, s, o = this.nl(e10, r);
        if (n3) {
            for(var u = new __PRIVATE_SortedSet(FieldPath.H), a = 0, _ = n3; a < _.length; a++){
                var c = _[a], h = void 0;
                if (c instanceof FieldPath$1) h = c.Lf;
                else {
                    if ("string" != typeof c) throw fail("Expected stringOrFieldPath to be a string or a FieldPath");
                    h = __PRIVATE_fieldPathFromDotSeparatedString(t5, c);
                }
                if (!r.contains(h)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + h + "' is specified in your field mask but missing from your input data.");
                u = u.add(h);
            }
            i6 = __PRIVATE_FieldMask.te(u), s = r.fieldTransforms.filter(function(t6) {
                return i6.ne(t6.field);
            });
        } else i6 = __PRIVATE_FieldMask.ee(r.fe), s = r.fieldTransforms;
        return new __PRIVATE_ParsedSetData(o, i6, s);
    }, t2.prototype.il = function(t5, e10) {
        var n3 = this, r = new __PRIVATE_ParseContext(__PRIVATE_UserDataSource.jf, t5, FieldPath.at);
        __PRIVATE_validatePlainObject("Data must be an object, but it was:", r, e10);
        var i6 = new __PRIVATE_SortedSet(FieldPath.H), s = __PRIVATE_ObjectValue.EMPTY;
        forEach(e10, function(e12, o) {
            var u = __PRIVATE_fieldPathFromDotSeparatedString(t5, e12), a = r.zf(u);
            if ((o = n3.sl(o, a)) instanceof __PRIVATE_DeleteFieldValueImpl) i6 = i6.add(u);
            else {
                var _ = n3.nl(o, a);
                null != _ && (i6 = i6.add(u), s = s.set(u, _));
            }
        });
        var o = __PRIVATE_FieldMask.te(i6);
        return new __PRIVATE_ParsedUpdateData(s, o, r.fieldTransforms);
    }, t2.prototype.ol = function(t5, e10, n3, r) {
        var i6 = new __PRIVATE_ParseContext(__PRIVATE_UserDataSource.jf, t5, FieldPath.at), s = [
            __PRIVATE_fieldPathFromArgument(t5, e10)
        ], o = [
            n3
        ];
        if (r.length % 2 != 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t5 + "() needs to be called with an even number of arguments that alternate between field names and values.");
        for(var u = 0; u < r.length; u += 2)s.push(__PRIVATE_fieldPathFromArgument(t5, r[u])), o.push(r[u + 1]);
        var a = new __PRIVATE_SortedSet(FieldPath.H), _ = __PRIVATE_ObjectValue.EMPTY;
        for(u = 0; u < s.length; ++u){
            var c = s[u], h = i6.zf(c), f = this.sl(o[u], h);
            if (f instanceof __PRIVATE_DeleteFieldValueImpl) a = a.add(c);
            else {
                var l = this.nl(f, h);
                null != l && (a = a.add(c), _ = _.set(c, l));
            }
        }
        var d = __PRIVATE_FieldMask.te(a);
        return new __PRIVATE_ParsedUpdateData(_, d, i6.fieldTransforms);
    }, t2.prototype.ul = function(t5, e10, n3) {
        (void 0) === n3 && (n3 = !1);
        var r = new __PRIVATE_ParseContext(n3 ? __PRIVATE_UserDataSource.Qf : __PRIVATE_UserDataSource.qf, t5, FieldPath.at), i6 = this.nl(e10, r);
        return assert(null != i6, "Parsed data should not be null."), assert(0 === r.fieldTransforms.length, "Field transforms should have been disallowed."), i6;
    }, t2.prototype.sl = function(t5, e10) {
        try {
            return this.tl(t5);
        } catch (t6) {
            var n3 = __PRIVATE_errorMessage(t6);
            throw e10.Zf(n3);
        }
    }, t2.prototype.nl = function(t5, e10) {
        if (__PRIVATE_looksLikeJsonObject(t5 = this.sl(t5, e10))) return __PRIVATE_validatePlainObject("Unsupported field value:", e10, t5), this.al(t5, e10);
        if (t5 instanceof __PRIVATE_FieldValueImpl) return this._l(t5, e10), null;
        if (e10.path && e10.fe.push(e10.path), t5 instanceof Array) {
            if (e10.$f && e10.Wf !== __PRIVATE_UserDataSource.Qf) throw e10.Zf("Nested arrays are not supported");
            return this.cl(t5, e10);
        }
        return this.hl(t5, e10);
    }, t2.prototype.al = function(t5, e10) {
        var n4 = this, r = new __PRIVATE_SortedMap(__PRIVATE_primitiveComparator);
        return __PRIVATE_isEmpty(t5) ? e10.path && e10.path.length > 0 && e10.fe.push(e10.path) : forEach(t5, function(t6, i6) {
            var s = n4.nl(i6, e10.Hf(t6));
            null != s && (r = r.Pt(t6, s));
        }), new __PRIVATE_ObjectValue(r);
    }, t2.prototype.cl = function(t5, e10) {
        for(var n4 = [], r = 0, i6 = 0, s = t5; i6 < s.length; i6++){
            var o = s[i6], u = this.nl(o, e10.Jf(r));
            null == u && (u = __PRIVATE_NullValue.Le), n4.push(u), r++;
        }
        return new ArrayValue(n4);
    }, t2.prototype._l = function(t5, e10) {
        if (!__PRIVATE_isWrite(e10.Wf)) throw e10.Zf(t5.Bf + "() can only be used with update() and set()");
        if (null === e10.path) throw e10.Zf(t5.Bf + "() is not currently supported inside arrays");
        if (t5 instanceof __PRIVATE_DeleteFieldValueImpl) {
            if (e10.Wf !== __PRIVATE_UserDataSource.Kf) throw e10.Wf === __PRIVATE_UserDataSource.jf ? (assert(e10.path.length > 0, "FieldValue.delete() at the top level should have already been handled."), e10.Zf("FieldValue.delete() can only appear at the top level of your update data")) : e10.Zf("FieldValue.delete() cannot be used with set() unless you pass {merge:true}");
            e10.fe.push(e10.path);
        } else if (t5 instanceof __PRIVATE_ServerTimestampFieldValueImpl) e10.fieldTransforms.push(new FieldTransform(e10.path, __PRIVATE_ServerTimestampTransform.instance));
        else if (t5 instanceof __PRIVATE_ArrayUnionFieldValueImpl) {
            var n4 = this.fl(t5.Bf, t5.Uf), r = new __PRIVATE_ArrayUnionTransformOperation(n4);
            e10.fieldTransforms.push(new FieldTransform(e10.path, r));
        } else if (t5 instanceof __PRIVATE_ArrayRemoveFieldValueImpl) {
            n4 = this.fl(t5.Bf, t5.Uf);
            var i6 = new __PRIVATE_ArrayRemoveTransformOperation(n4);
            e10.fieldTransforms.push(new FieldTransform(e10.path, i6));
        } else if (t5 instanceof __PRIVATE_NumericIncrementFieldValueImpl) {
            var s = this.ul("FieldValue.increment", t5.kf), o = new __PRIVATE_NumericIncrementTransformOperation(s);
            e10.fieldTransforms.push(new FieldTransform(e10.path, o));
        } else fail("Unknown FieldValue type: " + t5);
    }, t2.prototype.hl = function(t5, e10) {
        if (null === t5) return __PRIVATE_NullValue.Le;
        if ("number" == typeof t5) return isSafeInteger(t5) ? new __PRIVATE_IntegerValue(t5) : new __PRIVATE_DoubleValue(t5);
        if ("boolean" == typeof t5) return __PRIVATE_BooleanValue.of(t5);
        if ("string" == typeof t5) return new __PRIVATE_StringValue(t5);
        if (t5 instanceof Date) return new __PRIVATE_TimestampValue(Timestamp.fromDate(t5));
        if (t5 instanceof Timestamp) return new __PRIVATE_TimestampValue(new Timestamp(t5.seconds, 1000 * Math.floor(t5.nanoseconds / 1000)));
        if (t5 instanceof GeoPoint) return new __PRIVATE_GeoPointValue(t5);
        if (t5 instanceof Blob1) return new __PRIVATE_BlobValue(t5);
        if (t5 instanceof __PRIVATE_DocumentKeyReference) return new __PRIVATE_RefValue(t5.o, t5.key);
        throw e10.Zf("Unsupported field value: " + __PRIVATE_valueDescription(t5));
    }, t2.prototype.fl = function(t5, e10) {
        var n5 = this;
        return e10.map(function(e12, r) {
            var i7 = new __PRIVATE_ParseContext(__PRIVATE_UserDataSource.qf, t5, FieldPath.at);
            return n5.nl(e12, i7.Jf(r));
        });
    }, t2;
}();
function __PRIVATE_looksLikeJsonObject(t2) {
    return !("object" != typeof t2 || null === t2 || t2 instanceof Array || t2 instanceof Date || t2 instanceof Timestamp || t2 instanceof GeoPoint || t2 instanceof Blob1 || t2 instanceof __PRIVATE_DocumentKeyReference || t2 instanceof __PRIVATE_FieldValueImpl);
}
function __PRIVATE_validatePlainObject(t2, e10, n5) {
    if (!__PRIVATE_looksLikeJsonObject(n5) || !__PRIVATE_isPlainObject(n5)) {
        var r = __PRIVATE_valueDescription(n5);
        throw "an object" === r ? e10.Zf(t2 + " a custom object") : e10.Zf(t2 + " " + r);
    }
}
function __PRIVATE_fieldPathFromArgument(t2, e10) {
    if (e10 instanceof FieldPath$1) return e10.Lf;
    if ("string" == typeof e10) return __PRIVATE_fieldPathFromDotSeparatedString(t2, e10);
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t2 + "() called with invalid data. Field path arguments must be of type string or FieldPath.");
}
function __PRIVATE_fieldPathFromDotSeparatedString(t2, e10) {
    try {
        return __PRIVATE_fromDotSeparatedString(e10).Lf;
    } catch (e12) {
        var n5 = __PRIVATE_errorMessage(e12);
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + t2 + "() called with invalid data. " + n5);
    }
}
function __PRIVATE_errorMessage(t2) {
    return t2 instanceof Error ? t2.message : t2.toString();
}
var Transaction = function() {
    function t2(t5) {
        this.ll = t5, this.dl = __PRIVATE_documentVersionMap(), this.mutations = [], this.Tl = !1, this.El = null, this.Pl = new Set;
    }
    return t2.prototype.lookup = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e10, n6 = this;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        if (this.Al(), this.mutations.length > 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                        return [
                            4,
                            this.ll.lookup(t5)
                        ];
                    case 1:
                        return (e10 = r.sent()).forEach(function(t6) {
                            t6 instanceof __PRIVATE_NoDocument || t6 instanceof Document1 ? n6.Rl(t6) : fail("Document in a transaction was a " + t6.constructor.name);
                        }), [
                            2,
                            e10
                        ];
                }
            });
        });
    }, t2.prototype.set = function(t5, e10) {
        this.write(e10.xf(t5, this._e(t5))), this.Pl.add(t5);
    }, t2.prototype.update = function(t5, e10) {
        try {
            this.write(e10.xf(t5, this.Il(t5)));
        } catch (t6) {
            this.El = t6;
        }
        this.Pl.add(t5);
    }, t2.prototype.delete = function(t5) {
        this.write([
            new __PRIVATE_DeleteMutation(t5, this._e(t5))
        ]), this.Pl.add(t5);
    }, t2.prototype.commit = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5, e10 = this;
            return tslib.__generator(this, function(n6) {
                switch(n6.label){
                    case 0:
                        if (this.Al(), this.El) throw this.El;
                        return t5 = this.dl, this.mutations.forEach(function(e12) {
                            t5 = t5.remove(e12.key);
                        }), t5.forEach(function(t6, n7) {
                            e10.mutations.push(new __PRIVATE_VerifyMutation(t6, e10._e(t6)));
                        }), [
                            4,
                            this.ll.commit(this.mutations)
                        ];
                    case 1:
                        return n6.sent(), this.Tl = !0, [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Rl = function(t5) {
        var e10;
        if (t5 instanceof Document1) e10 = t5.version;
        else {
            if (!(t5 instanceof __PRIVATE_NoDocument)) throw fail("Document in a transaction was a " + t5.constructor.name);
            e10 = __PRIVATE_SnapshotVersion.W();
        }
        var n6 = this.dl.get(t5.key);
        if (null !== n6) {
            if (!e10.isEqual(n6)) throw new FirestoreError(Code.ABORTED, "Document version changed between two reads.");
        } else this.dl = this.dl.Pt(t5.key, e10);
    }, t2.prototype._e = function(t5) {
        var e10 = this.dl.get(t5);
        return !this.Pl.has(t5) && e10 ? Precondition.updateTime(e10) : Precondition.NONE;
    }, t2.prototype.Il = function(t5) {
        var e10 = this.dl.get(t5);
        if (!this.Pl.has(t5) && e10) {
            if (e10.isEqual(__PRIVATE_SnapshotVersion.W())) throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            return Precondition.updateTime(e10);
        }
        return Precondition.exists(!0);
    }, t2.prototype.write = function(t5) {
        this.Al(), this.mutations = this.mutations.concat(t5);
    }, t2.prototype.Al = function() {
        assert(!this.Tl, "A transaction object cannot be used after its update callback has been invoked.");
    }, t2;
}(), __PRIVATE_LOG_TAG$7 = "OnlineStateTracker", __PRIVATE_MAX_WATCH_STREAM_FAILURES = 1, __PRIVATE_ONLINE_STATE_TIMEOUT_MS = 10000, __PRIVATE_OnlineStateTracker = function() {
    function t2(t5, e10) {
        this.Ds = t5, this.Vl = e10, this.state = __PRIVATE_OnlineState.h, this.ml = 0, this.vl = null, this.pl = !0;
    }
    return t2.prototype.bl = function() {
        var t5 = this;
        0 === this.ml && (this.gl(__PRIVATE_OnlineState.h), assert(null === this.vl, "onlineStateTimer shouldn't be started yet"), this.vl = this.Ds.Js(__PRIVATE_TimerId.gs, __PRIVATE_ONLINE_STATE_TIMEOUT_MS, function() {
            return t5.vl = null, assert(t5.state === __PRIVATE_OnlineState.h, "Timer should be canceled if we transitioned to a different state."), t5.wl("Backend didn't respond within " + __PRIVATE_ONLINE_STATE_TIMEOUT_MS / 1000 + " seconds."), t5.gl(__PRIVATE_OnlineState.T), Promise.resolve();
        }));
    }, t2.prototype.yl = function(t5) {
        this.state === __PRIVATE_OnlineState.l ? (this.gl(__PRIVATE_OnlineState.h), assert(0 === this.ml, "watchStreamFailures must be 0"), assert(null === this.vl, "onlineStateTimer must be null")) : (this.ml++, this.ml >= __PRIVATE_MAX_WATCH_STREAM_FAILURES && (this.Sl(), this.wl("Connection failed " + __PRIVATE_MAX_WATCH_STREAM_FAILURES + " times. Most recent error: " + t5.toString()), this.gl(__PRIVATE_OnlineState.T)));
    }, t2.prototype.set = function(t5) {
        this.Sl(), this.ml = 0, t5 === __PRIVATE_OnlineState.l && (this.pl = !1), this.gl(t5);
    }, t2.prototype.gl = function(t5) {
        t5 !== this.state && (this.state = t5, this.Vl(t5));
    }, t2.prototype.wl = function(t5) {
        var e10 = "Could not reach Cloud Firestore backend. " + t5 + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
        this.pl ? (error(e10), this.pl = !1) : debug(__PRIVATE_LOG_TAG$7, e10);
    }, t2.prototype.Sl = function() {
        null !== this.vl && (this.vl.cancel(), this.vl = null);
    }, t2;
}(), __PRIVATE_LOG_TAG$8 = "RemoteStore", __PRIVATE_MAX_PENDING_WRITES = 10, __PRIVATE_RemoteStore = function() {
    function t2(t5, e10, n6, r, i7) {
        var s = this;
        this.F_ = t5, this.ll = e10, this.Dl = [], this.Cl = {
        }, this.Ol = null, this.networkEnabled = !1, this.isPrimary = !1, this.Fl = i7, this.Fl.Nl(function(t6) {
            n6.Us(function() {
                return tslib.__awaiter(s, void 0, void 0, function() {
                    return tslib.__generator(this, function(t7) {
                        switch(t7.label){
                            case 0:
                                return this.Ml() ? (debug(__PRIVATE_LOG_TAG$8, "Restarting streams for network reachability change."), [
                                    4,
                                    this.Ll()
                                ]) : [
                                    3,
                                    2
                                ];
                            case 1:
                                t7.sent(), t7.label = 2;
                            case 2:
                                return [
                                    2
                                ];
                        }
                    });
                });
            });
        }), this.Gl = new __PRIVATE_OnlineStateTracker(n6, r), this.Bl = this.ll.Ff({
            mf: this.Ul.bind(this),
            Pf: this.kl.bind(this),
            pf: this.xl.bind(this)
        }), this.Kl = this.ll.Of({
            mf: this.jl.bind(this),
            Pf: this.ql.bind(this),
            Df: this.Ql.bind(this),
            Sf: this.Sf.bind(this)
        });
    }
    return t2.prototype.start = function() {
        return this.enableNetwork();
    }, t2.prototype.enableNetwork = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5;
            return tslib.__generator(this, function(e10) {
                switch(e10.label){
                    case 0:
                        return this.networkEnabled = !0, this.Ml() ? (t5 = this.Kl, [
                            4,
                            this.F_.mu()
                        ]) : [
                            3,
                            3
                        ];
                    case 1:
                        return t5.lastStreamToken = e10.sent(), this.Wl() ? this.$l() : this.Gl.set(__PRIVATE_OnlineState.h), [
                            4,
                            this.Yl()
                        ];
                    case 2:
                        e10.sent(), e10.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.disableNetwork = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                switch(t5.label){
                    case 0:
                        return this.networkEnabled = !1, [
                            4,
                            this.Hl()
                        ];
                    case 1:
                        return t5.sent(), this.Gl.set(__PRIVATE_OnlineState.T), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Hl = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                switch(t5.label){
                    case 0:
                        return [
                            4,
                            this.Kl.stop()
                        ];
                    case 1:
                        return t5.sent(), [
                            4,
                            this.Bl.stop()
                        ];
                    case 2:
                        return t5.sent(), this.Dl.length > 0 && (debug(__PRIVATE_LOG_TAG$8, "Stopping write stream with " + this.Dl.length + " pending writes"), this.Dl = []), this.Xl(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.shutdown = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                switch(t5.label){
                    case 0:
                        return debug(__PRIVATE_LOG_TAG$8, "RemoteStore shutting down."), this.networkEnabled = !1, [
                            4,
                            this.Hl()
                        ];
                    case 1:
                        return t5.sent(), this.Fl.shutdown(), this.Gl.set(__PRIVATE_OnlineState.h), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.listen = function(t5) {
        contains(this.Cl, t5.targetId) || (this.Cl[t5.targetId] = t5, this.Wl() ? this.$l() : this.Bl._f() && this.zl(t5));
    }, t2.prototype.Jl = function(t5) {
        assert(contains(this.Cl, t5), "unlisten called on target no currently watched: " + t5), delete this.Cl[t5], this.Bl._f() && this.Zl(t5), __PRIVATE_isEmpty(this.Cl) && (this.Bl._f() ? this.Bl.ff() : this.Ml() && this.Gl.set(__PRIVATE_OnlineState.h));
    }, t2.prototype.Xr = function(t5) {
        return this.Cl[t5] || null;
    }, t2.prototype.Hr = function(t5) {
        return this.td.Hr(t5);
    }, t2.prototype.zl = function(t5) {
        this.Ol.wr(t5.targetId), this.Bl.watch(t5);
    }, t2.prototype.Zl = function(t5) {
        this.Ol.wr(t5), this.Bl.bf(t5);
    }, t2.prototype.$l = function() {
        assert(this.Wl(), "startWatchStream() called when shouldStartWatchStream() is false."), this.Ol = new __PRIVATE_WatchChangeAggregator(this), this.Bl.start(), this.Gl.bl();
    }, t2.prototype.Wl = function() {
        return this.Ml() && !this.Bl.af() && !__PRIVATE_isEmpty(this.Cl);
    }, t2.prototype.Ml = function() {
        return this.isPrimary && this.networkEnabled;
    }, t2.prototype.Xl = function() {
        this.Ol = null;
    }, t2.prototype.Ul = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5 = this;
            return tslib.__generator(this, function(e10) {
                return __PRIVATE_forEachNumber(this.Cl, function(e12, n6) {
                    t5.zl(n6);
                }), [
                    2
                ];
            });
        });
    }, t2.prototype.kl = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(e10) {
                return (void 0) === t5 && assert(!this.Wl(), "Watch stream was stopped gracefully while still needed."), this.Xl(), this.Wl() ? (this.Gl.yl(t5), this.$l()) : this.Gl.set(__PRIVATE_OnlineState.h), [
                    2
                ];
            });
        });
    }, t2.prototype.xl = function(t5, e10) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n6;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return this.Gl.set(__PRIVATE_OnlineState.l), t5 instanceof __PRIVATE_WatchTargetChange && t5.state === __PRIVATE_WatchTargetChangeState.kn && t5.cause ? [
                            2,
                            this.ed(t5)
                        ] : (t5 instanceof __PRIVATE_DocumentWatchChange ? this.Ol.Mr(t5) : t5 instanceof __PRIVATE_ExistenceFilterChange ? this.Ol.jr(t5) : (assert(t5 instanceof __PRIVATE_WatchTargetChange, "Expected watchChange to be an instance of WatchTargetChange"), this.Ol.Br(t5)), e10.isEqual(__PRIVATE_SnapshotVersion.MIN) ? [
                            3,
                            3
                        ] : [
                            4,
                            this.F_.Ga()
                        ]);
                    case 1:
                        return n6 = r.sent(), e10._(n6) >= 0 ? [
                            4,
                            this.nd(e10)
                        ] : [
                            3,
                            3
                        ];
                    case 2:
                        r.sent(), r.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.nd = function(t5) {
        var e10 = this;
        assert(!t5.isEqual(__PRIVATE_SnapshotVersion.MIN), "Can't raise event for unknown SnapshotVersion");
        var n6 = this.Ol.Wr(t5);
        return __PRIVATE_forEachNumber(n6.Jn, function(n7, r) {
            if (r.resumeToken.length > 0) {
                var i7 = e10.Cl[n7];
                i7 && (e10.Cl[n7] = i7.Nn(r.resumeToken, t5));
            }
        }), n6.Zn.forEach(function(t6) {
            var n7 = e10.Cl[t6];
            if (n7) {
                e10.Cl[t6] = n7.Nn(__PRIVATE_emptyByteString(), n7.On), e10.Zl(t6);
                var r = new __PRIVATE_TargetData(n7.target, t6, __PRIVATE_TargetPurpose.Sn, n7.sequenceNumber);
                e10.zl(r);
            }
        }), this.td.Ba(n6);
    }, t2.prototype.ed = function(t5) {
        var e10 = this;
        assert(!!t5.cause, "Handling target error without a cause");
        var n6 = t5.cause, r = Promise.resolve();
        return t5.targetIds.forEach(function(t6) {
            r = r.then(function() {
                return tslib.__awaiter(e10, void 0, void 0, function() {
                    return tslib.__generator(this, function(e12) {
                        return contains(this.Cl, t6) ? (delete this.Cl[t6], this.Ol.removeTarget(t6), [
                            2,
                            this.td.rd(t6, n6)
                        ]) : [
                            2
                        ];
                    });
                });
            });
        }), r;
    }, t2.prototype.Yl = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5, e10;
            return tslib.__generator(this, function(n6) {
                switch(n6.label){
                    case 0:
                        return this.sd() ? (t5 = this.Dl.length > 0 ? this.Dl[this.Dl.length - 1].batchId : __PRIVATE_BATCHID_UNKNOWN, [
                            4,
                            this.F_.Ya(t5)
                        ]) : [
                            3,
                            4
                        ];
                    case 1:
                        return null !== (e10 = n6.sent()) ? [
                            3,
                            2
                        ] : (0 === this.Dl.length && this.Kl.ff(), [
                            3,
                            4
                        ]);
                    case 2:
                        return this.od(e10), [
                            4,
                            this.Yl()
                        ];
                    case 3:
                        n6.sent(), n6.label = 4;
                    case 4:
                        return this.ud() && this.ad(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.sd = function() {
        return this.Ml() && this.Dl.length < __PRIVATE_MAX_PENDING_WRITES;
    }, t2.prototype._d = function() {
        return this.Dl.length;
    }, t2.prototype.od = function(t5) {
        assert(this.sd(), "addToWritePipeline called when pipeline is full"), this.Dl.push(t5), this.Kl._f() && this.Kl.wf && this.Kl.yf(t5.mutations);
    }, t2.prototype.ud = function() {
        return this.Ml() && !this.Kl.af() && this.Dl.length > 0;
    }, t2.prototype.ad = function() {
        assert(this.ud(), "startWriteStream() called when shouldStartWriteStream() is false."), this.Kl.start();
    }, t2.prototype.jl = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                return this.Kl.Cf(), [
                    2
                ];
            });
        });
    }, t2.prototype.Ql = function() {
        var t5 = this;
        return this.F_.vu(this.Kl.lastStreamToken).then(function() {
            for(var e10 = 0, n6 = t5.Dl; e10 < n6.length; e10++){
                var r = n6[e10];
                t5.Kl.yf(r.mutations);
            }
        }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
    }, t2.prototype.Sf = function(t5, e10) {
        var n6 = this;
        assert(this.Dl.length > 0, "Got result for empty write pipeline");
        var r = this.Dl.shift(), i8 = __PRIVATE_MutationBatchResult.from(r, t5, e10, this.Kl.lastStreamToken);
        return this.td.hd(i8).then(function() {
            return n6.Yl();
        });
    }, t2.prototype.ql = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e10 = this;
            return tslib.__generator(this, function(n6) {
                return (void 0) === t5 && assert(!this.ud(), "Write stream was stopped gracefully while still needed."), t5 && this.Dl.length > 0 ? [
                    2,
                    (this.Kl.wf ? this.fd(t5) : this.ld(t5)).then(function() {
                        e10.ud() && e10.ad();
                    })
                ] : [
                    2
                ];
            });
        });
    }, t2.prototype.ld = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(e10) {
                return __PRIVATE_isPermanentError(t5.code) ? (debug(__PRIVATE_LOG_TAG$8, "RemoteStore error before completed handshake; resetting stream token: ", this.Kl.lastStreamToken), this.Kl.lastStreamToken = __PRIVATE_emptyByteString(), [
                    2,
                    this.F_.vu(__PRIVATE_emptyByteString()).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss)
                ]) : [
                    2
                ];
            });
        });
    }, t2.prototype.fd = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e10, n6 = this;
            return tslib.__generator(this, function(r) {
                return __PRIVATE_isPermanentWriteError(t5.code) ? (e10 = this.Dl.shift(), this.Kl.hf(), [
                    2,
                    this.td.dd(e10.batchId, t5).then(function() {
                        return n6.Yl();
                    })
                ]) : [
                    2
                ];
            });
        });
    }, t2.prototype.Td = function() {
        return new Transaction(this.ll);
    }, t2.prototype.Ll = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                switch(t5.label){
                    case 0:
                        return this.networkEnabled = !1, [
                            4,
                            this.Hl()
                        ];
                    case 1:
                        return t5.sent(), this.Gl.set(__PRIVATE_OnlineState.h), [
                            4,
                            this.enableNetwork()
                        ];
                    case 2:
                        return t5.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Ed = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                switch(t5.label){
                    case 0:
                        return this.Ml() ? (debug(__PRIVATE_LOG_TAG$8, "RemoteStore restarting streams for new credential"), [
                            4,
                            this.Ll()
                        ]) : [
                            3,
                            2
                        ];
                    case 1:
                        t5.sent(), t5.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Pd = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(e10) {
                switch(e10.label){
                    case 0:
                        return this.isPrimary = t5, t5 && this.networkEnabled ? [
                            4,
                            this.enableNetwork()
                        ] : [
                            3,
                            2
                        ];
                    case 1:
                        return e10.sent(), [
                            3,
                            4
                        ];
                    case 2:
                        return t5 ? [
                            3,
                            4
                        ] : [
                            4,
                            this.Hl()
                        ];
                    case 3:
                        e10.sent(), this.Gl.set(__PRIVATE_OnlineState.h), e10.label = 4;
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2;
}(), CLIENT_STATE_KEY_PREFIX = "firestore_clients";
function createWebStorageClientStateKey(t2, e10) {
    return assert(-1 === e10.indexOf("_"), "Client key cannot contain '_', but was '" + e10 + "'"), CLIENT_STATE_KEY_PREFIX + "_" + t2 + "_" + e10;
}
var MUTATION_BATCH_KEY_PREFIX = "firestore_mutations";
function createWebStorageMutationBatchKey(t2, e10, n6) {
    var r = MUTATION_BATCH_KEY_PREFIX + "_" + t2 + "_" + n6;
    return e10.R() && (r += "_" + e10.uid), r;
}
var QUERY_TARGET_KEY_PREFIX = "firestore_targets";
function createWebStorageQueryTargetMetadataKey(t2, e10) {
    return QUERY_TARGET_KEY_PREFIX + "_" + t2 + "_" + e10;
}
var ONLINE_STATE_KEY_PREFIX = "firestore_online_state";
function createWebStorageOnlineStateKey(t2) {
    return ONLINE_STATE_KEY_PREFIX + "_" + t2;
}
var SEQUENCE_NUMBER_KEY_PREFIX = "firestore_sequence_number";
function createWebStorageSequenceNumberKey(t2) {
    return SEQUENCE_NUMBER_KEY_PREFIX + "_" + t2;
}
var __PRIVATE_LOG_TAG$9 = "SharedClientState", __PRIVATE_MutationMetadata = function() {
    function t2(t5, e10, n6, r) {
        this.user = t5, this.batchId = e10, this.state = n6, this.error = r, assert((void 0) !== r == ("rejected" === n6), "MutationMetadata must contain an error iff state is 'rejected'");
    }
    return t2.Ad = function(e10, n6, r) {
        var i8 = JSON.parse(r), s = "object" == typeof i8 && -1 !== [
            "pending",
            "acknowledged",
            "rejected"
        ].indexOf(i8.state) && ((void 0) === i8.error || "object" == typeof i8.error), o = void 0;
        return s && i8.error && (s = "string" == typeof i8.error.message && "string" == typeof i8.error.code) && (o = new FirestoreError(i8.error.code, i8.error.message)), s ? new t2(e10, n6, i8.state, o) : (error(__PRIVATE_LOG_TAG$9, "Failed to parse mutation state for ID '" + n6 + "': " + r), null);
    }, t2.prototype.Rd = function() {
        var t5 = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t5.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t5);
    }, t2;
}(), __PRIVATE_QueryTargetMetadata = function() {
    function t2(t5, e10, n6) {
        this.targetId = t5, this.state = e10, this.error = n6, assert((void 0) !== n6 == ("rejected" === e10), "QueryTargetMetadata must contain an error iff state is 'rejected'");
    }
    return t2.Ad = function(e10, n6) {
        var r = JSON.parse(n6), i8 = "object" == typeof r && -1 !== [
            "not-current",
            "current",
            "rejected"
        ].indexOf(r.state) && ((void 0) === r.error || "object" == typeof r.error), s = void 0;
        return i8 && r.error && (i8 = "string" == typeof r.error.message && "string" == typeof r.error.code) && (s = new FirestoreError(r.error.code, r.error.message)), i8 ? new t2(e10, r.state, s) : (error(__PRIVATE_LOG_TAG$9, "Failed to parse target state for ID '" + e10 + "': " + n6), null);
    }, t2.prototype.Rd = function() {
        var t5 = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t5.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t5);
    }, t2;
}(), __PRIVATE_RemoteClientState = function() {
    function t2(t5, e10) {
        this.clientId = t5, this.activeTargetIds = e10;
    }
    return t2.Ad = function(e10, n6) {
        for(var r = JSON.parse(n6), i8 = "object" == typeof r && r.activeTargetIds instanceof Array, s = __PRIVATE_targetIdSet(), o = 0; i8 && o < r.activeTargetIds.length; ++o)i8 = isSafeInteger(r.activeTargetIds[o]), s = s.add(r.activeTargetIds[o]);
        return i8 ? new t2(e10, s) : (error(__PRIVATE_LOG_TAG$9, "Failed to parse client data for instance '" + e10 + "': " + n6), null);
    }, t2;
}(), __PRIVATE_SharedOnlineState = function() {
    function t2(t5, e10) {
        this.clientId = t5, this.onlineState = e10;
    }
    return t2.Ad = function(e10) {
        var n6 = JSON.parse(e10);
        return "object" == typeof n6 && n6.onlineState in __PRIVATE_OnlineState && "string" == typeof n6.clientId ? new t2(n6.clientId, __PRIVATE_OnlineState[n6.onlineState]) : (error(__PRIVATE_LOG_TAG$9, "Failed to parse online state: " + e10), null);
    }, t2;
}(), __PRIVATE_LocalClientState = function() {
    function t2() {
        this.activeTargetIds = __PRIVATE_targetIdSet();
    }
    return t2.prototype.Id = function(t5) {
        this.activeTargetIds = this.activeTargetIds.add(t5);
    }, t2.prototype.Vd = function(t5) {
        this.activeTargetIds = this.activeTargetIds.delete(t5);
    }, t2.prototype.Rd = function() {
        var t5 = {
            activeTargetIds: this.activeTargetIds.st(),
            updateTimeMs: Date.now()
        };
        return JSON.stringify(t5);
    }, t2;
}(), __PRIVATE_WebStorageSharedClientState = function() {
    function t2(e10, n6, r, i8, s) {
        if (this.wc = e10, this.platform = n6, this.persistenceKey = r, this.md = i8, this.td = null, this.Vl = null, this.Es = null, this.vd = {
        }, this.pd = this.bd.bind(this), this.Ea = !1, this.gd = [], !t2.Xo(this.platform)) throw new FirestoreError(Code.UNIMPLEMENTED, "LocalStorage is not available on this platform.");
        var o = r.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.platform.window.localStorage, this.currentUser = s, this.wd = createWebStorageClientStateKey(this.persistenceKey, this.md), this.yd = createWebStorageSequenceNumberKey(this.persistenceKey), this.vd[this.md] = new __PRIVATE_LocalClientState, this.Sd = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + o + "_([^_]*)$"), this.Dd = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + o + "_(\\d+)(?:_(.*))?$"), this.Cd = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + o + "_(\\d+)$"), this.Od = createWebStorageOnlineStateKey(this.persistenceKey), this.platform.window.addEventListener("storage", this.pd);
    }
    return t2.Xo = function(t5) {
        return !(!t5.window || null == t5.window.localStorage);
    }, t2.prototype.start = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var t5, e10, n6, r, i8, s, o, u, a, _, c, h = this;
            return tslib.__generator(this, function(f) {
                switch(f.label){
                    case 0:
                        return assert(!this.Ea, "WebStorageSharedClientState already started"), assert(null !== this.td, "syncEngine property must be set before calling start()"), assert(null !== this.Vl, "onlineStateHandler property must be set before calling start()"), [
                            4,
                            this.td.s_()
                        ];
                    case 1:
                        for(t5 = f.sent(), e10 = 0, n6 = t5; e10 < n6.length; e10++)(r = n6[e10]) !== this.md && (i8 = this.getItem(createWebStorageClientStateKey(this.persistenceKey, r))) && (s = __PRIVATE_RemoteClientState.Ad(r, i8)) && (this.vd[s.clientId] = s);
                        for(this.Fd(), (o = this.storage.getItem(this.Od)) && (u = this.Nd(o)) && this.Md(u), a = 0, _ = this.gd; a < _.length; a++)c = _[a], this.bd(c);
                        return this.gd = [], this.platform.window.addEventListener("unload", function() {
                            return h.shutdown();
                        }), this.Ea = !0, [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Rs = function(t5) {
        this.setItem(this.yd, JSON.stringify(t5));
    }, t2.prototype.Ld = function() {
        var t5 = __PRIVATE_targetIdSet();
        return forEach(this.vd, function(e10, n6) {
            t5 = t5.$t(n6.activeTargetIds);
        }), t5;
    }, t2.prototype.Gd = function(t5) {
        for(var e10 in this.vd)if (this.vd.hasOwnProperty(e10) && this.vd[e10].activeTargetIds.has(t5)) return !0;
        return !1;
    }, t2.prototype.Bd = function(t5) {
        this.Ud(t5, "pending");
    }, t2.prototype.kd = function(t5, e10, n6) {
        this.Ud(t5, e10, n6), this.xd(t5);
    }, t2.prototype.Kd = function(t5) {
        var e10 = "not-current";
        if (this.Gd(t5)) {
            var n6 = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, t5));
            if (n6) {
                var r = __PRIVATE_QueryTargetMetadata.Ad(t5, n6);
                r && (e10 = r.state);
            }
        }
        return this.jd.Id(t5), this.Fd(), e10;
    }, t2.prototype.qd = function(t5) {
        this.jd.Vd(t5), this.Fd();
    }, t2.prototype.Qd = function(t5) {
        return this.jd.activeTargetIds.has(t5);
    }, t2.prototype.Wd = function(t5) {
        this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, t5));
    }, t2.prototype.$d = function(t5, e10, n7) {
        this.Yd(t5, e10, n7);
    }, t2.prototype.wa = function(t5, e10, n7) {
        var r = this;
        e10.forEach(function(t6) {
            r.xd(t6);
        }), this.currentUser = t5, n7.forEach(function(t6) {
            r.Bd(t6);
        });
    }, t2.prototype.Hd = function(t5) {
        this.Xd(t5);
    }, t2.prototype.shutdown = function() {
        this.Ea && (this.platform.window.removeEventListener("storage", this.pd), this.removeItem(this.wd), this.Ea = !1);
    }, t2.prototype.getItem = function(t5) {
        var e10 = this.storage.getItem(t5);
        return debug(__PRIVATE_LOG_TAG$9, "READ", t5, e10), e10;
    }, t2.prototype.setItem = function(t5, e10) {
        debug(__PRIVATE_LOG_TAG$9, "SET", t5, e10), this.storage.setItem(t5, e10);
    }, t2.prototype.removeItem = function(t5) {
        debug(__PRIVATE_LOG_TAG$9, "REMOVE", t5), this.storage.removeItem(t5);
    }, t2.prototype.bd = function(t5) {
        var e10 = this;
        if (t5.storageArea === this.storage) {
            if (debug(__PRIVATE_LOG_TAG$9, "EVENT", t5.key, t5.newValue), t5.key === this.wd) return void error("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            this.wc.Us(function() {
                return tslib.__awaiter(e10, void 0, void 0, function() {
                    var e12, n7, r, i8, s, o;
                    return tslib.__generator(this, function(u) {
                        if (!this.Ea) return this.gd.push(t5), [
                            2
                        ];
                        if (null === t5.key) return [
                            2
                        ];
                        if (this.Sd.test(t5.key)) {
                            if (null == t5.newValue) return n7 = this.zd(t5.key), [
                                2,
                                this.Jd(n7, null)
                            ];
                            if (e12 = this.Zd(t5.key, t5.newValue)) return [
                                2,
                                this.Jd(e12.clientId, e12)
                            ];
                        } else if (this.Dd.test(t5.key)) {
                            if (null !== t5.newValue && (r = this.tT(t5.key, t5.newValue))) return [
                                2,
                                this.eT(r)
                            ];
                        } else if (this.Cd.test(t5.key)) {
                            if (null !== t5.newValue && (i8 = this.nT(t5.key, t5.newValue))) return [
                                2,
                                this.rT(i8)
                            ];
                        } else if (t5.key === this.Od) {
                            if (null !== t5.newValue && (s = this.Nd(t5.newValue))) return [
                                2,
                                this.Md(s)
                            ];
                        } else t5.key === this.yd && (assert(!!this.Es, "Missing sequenceNumberHandler"), (o = __PRIVATE_fromWebStorageSequenceNumber(t5.newValue)) !== __PRIVATE_ListenSequence.Is && this.Es(o));
                        return [
                            2
                        ];
                    });
                });
            });
        }
    }, Object.defineProperty(t2.prototype, "jd", {
        get: function() {
            return this.vd[this.md];
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.Fd = function() {
        this.setItem(this.wd, this.jd.Rd());
    }, t2.prototype.Ud = function(t5, e10, n7) {
        var r = new __PRIVATE_MutationMetadata(this.currentUser, t5, e10, n7), i8 = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, t5);
        this.setItem(i8, r.Rd());
    }, t2.prototype.xd = function(t5) {
        var e10 = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, t5);
        this.removeItem(e10);
    }, t2.prototype.Xd = function(t5) {
        var e10 = {
            clientId: this.md,
            onlineState: __PRIVATE_OnlineState[t5]
        };
        this.storage.setItem(this.Od, JSON.stringify(e10));
    }, t2.prototype.Yd = function(t5, e10, n7) {
        var r = createWebStorageQueryTargetMetadataKey(this.persistenceKey, t5), i8 = new __PRIVATE_QueryTargetMetadata(t5, e10, n7);
        this.setItem(r, i8.Rd());
    }, t2.prototype.zd = function(t5) {
        var e10 = this.Sd.exec(t5);
        return e10 ? e10[1] : null;
    }, t2.prototype.Zd = function(t5, e10) {
        var n7 = this.zd(t5);
        return assert(null !== n7, "Cannot parse client state key '" + t5 + "'"), __PRIVATE_RemoteClientState.Ad(n7, e10);
    }, t2.prototype.tT = function(t5, e10) {
        var n7 = this.Dd.exec(t5);
        assert(null !== n7, "Cannot parse mutation batch key '" + t5 + "'");
        var r = Number(n7[1]), i8 = (void 0) !== n7[2] ? n7[2] : null;
        return __PRIVATE_MutationMetadata.Ad(new User(i8), r, e10);
    }, t2.prototype.nT = function(t5, e10) {
        var n7 = this.Cd.exec(t5);
        assert(null !== n7, "Cannot parse query target key '" + t5 + "'");
        var r = Number(n7[1]);
        return __PRIVATE_QueryTargetMetadata.Ad(r, e10);
    }, t2.prototype.Nd = function(t5) {
        return __PRIVATE_SharedOnlineState.Ad(t5);
    }, t2.prototype.eT = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(e10) {
                return t5.user.uid !== this.currentUser.uid ? (debug(__PRIVATE_LOG_TAG$9, "Ignoring mutation for non-active user " + t5.user.uid), [
                    2
                ]) : [
                    2,
                    this.td.iT(t5.batchId, t5.state, t5.error)
                ];
            });
        });
    }, t2.prototype.rT = function(t5) {
        return this.td.sT(t5.targetId, t5.state, t5.error);
    }, t2.prototype.Jd = function(t5, e10) {
        var n7 = this, r = this.Ld();
        e10 ? this.vd[t5] = e10 : delete this.vd[t5];
        var i8 = this.Ld(), s = [], o = [];
        return i8.forEach(function(t6) {
            return tslib.__awaiter(n7, void 0, void 0, function() {
                return tslib.__generator(this, function(e12) {
                    return r.has(t6) || s.push(t6), [
                        2
                    ];
                });
            });
        }), r.forEach(function(t6) {
            return tslib.__awaiter(n7, void 0, void 0, function() {
                return tslib.__generator(this, function(e12) {
                    return i8.has(t6) || o.push(t6), [
                        2
                    ];
                });
            });
        }), this.td.oT(s, o);
    }, t2.prototype.Md = function(t5) {
        this.vd[t5.clientId] && this.Vl(t5.onlineState);
    }, t2;
}();
function __PRIVATE_fromWebStorageSequenceNumber(t2) {
    var e10 = __PRIVATE_ListenSequence.Is;
    if (null != t2) try {
        var n7 = JSON.parse(t2);
        assert("number" == typeof n7, "Found non-numeric sequence number"), e10 = n7;
    } catch (t5) {
        error(__PRIVATE_LOG_TAG$9, "Failed to read sequence number from WebStorage", t5);
    }
    return e10;
}
var __PRIVATE_MemorySharedClientState = function() {
    function t2() {
        this.uT = new __PRIVATE_LocalClientState, this.aT = {
        }, this.td = null, this.Vl = null, this.Es = null;
    }
    return t2.prototype.Bd = function(t5) {
    }, t2.prototype.kd = function(t5, e10, n7) {
    }, t2.prototype.Kd = function(t5) {
        return this.uT.Id(t5), this.aT[t5] || "not-current";
    }, t2.prototype.$d = function(t5, e10, n7) {
        this.aT[t5] = e10;
    }, t2.prototype.qd = function(t5) {
        this.uT.Vd(t5);
    }, t2.prototype.Qd = function(t5) {
        return this.uT.activeTargetIds.has(t5);
    }, t2.prototype.Wd = function(t5) {
        delete this.aT[t5];
    }, t2.prototype.Ld = function() {
        return this.uT.activeTargetIds;
    }, t2.prototype.Gd = function(t5) {
        return this.uT.activeTargetIds.has(t5);
    }, t2.prototype.start = function() {
        return this.uT = new __PRIVATE_LocalClientState, Promise.resolve();
    }, t2.prototype.wa = function(t5, e10, n7) {
    }, t2.prototype.Hd = function(t5) {
    }, t2.prototype.shutdown = function() {
    }, t2.prototype.Rs = function(t5) {
    }, t2;
}(), __PRIVATE_AddedLimboDocument = function(t2) {
    this.key = t2;
}, __PRIVATE_RemovedLimboDocument = function(t2) {
    this.key = t2;
}, __PRIVATE_View = function() {
    function t2(t5, e10) {
        this.query = t5, this._T = e10, this.cT = null, this.ir = !1, this.hT = __PRIVATE_documentKeySet(), this.Yn = __PRIVATE_documentKeySet(), this.fT = new __PRIVATE_DocumentSet(t5.En.bind(t5));
    }
    return Object.defineProperty(t2.prototype, "lT", {
        get: function() {
            return this._T;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.dT = function(t5, e10) {
        var n7 = this, r = e10 ? e10.TT : new __PRIVATE_DocumentChangeSet, i8 = e10 ? e10.fT : this.fT, s = e10 ? e10.Yn : this.Yn, o = i8, u = !1, a = this.query.Vn() && i8.size === this.query.limit ? i8.last() : null, _ = this.query.mn() && i8.size === this.query.limit ? i8.first() : null;
        if (t5.Vt(function(t6, e12) {
            var c = i8.get(t6), h = e12 instanceof Document1 ? e12 : null;
            h && (assert(t6.isEqual(h.key), "Mismatching keys found in document changes: " + t6 + " != " + h.key), h = n7.query.matches(h) ? h : null);
            var f = !!c && n7.Yn.has(c.key), l = !!h && (h.ce || n7.Yn.has(h.key) && h.hasCommittedMutations), d = !1;
            c && h ? c.data().isEqual(h.data()) ? f !== l && (r.track({
                type: __PRIVATE_ChangeType.Kn,
                doc: h
            }), d = !0) : n7.ET(c, h) || (r.track({
                type: __PRIVATE_ChangeType.xn,
                doc: h
            }), d = !0, (a && n7.query.En(h, a) > 0 || _ && n7.query.En(h, _) < 0) && (u = !0)) : !c && h ? (r.track({
                type: __PRIVATE_ChangeType.Un,
                doc: h
            }), d = !0) : c && !h && (r.track({
                type: __PRIVATE_ChangeType.kn,
                doc: c
            }), d = !0, (a || _) && (u = !0));
            d && (h ? (o = o.add(h), s = l ? s.add(t6) : s.delete(t6)) : (o = o.delete(t6), s = s.delete(t6)));
        }), this.query.Vn() || this.query.mn()) for(; o.size > this.query.limit;){
            var c = this.query.Vn() ? o.last() : o.first();
            o = o.delete(c.key), s = s.delete(c.key), r.track({
                type: __PRIVATE_ChangeType.kn,
                doc: c
            });
        }
        return assert(!u || !e10, "View was refilled using docs that themselves needed refilling."), {
            fT: o,
            TT: r,
            Rh: u,
            Yn: s
        };
    }, t2.prototype.ET = function(t5, e10) {
        return t5.ce && e10.hasCommittedMutations && !e10.ce;
    }, t2.prototype.qo = function(t5, e10, n7) {
        var r = this;
        assert(!t5.Rh, "Cannot apply changes that need a refill");
        var i8 = this.fT;
        this.fT = t5.fT, this.Yn = t5.Yn;
        var s = t5.TT.Wn();
        s.sort(function(t6, e12) {
            return __PRIVATE_compareChangeType(t6.type, e12.type) || r.query.En(t6.doc, e12.doc);
        }), this.PT(n7);
        var o = e10 ? this.AT() : [], u = 0 === this.hT.size && this.ir ? __PRIVATE_SyncState.qn : __PRIVATE_SyncState.jn, a = u !== this.cT;
        return this.cT = u, 0 !== s.length || a ? {
            snapshot: new __PRIVATE_ViewSnapshot(this.query, t5.fT, i8, s, t5.Yn, u === __PRIVATE_SyncState.jn, a, !1),
            RT: o
        } : {
            RT: o
        };
    }, t2.prototype.IT = function(t5) {
        return this.ir && t5 === __PRIVATE_OnlineState.T ? (this.ir = !1, this.qo({
            fT: this.fT,
            TT: new __PRIVATE_DocumentChangeSet,
            Yn: this.Yn,
            Rh: !1
        }, !1)) : {
            RT: []
        };
    }, t2.prototype.VT = function(t5) {
        return !this._T.has(t5) && !!this.fT.has(t5) && !this.fT.get(t5).ce;
    }, t2.prototype.PT = function(t5) {
        var e10 = this;
        t5 && (t5.sr.forEach(function(t6) {
            return e10._T = e10._T.add(t6);
        }), t5.or.forEach(function(t6) {
            return assert(e10._T.has(t6), "Modified document " + t6 + " not found in view.");
        }), t5.ur.forEach(function(t6) {
            return e10._T = e10._T.delete(t6);
        }), this.ir = t5.ir);
    }, t2.prototype.AT = function() {
        var t5 = this;
        if (!this.ir) return [];
        var e10 = this.hT;
        this.hT = __PRIVATE_documentKeySet(), this.fT.forEach(function(e12) {
            t5.VT(e12.key) && (t5.hT = t5.hT.add(e12.key));
        });
        var n7 = [];
        return e10.forEach(function(e12) {
            t5.hT.has(e12) || n7.push(new __PRIVATE_RemovedLimboDocument(e12));
        }), this.hT.forEach(function(t6) {
            e10.has(t6) || n7.push(new __PRIVATE_AddedLimboDocument(t6));
        }), n7;
    }, t2.prototype.mT = function(t5) {
        this._T = t5.r_, this.hT = __PRIVATE_documentKeySet();
        var e10 = this.dT(t5.documents);
        return this.qo(e10, !0);
    }, t2.prototype.vT = function() {
        return __PRIVATE_ViewSnapshot.zn(this.query, this.fT, this.Yn, this.cT === __PRIVATE_SyncState.jn);
    }, t2;
}();
function __PRIVATE_compareChangeType(t2, e10) {
    var n7 = function(t5) {
        switch(t5){
            case __PRIVATE_ChangeType.Un:
                return 1;
            case __PRIVATE_ChangeType.xn:
            case __PRIVATE_ChangeType.Kn:
                return 2;
            case __PRIVATE_ChangeType.kn:
                return 0;
            default:
                return fail("Unknown ChangeType: " + t5);
        }
    };
    return n7(t2) - n7(e10);
}
var __PRIVATE_RETRY_COUNT = 5, __PRIVATE_TransactionRunner = function() {
    function t2(t5, e10, n7, r) {
        this.Ds = t5, this.pT = e10, this.updateFunction = n7, this.Ns = r, this.bT = __PRIVATE_RETRY_COUNT, this.uf = new __PRIVATE_ExponentialBackoff(this.Ds, __PRIVATE_TimerId.Ss);
    }
    return t2.prototype.run = function() {
        this.gT();
    }, t2.prototype.gT = function() {
        var t5 = this;
        this.uf.Xh(function() {
            return tslib.__awaiter(t5, void 0, void 0, function() {
                var t6, e10, n7 = this;
                return tslib.__generator(this, function(r) {
                    return t6 = this.pT.Td(), (e10 = this.wT(t6)) && e10.then(function(e12) {
                        n7.Ds.Us(function() {
                            return t6.commit().then(function() {
                                n7.Ns.resolve(e12);
                            }).catch(function(t7) {
                                n7.yT(t7);
                            });
                        });
                    }).catch(function(t7) {
                        n7.yT(t7);
                    }), [
                        2
                    ];
                });
            });
        });
    }, t2.prototype.wT = function(t5) {
        try {
            var e10 = this.updateFunction(t5);
            return !isNullOrUndefined(e10) && e10.catch && e10.then ? e10 : (this.Ns.reject(Error("Transaction callback must return a Promise")), null);
        } catch (t6) {
            return this.Ns.reject(t6), null;
        }
    }, t2.prototype.yT = function(t5) {
        var e10 = this;
        this.bT > 0 && this.ST(t5) ? (this.bT -= 1, this.Ds.Us(function() {
            return e10.gT(), Promise.resolve();
        })) : this.Ns.reject(t5);
    }, t2.prototype.ST = function(t5) {
        if ("FirebaseError" === t5.name) {
            var e10 = t5.code;
            return "aborted" === e10 || "failed-precondition" === e10 || !__PRIVATE_isPermanentError(e10);
        }
        return !1;
    }, t2;
}(), __PRIVATE_LOG_TAG$a = "SyncEngine", __PRIVATE_QueryView = function(t2, e12, n7) {
    this.query = t2, this.targetId = e12, this.view = n7;
}, __PRIVATE_LimboResolution = function(t2) {
    this.key = t2, this.DT = !1;
}, __PRIVATE_SyncEngine = function() {
    function t2(t5, e12, n7, r) {
        this.F_ = t5, this.pT = e12, this.CT = n7, this.currentUser = r, this.OT = null, this.FT = new __PRIVATE_ObjectMap(function(t6) {
            return t6.canonicalId();
        }), this.NT = {
        }, this.MT = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H), this.LT = {
        }, this.GT = new __PRIVATE_ReferenceSet, this.BT = {
        }, this.UT = new Map, this.kT = __PRIVATE_TargetIdGenerator.Yu(), this.isPrimary = void 0, this.onlineState = __PRIVATE_OnlineState.h;
    }
    return Object.defineProperty(t2.prototype, "xT", {
        get: function() {
            return !0 === this.isPrimary;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.subscribe = function(t5) {
        assert(null !== t5, "SyncEngine listener cannot be null"), assert(null === this.OT, "SyncEngine already has a subscriber."), this.OT = t5;
    }, t2.prototype.listen = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n7, r, i8, s;
            return tslib.__generator(this, function(o) {
                switch(o.label){
                    case 0:
                        return this.KT("listen()"), (r = this.FT.get(t5)) ? (e12 = r.targetId, this.CT.Kd(e12), n7 = r.view.vT(), [
                            3,
                            4
                        ]) : [
                            3,
                            1
                        ];
                    case 1:
                        return [
                            4,
                            this.F_.Xa(t5.Tn())
                        ];
                    case 2:
                        return i8 = o.sent(), s = this.CT.Kd(i8.targetId), e12 = i8.targetId, [
                            4,
                            this.jT(t5, e12, "current" === s)
                        ];
                    case 3:
                        n7 = o.sent(), this.isPrimary && this.pT.listen(i8), o.label = 4;
                    case 4:
                        return this.OT.pf([
                            n7
                        ]), [
                            2,
                            e12
                        ];
                }
            });
        });
    }, t2.prototype.jT = function(t5, e12, n7) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var r, i8, s, o, u, a;
            return tslib.__generator(this, function(_) {
                switch(_.label){
                    case 0:
                        return [
                            4,
                            this.F_.e_(t5, !0)
                        ];
                    case 1:
                        return r = _.sent(), i8 = new __PRIVATE_View(t5, r.r_), s = i8.dT(r.documents), o = TargetChange.rr(e12, n7 && this.onlineState !== __PRIVATE_OnlineState.T), assert(0 === (u = i8.qo(s, !0 === this.isPrimary, o)).RT.length, "View returned limbo docs before target ack from the server."), assert(!!u.snapshot, "applyChanges for new view should always return a snapshot"), a = new __PRIVATE_QueryView(t5, e12, i8), this.FT.set(t5, a), this.NT[e12] || (this.NT[e12] = []), this.NT[e12].push(t5), [
                            2,
                            u.snapshot
                        ];
                }
            });
        });
    }, t2.prototype.qT = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n7;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return [
                            4,
                            this.F_.e_(t5.query, !0)
                        ];
                    case 1:
                        return e12 = r.sent(), n7 = t5.view.mT(e12), this.isPrimary && this.QT(t5.targetId, n7.RT), [
                            2,
                            n7
                        ];
                }
            });
        });
    }, t2.prototype.Jl = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n7, r = this;
            return tslib.__generator(this, function(i8) {
                switch(i8.label){
                    case 0:
                        return this.KT("unlisten()"), assert(!!(e12 = this.FT.get(t5)), "Trying to unlisten on query not found:" + t5), (n7 = this.NT[e12.targetId]).length > 1 ? (this.NT[e12.targetId] = n7.filter(function(e13) {
                            return !e13.isEqual(t5);
                        }), this.FT.delete(t5), [
                            2
                        ]) : this.isPrimary ? (this.CT.qd(e12.targetId), this.CT.Gd(e12.targetId) ? [
                            3,
                            2
                        ] : [
                            4,
                            this.F_.t_(e12.targetId, !1).then(function() {
                                r.CT.Wd(e12.targetId), r.pT.Jl(e12.targetId), r.WT(e12.targetId);
                            }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss)
                        ]) : [
                            3,
                            3
                        ];
                    case 1:
                        i8.sent(), i8.label = 2;
                    case 2:
                        return [
                            3,
                            5
                        ];
                    case 3:
                        return this.WT(e12.targetId), [
                            4,
                            this.F_.t_(e12.targetId, !0)
                        ];
                    case 4:
                        i8.sent(), i8.label = 5;
                    case 5:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.write = function(t5, e12) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n7;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return this.KT("write()"), [
                            4,
                            this.F_.Ca(t5)
                        ];
                    case 1:
                        return n7 = r.sent(), this.CT.Bd(n7.batchId), this.$T(n7.batchId, e12), [
                            4,
                            this.YT(n7.Mo)
                        ];
                    case 2:
                        return r.sent(), [
                            4,
                            this.pT.Yl()
                        ];
                    case 3:
                        return r.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.runTransaction = function(t5, e12, n7) {
        new __PRIVATE_TransactionRunner(t5, this.pT, e12, n7).run();
    }, t2.prototype.Ba = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n7 = this;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        this.KT("applyRemoteEvent()"), r.label = 1;
                    case 1:
                        return r.trys.push([
                            1,
                            4,
                            ,
                            6
                        ]), [
                            4,
                            this.F_.Ba(t5)
                        ];
                    case 2:
                        return e12 = r.sent(), forEach(t5.Jn, function(t6, e13) {
                            var r1 = n7.LT[Number(t6)];
                            r1 && (assert(e13.sr.size + e13.or.size + e13.ur.size <= 1, "Limbo resolution for single document contains multiple changes."), e13.sr.size > 0 ? r1.DT = !0 : e13.or.size > 0 ? assert(r1.DT, "Received change for limbo target document without add.") : e13.ur.size > 0 && (assert(r1.DT, "Received remove for limbo target document without add."), r1.DT = !1));
                        }), [
                            4,
                            this.YT(e12, t5)
                        ];
                    case 3:
                        return r.sent(), [
                            3,
                            6
                        ];
                    case 4:
                        return [
                            4,
                            __PRIVATE_ignoreIfPrimaryLeaseLoss(r.sent())
                        ];
                    case 5:
                        return r.sent(), [
                            3,
                            6
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.IT = function(t5, e12) {
        if (this.isPrimary && e12 === __PRIVATE_OnlineStateSource.P || !this.isPrimary && e12 === __PRIVATE_OnlineStateSource.A) {
            this.KT("applyOnlineStateChange()");
            var n7 = [];
            this.FT.forEach(function(e13, r) {
                var i8 = r.view.IT(t5);
                assert(0 === i8.RT.length, "OnlineState should not affect limbo documents."), i8.snapshot && n7.push(i8.snapshot);
            }), this.OT.HT(t5), this.OT.pf(n7), this.onlineState = t5, this.isPrimary && this.CT.Hd(t5);
        }
    }, t2.prototype.rd = function(t5, e12) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n8, r, i8, s, o, u = this;
            return tslib.__generator(this, function(a) {
                switch(a.label){
                    case 0:
                        return this.KT("rejectListens()"), this.CT.$d(t5, "rejected", e12), n8 = this.LT[t5], (r = n8 && n8.key) ? (this.MT = this.MT.remove(r), delete this.LT[t5], i8 = (i8 = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H)).Pt(r, new __PRIVATE_NoDocument(r, __PRIVATE_SnapshotVersion.W())), s = __PRIVATE_documentKeySet().add(r), o = new __PRIVATE_RemoteEvent(__PRIVATE_SnapshotVersion.MIN, {
                        }, new __PRIVATE_SortedSet(__PRIVATE_primitiveComparator), i8, s), [
                            2,
                            this.Ba(o)
                        ]) : [
                            3,
                            1
                        ];
                    case 1:
                        return [
                            4,
                            this.F_.t_(t5, !1).then(function() {
                                return u.WT(t5, e12);
                            }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss)
                        ];
                    case 2:
                        a.sent(), a.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.iT = function(t5, e12, n8) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var r;
            return tslib.__generator(this, function(i8) {
                switch(i8.label){
                    case 0:
                        return this.KT("applyBatchState()"), [
                            4,
                            this.F_.Oa(t5)
                        ];
                    case 1:
                        return null === (r = i8.sent()) ? (debug(__PRIVATE_LOG_TAG$a, "Cannot apply mutation batch with id: " + t5), [
                            2
                        ]) : "pending" !== e12 ? [
                            3,
                            3
                        ] : [
                            4,
                            this.pT.Yl()
                        ];
                    case 2:
                        return i8.sent(), [
                            3,
                            4
                        ];
                    case 3:
                        "acknowledged" === e12 || "rejected" === e12 ? (this.XT(t5, n8 || null), this.F_.o_(t5)) : fail("Unknown batchState: " + e12), i8.label = 4;
                    case 4:
                        return [
                            4,
                            this.YT(r)
                        ];
                    case 5:
                        return i8.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.hd = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n8;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        this.KT("applySuccessfulWrite()"), e12 = t5.batch.batchId, this.XT(e12, null), this.zT(e12), r.label = 1;
                    case 1:
                        return r.trys.push([
                            1,
                            4,
                            ,
                            6
                        ]), [
                            4,
                            this.F_.Iu(t5)
                        ];
                    case 2:
                        return n8 = r.sent(), this.CT.kd(e12, "acknowledged"), [
                            4,
                            this.YT(n8)
                        ];
                    case 3:
                        return r.sent(), [
                            3,
                            6
                        ];
                    case 4:
                        return [
                            4,
                            __PRIVATE_ignoreIfPrimaryLeaseLoss(r.sent())
                        ];
                    case 5:
                        return r.sent(), [
                            3,
                            6
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.dd = function(t5, e12) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n8;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        this.KT("rejectFailedWrite()"), this.XT(t5, e12), this.zT(t5), r.label = 1;
                    case 1:
                        return r.trys.push([
                            1,
                            4,
                            ,
                            6
                        ]), [
                            4,
                            this.F_.La(t5)
                        ];
                    case 2:
                        return n8 = r.sent(), this.CT.kd(t5, "rejected", e12), [
                            4,
                            this.YT(n8)
                        ];
                    case 3:
                        return r.sent(), [
                            3,
                            6
                        ];
                    case 4:
                        return [
                            4,
                            __PRIVATE_ignoreIfPrimaryLeaseLoss(r.sent())
                        ];
                    case 5:
                        return r.sent(), [
                            3,
                            6
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.JT = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n8;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return this.pT.Ml() || debug(__PRIVATE_LOG_TAG$a, "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), [
                            4,
                            this.F_.Cu()
                        ];
                    case 1:
                        return (e12 = r.sent()) === __PRIVATE_BATCHID_UNKNOWN ? (t5.resolve(), [
                            2
                        ]) : ((n8 = this.UT.get(e12) || []).push(t5), this.UT.set(e12, n8), [
                            2
                        ]);
                }
            });
        });
    }, t2.prototype.zT = function(t5) {
        (this.UT.get(t5) || []).forEach(function(t6) {
            t6.resolve();
        }), this.UT.delete(t5);
    }, t2.prototype.ZT = function(t5) {
        this.UT.forEach(function(e12) {
            e12.forEach(function(e13) {
                e13.reject(new FirestoreError(Code.CANCELLED, t5));
            });
        }), this.UT.clear();
    }, t2.prototype.$T = function(t5, e12) {
        var n8 = this.BT[this.currentUser.I()];
        n8 || (n8 = new __PRIVATE_SortedMap(__PRIVATE_primitiveComparator)), n8 = n8.Pt(t5, e12), this.BT[this.currentUser.I()] = n8;
    }, t2.prototype.XT = function(t5, e12) {
        var n8 = this.BT[this.currentUser.I()];
        if (n8) {
            var r = n8.get(t5);
            r && (assert(t5 === n8.Rt(), "Mutation callbacks processed out-of-order?"), e12 ? r.reject(e12) : r.resolve(), n8 = n8.remove(t5)), this.BT[this.currentUser.I()] = n8;
        }
    }, t2.prototype.WT = function(t5, e12) {
        var n8 = this;
        (void 0) === e12 && (e12 = null), this.CT.qd(t5), assert(this.NT[t5] && 0 !== this.NT[t5].length, "There are no queries mapped to target id " + t5);
        for(var r = 0, i8 = this.NT[t5]; r < i8.length; r++){
            var s = i8[r];
            this.FT.delete(s), e12 && this.OT.tE(s, e12);
        }
        if (delete this.NT[t5], this.isPrimary) {
            var o = this.GT.Ro(t5);
            this.GT.Po(t5), o.forEach(function(t6) {
                n8.GT.Io(t6) || n8.eE(t6);
            });
        }
    }, t2.prototype.eE = function(t5) {
        var e12 = this.MT.get(t5);
        null !== e12 && (this.pT.Jl(e12), this.MT = this.MT.remove(t5), delete this.LT[e12]);
    }, t2.prototype.QT = function(t5, e12) {
        for(var n8 = 0, r = e12; n8 < r.length; n8++){
            var i8 = r[n8];
            if (i8 instanceof __PRIVATE_AddedLimboDocument) this.GT.fo(i8.key, t5), this.nE(i8);
            else if (i8 instanceof __PRIVATE_RemovedLimboDocument) debug(__PRIVATE_LOG_TAG$a, "Document no longer in limbo: " + i8.key), this.GT.do(i8.key, t5), this.GT.Io(i8.key) || this.eE(i8.key);
            else fail("Unknown limbo change: " + JSON.stringify(i8));
        }
    }, t2.prototype.nE = function(t5) {
        var e12 = t5.key;
        if (!this.MT.get(e12)) {
            debug(__PRIVATE_LOG_TAG$a, "New document in limbo: " + e12);
            var n8 = this.kT.next(), r = Query.rn(e12.path);
            this.LT[n8] = new __PRIVATE_LimboResolution(e12), this.pT.listen(new __PRIVATE_TargetData(r.Tn(), n8, __PRIVATE_TargetPurpose.Dn, __PRIVATE_ListenSequence.Is)), this.MT = this.MT.Pt(e12, n8);
        }
    }, t2.prototype.rE = function() {
        return this.MT;
    }, t2.prototype.YT = function(t5, e12) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n9, r, i9, s = this;
            return tslib.__generator(this, function(o) {
                switch(o.label){
                    case 0:
                        return n9 = [], r = [], i9 = [], this.FT.forEach(function(o1, u) {
                            i9.push(Promise.resolve().then(function() {
                                var e13 = u.view.dT(t5);
                                return e13.Rh ? s.F_.e_(u.query, !1).then(function(t6) {
                                    var n10 = t6.documents;
                                    return u.view.dT(n10, e13);
                                }) : e13;
                            }).then(function(t6) {
                                var i10 = e12 && e12.Jn[u.targetId], o2 = u.view.qo(t6, !0 === s.isPrimary, i10);
                                if (s.QT(u.targetId, o2.RT), o2.snapshot) {
                                    s.isPrimary && s.CT.$d(u.targetId, o2.snapshot.fromCache ? "not-current" : "current"), n9.push(o2.snapshot);
                                    var a = __PRIVATE_LocalViewChanges.ca(u.targetId, o2.snapshot);
                                    r.push(a);
                                }
                            }));
                        }), [
                            4,
                            Promise.all(i9)
                        ];
                    case 1:
                        return o.sent(), this.OT.pf(n9), [
                            4,
                            this.F_.$a(r)
                        ];
                    case 2:
                        return o.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.KT = function(t5) {
        assert(null !== this.OT, "Trying to call " + t5 + " before calling subscribe().");
    }, t2.prototype.Ed = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n9;
            return tslib.__generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return e12 = !this.currentUser.isEqual(t5), this.currentUser = t5, e12 ? (this.ZT("'waitForPendingWrites' promise is rejected due to a user change."), [
                            4,
                            this.F_.wa(t5)
                        ]) : [
                            3,
                            3
                        ];
                    case 1:
                        return n9 = r.sent(), this.CT.wa(t5, n9.Sa, n9.Da), [
                            4,
                            this.YT(n9.ya)
                        ];
                    case 2:
                        r.sent(), r.label = 3;
                    case 3:
                        return [
                            4,
                            this.pT.Ed()
                        ];
                    case 4:
                        return r.sent(), [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.Pd = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n9, r, i9, s, o, u = this;
            return tslib.__generator(this, function(a) {
                switch(a.label){
                    case 0:
                        return !0 !== t5 || !0 === this.isPrimary ? [
                            3,
                            3
                        ] : (this.isPrimary = !0, [
                            4,
                            this.pT.Pd(!0)
                        ]);
                    case 1:
                        return a.sent(), s = this.CT.Ld(), [
                            4,
                            this.iE(s.st())
                        ];
                    case 2:
                        for(e12 = a.sent(), n9 = 0, r = e12; n9 < r.length; n9++)i9 = r[n9], this.pT.listen(i9);
                        return [
                            3,
                            7
                        ];
                    case 3:
                        return !1 !== t5 || !1 === this.isPrimary ? [
                            3,
                            7
                        ] : (this.isPrimary = !1, s = [], o = Promise.resolve(), __PRIVATE_forEachNumber(this.NT, function(t6, e13) {
                            u.CT.Qd(t6) ? s.push(t6) : o = o.then(function() {
                                return u.WT(t6), u.F_.t_(t6, !0);
                            }), u.pT.Jl(t6);
                        }), [
                            4,
                            o
                        ]);
                    case 4:
                        return a.sent(), [
                            4,
                            this.iE(s)
                        ];
                    case 5:
                        return a.sent(), this.sE(), [
                            4,
                            this.pT.Pd(!1)
                        ];
                    case 6:
                        a.sent(), a.label = 7;
                    case 7:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.sE = function() {
        var t5 = this;
        __PRIVATE_forEachNumber(this.LT, function(e12) {
            t5.pT.Jl(e12);
        }), this.GT.Ao(), this.LT = [], this.MT = new __PRIVATE_SortedMap(__PRIVATE_DocumentKey.H);
    }, t2.prototype.iE = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n9, r, i9, s, o, u, a, _, c, h, f, l;
            return tslib.__generator(this, function(d) {
                switch(d.label){
                    case 0:
                        e12 = [], n9 = [], r = 0, i9 = t5, d.label = 1;
                    case 1:
                        return r < i9.length ? (s = i9[r], o = void 0, (u = this.NT[s]) && 0 !== u.length ? [
                            4,
                            this.F_.t_(s, !0)
                        ] : [
                            3,
                            8
                        ]) : [
                            3,
                            14
                        ];
                    case 2:
                        return d.sent(), [
                            4,
                            this.F_.Xa(u[0].Tn())
                        ];
                    case 3:
                        o = d.sent(), a = 0, _ = u, d.label = 4;
                    case 4:
                        return a < _.length ? (c = _[a], assert(!!(h = this.FT.get(c)), "No query view found for " + c), [
                            4,
                            this.qT(h)
                        ]) : [
                            3,
                            7
                        ];
                    case 5:
                        (f = d.sent()).snapshot && n9.push(f.snapshot), d.label = 6;
                    case 6:
                        return a++, [
                            3,
                            4
                        ];
                    case 7:
                        return [
                            3,
                            12
                        ];
                    case 8:
                        return assert(!0 === this.isPrimary, "A secondary tab should never have an active target without an active query."), [
                            4,
                            this.F_.c_(s)
                        ];
                    case 9:
                        return assert(!!(l = d.sent()), "Target for id " + s + " not found"), [
                            4,
                            this.F_.Xa(l)
                        ];
                    case 10:
                        return o = d.sent(), [
                            4,
                            this.jT(this.oE(l), s, !1)
                        ];
                    case 11:
                        d.sent(), d.label = 12;
                    case 12:
                        e12.push(o), d.label = 13;
                    case 13:
                        return r++, [
                            3,
                            1
                        ];
                    case 14:
                        return this.OT.pf(n9), [
                            2,
                            e12
                        ];
                }
            });
        });
    }, t2.prototype.oE = function(t5) {
        return new Query(t5.path, t5.collectionGroup, t5.orderBy, t5.filters, t5.limit, __PRIVATE_LimitType.Xe, t5.startAt, t5.endAt);
    }, t2.prototype.s_ = function() {
        return this.F_.s_();
    }, t2.prototype.sT = function(t5, e12, n9) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var r, i9;
            return tslib.__generator(this, function(s) {
                switch(s.label){
                    case 0:
                        if (this.isPrimary) return debug(__PRIVATE_LOG_TAG$a, "Ignoring unexpected query state notification."), [
                            2
                        ];
                        if (!this.NT[t5]) return [
                            3,
                            7
                        ];
                        switch(e12){
                            case "current":
                            case "not-current":
                                return [
                                    3,
                                    1
                                ];
                            case "rejected":
                                return [
                                    3,
                                    4
                                ];
                        }
                        return [
                            3,
                            6
                        ];
                    case 1:
                        return [
                            4,
                            this.F_.h_()
                        ];
                    case 2:
                        return r = s.sent(), i9 = __PRIVATE_RemoteEvent.nr(t5, "current" === e12), [
                            4,
                            this.YT(r, i9)
                        ];
                    case 3:
                        return s.sent(), [
                            3,
                            7
                        ];
                    case 4:
                        return [
                            4,
                            this.F_.t_(t5, !0)
                        ];
                    case 5:
                        return s.sent(), this.WT(t5, n9), [
                            3,
                            7
                        ];
                    case 6:
                        fail("Unexpected target state: " + e12), s.label = 7;
                    case 7:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.oT = function(t5, e12) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var n9, r, i9, s, o, u, a, _, c, h = this;
            return tslib.__generator(this, function(f) {
                switch(f.label){
                    case 0:
                        if (!this.isPrimary) return [
                            2
                        ];
                        n9 = 0, r = t5, f.label = 1;
                    case 1:
                        return n9 < r.length ? (c = r[n9], assert(!this.NT[c], "Trying to add an already active target"), [
                            4,
                            this.F_.c_(c)
                        ]) : [
                            3,
                            6
                        ];
                    case 2:
                        return assert(!!(i9 = f.sent()), "Query data for active target " + c + " not found"), [
                            4,
                            this.F_.Xa(i9)
                        ];
                    case 3:
                        return s = f.sent(), [
                            4,
                            this.jT(this.oE(i9), s.targetId, !1)
                        ];
                    case 4:
                        f.sent(), this.pT.listen(s), f.label = 5;
                    case 5:
                        return n9++, [
                            3,
                            1
                        ];
                    case 6:
                        o = function(t6) {
                            return tslib.__generator(this, function(e13) {
                                switch(e13.label){
                                    case 0:
                                        return u.NT[t6] ? [
                                            4,
                                            u.F_.t_(t6, !1).then(function() {
                                                h.pT.Jl(t6), h.WT(t6);
                                            }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss)
                                        ] : [
                                            2,
                                            "continue"
                                        ];
                                    case 1:
                                        return e13.sent(), [
                                            2
                                        ];
                                }
                            });
                        }, u = this, a = 0, _ = e12, f.label = 7;
                    case 7:
                        return a < _.length ? (c = _[a], [
                            5,
                            o(c)
                        ]) : [
                            3,
                            10
                        ];
                    case 8:
                        f.sent(), f.label = 9;
                    case 9:
                        return a++, [
                            3,
                            7
                        ];
                    case 10:
                        return [
                            2
                        ];
                }
            });
        });
    }, t2.prototype.enableNetwork = function() {
        return this.F_.u_(!0), this.pT.enableNetwork();
    }, t2.prototype.disableNetwork = function() {
        return this.F_.u_(!1), this.pT.disableNetwork();
    }, t2.prototype.Hr = function(t5) {
        var e12 = this.LT[t5];
        if (e12 && e12.DT) return __PRIVATE_documentKeySet().add(e12.key);
        var n9 = __PRIVATE_documentKeySet(), r = this.NT[t5];
        if (!r) return n9;
        for(var i9 = 0, s = r; i9 < s.length; i9++){
            var o = s[i9], u = this.FT.get(o);
            assert(!!u, "No query view found for " + o), n9 = n9.$t(u.view.lT);
        }
        return n9;
    }, t2;
}(), __PRIVATE_QueryListenersInfo = function() {
    this.uE = null, this.targetId = 0, this.listeners = [];
}, __PRIVATE_EventManager = function() {
    function t2(t5) {
        this.td = t5, this.aE = new __PRIVATE_ObjectMap(function(t6) {
            return t6.canonicalId();
        }), this.onlineState = __PRIVATE_OnlineState.h, this._E = new Set, this.td.subscribe(this);
    }
    return t2.prototype.listen = function(t5) {
        var e12 = t5.query, n9 = !1, r = this.aE.get(e12);
        (r || (n9 = !0, r = new __PRIVATE_QueryListenersInfo, this.aE.set(e12, r)), r.listeners.push(t5), assert(!t5.IT(this.onlineState), "applyOnlineStateChange() shouldn't raise an event for brand-new listeners."), r.uE) && t5.cE(r.uE) && this.hE();
        return n9 ? this.td.listen(e12).then(function(t6) {
            return r.targetId = t6, t6;
        }) : Promise.resolve(r.targetId);
    }, t2.prototype.Jl = function(t5) {
        return tslib.__awaiter(this, void 0, void 0, function() {
            var e12, n9, r, i9;
            return tslib.__generator(this, function(s) {
                return e12 = t5.query, n9 = !1, (r = this.aE.get(e12)) && (i9 = r.listeners.indexOf(t5)) >= 0 && (r.listeners.splice(i9, 1), n9 = 0 === r.listeners.length), n9 ? (this.aE.delete(e12), [
                    2,
                    this.td.Jl(e12)
                ]) : [
                    2
                ];
            });
        });
    }, t2.prototype.pf = function(t5) {
        for(var e12 = !1, n9 = 0, r = t5; n9 < r.length; n9++){
            var i9 = r[n9], s = i9.query, o = this.aE.get(s);
            if (o) {
                for(var u = 0, a = o.listeners; u < a.length; u++)a[u].cE(i9) && (e12 = !0);
                o.uE = i9;
            }
        }
        e12 && this.hE();
    }, t2.prototype.tE = function(t5, e12) {
        var n9 = this.aE.get(t5);
        if (n9) for(var r = 0, i10 = n9.listeners; r < i10.length; r++)i10[r].onError(e12);
        this.aE.delete(t5);
    }, t2.prototype.HT = function(t5) {
        this.onlineState = t5;
        var e12 = !1;
        this.aE.forEach(function(n9, r) {
            for(var i10 = 0, s = r.listeners; i10 < s.length; i10++)s[i10].IT(t5) && (e12 = !0);
        }), e12 && this.hE();
    }, t2.prototype.fE = function(t5) {
        this._E.add(t5), t5.next();
    }, t2.prototype.lE = function(t5) {
        this._E.delete(t5);
    }, t2.prototype.hE = function() {
        this._E.forEach(function(t5) {
            t5.next();
        });
    }, t2;
}(), __PRIVATE_QueryListener = function() {
    function t2(t5, e12, n9) {
        this.query = t5, this.dE = e12, this.TE = !1, this.EE = null, this.onlineState = __PRIVATE_OnlineState.h, this.options = n9 || {
        };
    }
    return t2.prototype.cE = function(t5) {
        if (assert(t5.docChanges.length > 0 || t5.Hn, "We got a new snapshot with no changes?"), !this.options.includeMetadataChanges) {
            for(var e12 = [], n9 = 0, r = t5.docChanges; n9 < r.length; n9++){
                var i10 = r[n9];
                i10.type !== __PRIVATE_ChangeType.Kn && e12.push(i10);
            }
            t5 = new __PRIVATE_ViewSnapshot(t5.query, t5.docs, t5.$n, e12, t5.Yn, t5.fromCache, t5.Hn, !0);
        }
        var s = !1;
        return this.TE ? this.PE(t5) && (this.dE.next(t5), s = !0) : this.AE(t5, this.onlineState) && (this.RE(t5), s = !0), this.EE = t5, s;
    }, t2.prototype.onError = function(t5) {
        this.dE.error(t5);
    }, t2.prototype.IT = function(t5) {
        this.onlineState = t5;
        var e13 = !1;
        return this.EE && !this.TE && this.AE(this.EE, t5) && (this.RE(this.EE), e13 = !0), e13;
    }, t2.prototype.AE = function(t5, e13) {
        if (assert(!this.TE, "Determining whether to raise first event but already had first event"), !t5.fromCache) return !0;
        var n10 = e13 !== __PRIVATE_OnlineState.T;
        return this.options.IE && n10 ? (assert(t5.fromCache, "Waiting for sync, but snapshot is not from cache"), !1) : !t5.docs.tt() || e13 === __PRIVATE_OnlineState.T;
    }, t2.prototype.PE = function(t5) {
        if (t5.docChanges.length > 0) return !0;
        var e13 = this.EE && this.EE.hasPendingWrites !== t5.hasPendingWrites;
        return !(!t5.Hn && !e13) && !0 === this.options.includeMetadataChanges;
    }, t2.prototype.RE = function(t5) {
        assert(!this.TE, "Trying to raise initial events for second time"), t5 = __PRIVATE_ViewSnapshot.zn(t5.query, t5.docs, t5.Yn, t5.fromCache), this.TE = !0, this.dE.next(t5);
    }, t2;
}(), __PRIVATE_LOG_TAG$b = "FirestoreClient", __PRIVATE_DOM_EXCEPTION_INVALID_STATE = 11, __PRIVATE_DOM_EXCEPTION_ABORTED = 20, __PRIVATE_DOM_EXCEPTION_QUOTA_EXCEEDED = 22, __PRIVATE_IndexedDbPersistenceSettings = function() {
    function t2(t5, e13) {
        this.cacheSizeBytes = t5, this.synchronizeTabs = e13;
    }
    return t2.prototype.Uc = function() {
        return __PRIVATE_LruParams.b_(this.cacheSizeBytes);
    }, t2;
}(), __PRIVATE_MemoryPersistenceSettings = function() {
}, __PRIVATE_FirestoreClient = function() {
    function t2(t5, e13, n10, r) {
        this.platform = t5, this.VE = e13, this.credentials = n10, this.Ds = r, this.clientId = __PRIVATE_AutoId.s();
    }
    return t2.prototype.start = function(t5) {
        var e13 = this;
        this.mE();
        var n10 = new __PRIVATE_Deferred, r = new __PRIVATE_Deferred, i11 = !1;
        return this.credentials.S(function(s) {
            i11 ? e13.Ds.Us(function() {
                return e13.Ed(s);
            }) : (i11 = !0, e13.vE(t5, r, s).then(function(t6) {
                return e13.pE(s, t6);
            }).then(n10.resolve, n10.reject));
        }), this.Ds.Us(function() {
            return n10.promise;
        }), r.promise;
    }, t2.prototype.enableNetwork = function() {
        var t5 = this;
        return this.mE(), this.Ds.enqueue(function() {
            return t5.td.enableNetwork();
        });
    }, t2.prototype.vE = function(t5, e13, n10) {
        var r = this;
        return t5 instanceof __PRIVATE_IndexedDbPersistenceSettings ? this.bE(n10, t5).then(function(t6) {
            return e13.resolve(), t6;
        }).catch(function(t6) {
            if (e13.reject(t6), !r.gE(t6)) throw t6;
            return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + t6), r.wE();
        }) : (e13.resolve(), this.wE());
    }, t2.prototype.gE = function(t5) {
        return t5 instanceof FirestoreError ? t5.code === Code.FAILED_PRECONDITION || t5.code === Code.UNIMPLEMENTED : !("undefined" != typeof DOMException && t5 instanceof DOMException) || t5.code === __PRIVATE_DOM_EXCEPTION_QUOTA_EXCEEDED || t5.code === __PRIVATE_DOM_EXCEPTION_ABORTED || t5.code === __PRIVATE_DOM_EXCEPTION_INVALID_STATE;
    }, t2.prototype.mE = function() {
        if (this.Ds.Ws) throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
    }, t2.prototype.bE = function(t5, e13) {
        var n10 = this, r = __PRIVATE_IndexedDbPersistence.hh(this.VE), i11 = new __PRIVATE_JsonProtoSerializer(this.VE.o, {
            Jr: !0
        });
        return Promise.resolve().then(function() {
            return tslib.__awaiter(n10, void 0, void 0, function() {
                var n11, s;
                return tslib.__generator(this, function(o) {
                    switch(o.label){
                        case 0:
                            if (e13.synchronizeTabs && !__PRIVATE_WebStorageSharedClientState.Xo(this.platform)) throw new FirestoreError(Code.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
                            return n11 = e13.Uc(), this.CT = e13.synchronizeTabs ? new __PRIVATE_WebStorageSharedClientState(this.Ds, this.platform, r, this.clientId, t5) : new __PRIVATE_MemorySharedClientState, [
                                4,
                                __PRIVATE_IndexedDbPersistence.Bc({
                                    allowTabSynchronization: e13.synchronizeTabs,
                                    persistenceKey: r,
                                    clientId: this.clientId,
                                    platform: this.platform,
                                    wc: this.Ds,
                                    serializer: i11,
                                    Uc: n11,
                                    yc: this.CT
                                })
                            ];
                        case 1:
                            return s = o.sent(), this.persistence = s, [
                                2,
                                s.Eu.O_
                            ];
                    }
                });
            });
        });
    }, t2.prototype.wE = function() {
        return this.persistence = __PRIVATE_MemoryPersistence.Nh(this.clientId), this.CT = new __PRIVATE_MemorySharedClientState, Promise.resolve(null);
    }, t2.prototype.pE = function(t5, e13) {
        var n10 = this;
        return debug(__PRIVATE_LOG_TAG$b, "Initializing. user=", t5.uid), this.platform.yE(this.VE).then(function(r) {
            return tslib.__awaiter(n10, void 0, void 0, function() {
                var n11, i11, s, o, u, a, _ = this;
                return tslib.__generator(this, function(c) {
                    switch(c.label){
                        case 0:
                            return n11 = new __PRIVATE_IndexFreeQueryEngine, this.F_ = new __PRIVATE_LocalStore(this.persistence, n11, t5), [
                                4,
                                this.F_.start()
                            ];
                        case 1:
                            return c.sent(), e13 && (this.SE = new __PRIVATE_LruScheduler(e13, this.Ds, this.F_)), i11 = this.platform.DE(), s = this.platform.CE(this.VE.o), o = new __PRIVATE_Datastore(this.Ds, r, this.credentials, s), u = function(t6) {
                                return _.td.IT(t6, __PRIVATE_OnlineStateSource.P);
                            }, a = function(t6) {
                                return _.td.IT(t6, __PRIVATE_OnlineStateSource.A);
                            }, this.pT = new __PRIVATE_RemoteStore(this.F_, o, this.Ds, u, i11), this.td = new __PRIVATE_SyncEngine(this.F_, this.pT, this.CT, t5), this.CT.Vl = a, this.pT.td = this.td, this.CT.td = this.td, this.OE = new __PRIVATE_EventManager(this.td), [
                                4,
                                this.CT.start()
                            ];
                        case 2:
                            return c.sent(), [
                                4,
                                this.pT.start()
                            ];
                        case 3:
                            return c.sent(), [
                                4,
                                this.persistence.Wc(function(t6) {
                                    return tslib.__awaiter(_, void 0, void 0, function() {
                                        return tslib.__generator(this, function(e14) {
                                            switch(e14.label){
                                                case 0:
                                                    return [
                                                        4,
                                                        this.td.Pd(t6)
                                                    ];
                                                case 1:
                                                    return e14.sent(), this.SE && (t6 && !this.SE.Ea ? this.SE.start() : t6 || this.SE.stop()), [
                                                        2
                                                    ];
                                            }
                                        });
                                    });
                                })
                            ];
                        case 4:
                            return c.sent(), [
                                4,
                                this.persistence.$c(function() {
                                    return tslib.__awaiter(_, void 0, void 0, function() {
                                        return tslib.__generator(this, function(t6) {
                                            switch(t6.label){
                                                case 0:
                                                    return [
                                                        4,
                                                        this.terminate()
                                                    ];
                                                case 1:
                                                    return t6.sent(), [
                                                        2
                                                    ];
                                            }
                                        });
                                    });
                                })
                            ];
                        case 5:
                            return c.sent(), [
                                2
                            ];
                    }
                });
            });
        });
    }, t2.prototype.Ed = function(t5) {
        return this.Ds.to(), debug(__PRIVATE_LOG_TAG$b, "Credential Changed. Current user: " + t5.uid), this.td.Ed(t5);
    }, t2.prototype.disableNetwork = function() {
        var t5 = this;
        return this.mE(), this.Ds.enqueue(function() {
            return t5.td.disableNetwork();
        });
    }, t2.prototype.terminate = function() {
        var t5 = this;
        return this.Ds.zs(function() {
            return tslib.__awaiter(t5, void 0, void 0, function() {
                return tslib.__generator(this, function(t6) {
                    switch(t6.label){
                        case 0:
                            return this.SE && this.SE.stop(), [
                                4,
                                this.pT.shutdown()
                            ];
                        case 1:
                            return t6.sent(), [
                                4,
                                this.CT.shutdown()
                            ];
                        case 2:
                            return t6.sent(), [
                                4,
                                this.persistence.shutdown()
                            ];
                        case 3:
                            return t6.sent(), this.credentials.D(), [
                                2
                            ];
                    }
                });
            });
        });
    }, t2.prototype.waitForPendingWrites = function() {
        var t5 = this;
        this.mE();
        var e13 = new __PRIVATE_Deferred;
        return this.Ds.Us(function() {
            return t5.td.JT(e13);
        }), e13.promise;
    }, t2.prototype.listen = function(t5, e13, n10) {
        var r = this;
        this.mE();
        var i11 = new __PRIVATE_QueryListener(t5, e13, n10);
        return this.Ds.Us(function() {
            return r.OE.listen(i11);
        }), i11;
    }, t2.prototype.Jl = function(t5) {
        var e13 = this;
        this.FE || this.Ds.Us(function() {
            return e13.OE.Jl(t5);
        });
    }, t2.prototype.NE = function(t5) {
        var e13 = this;
        return this.mE(), this.Ds.enqueue(function() {
            return e13.F_.Ha(t5);
        }).then(function(t6) {
            if (t6 instanceof Document1) return t6;
            if (t6 instanceof __PRIVATE_NoDocument) return null;
            throw new FirestoreError(Code.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)");
        });
    }, t2.prototype.ME = function(t5) {
        var e13 = this;
        return this.mE(), this.Ds.enqueue(function() {
            return tslib.__awaiter(e13, void 0, void 0, function() {
                var e14, n10, r;
                return tslib.__generator(this, function(i11) {
                    switch(i11.label){
                        case 0:
                            return [
                                4,
                                this.F_.e_(t5, !0)
                            ];
                        case 1:
                            return e14 = i11.sent(), n10 = new __PRIVATE_View(t5, e14.r_), r = n10.dT(e14.documents), [
                                2,
                                n10.qo(r, !1).snapshot
                            ];
                    }
                });
            });
        });
    }, t2.prototype.write = function(t5) {
        var e13 = this;
        this.mE();
        var n10 = new __PRIVATE_Deferred;
        return this.Ds.Us(function() {
            return e13.td.write(t5, n10);
        }), n10.promise;
    }, t2.prototype.o = function() {
        return this.VE.o;
    }, t2.prototype.fE = function(t5) {
        var e13 = this;
        this.mE(), this.Ds.Us(function() {
            return e13.OE.fE(t5), Promise.resolve();
        });
    }, t2.prototype.lE = function(t5) {
        this.FE || this.OE.lE(t5);
    }, Object.defineProperty(t2.prototype, "FE", {
        get: function() {
            return this.Ds.Ws;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.transaction = function(t5) {
        var e13 = this;
        this.mE();
        var n10 = new __PRIVATE_Deferred;
        return this.Ds.Us(function() {
            return e13.td.runTransaction(e13.Ds, t5, n10), Promise.resolve();
        }), n10.promise;
    }, t2;
}(), __PRIVATE_AsyncObserver = function() {
    function t2(t5) {
        this.observer = t5, this.muted = !1;
    }
    return t2.prototype.next = function(t5) {
        this.LE(this.observer.next, t5);
    }, t2.prototype.error = function(t5) {
        this.LE(this.observer.error, t5);
    }, t2.prototype.GE = function() {
        this.muted = !0;
    }, t2.prototype.LE = function(t5, e13) {
        var n10 = this;
        this.muted || setTimeout(function() {
            n10.muted || t5(e13);
        }, 0);
    }, t2;
}();
function __PRIVATE_isPartialObserver(t2) {
    return __PRIVATE_implementsAnyMethods(t2, [
        "next",
        "error",
        "complete"
    ]);
}
function __PRIVATE_implementsAnyMethods(t2, e13) {
    if ("object" != typeof t2 || null === t2) return !1;
    for(var n10 = t2, r = 0, i11 = e13; r < i11.length; r++){
        var s = i11[r];
        if (s in n10 && "function" == typeof n10[s]) return !0;
    }
    return !1;
}
var __PRIVATE_DEFAULT_HOST = "firestore.googleapis.com", __PRIVATE_DEFAULT_SSL = !0, __PRIVATE_DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = !0, __PRIVATE_DEFAULT_FORCE_LONG_POLLING = !1, CACHE_SIZE_UNLIMITED = __PRIVATE_LruParams.y_, __PRIVATE_DEFAULT_SYNCHRONIZE_TABS = !1, __PRIVATE_FirestoreSettings = function() {
    function t2(t5) {
        if ((void 0) === t5.host) {
            if ((void 0) !== t5.ssl) throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            this.host = __PRIVATE_DEFAULT_HOST, this.ssl = __PRIVATE_DEFAULT_SSL;
        } else __PRIVATE_validateNamedType("settings", "non-empty string", "host", t5.host), this.host = t5.host, __PRIVATE_validateNamedOptionalType("settings", "boolean", "ssl", t5.ssl), this.ssl = __PRIVATE_defaulted(t5.ssl, __PRIVATE_DEFAULT_SSL);
        if (__PRIVATE_validateOptionNames("settings", t5, [
            "host",
            "ssl",
            "credentials",
            "timestampsInSnapshots",
            "cacheSizeBytes",
            "experimentalForceLongPolling"
        ]), __PRIVATE_validateNamedOptionalType("settings", "object", "credentials", t5.credentials), this.credentials = t5.credentials, __PRIVATE_validateNamedOptionalType("settings", "boolean", "timestampsInSnapshots", t5.timestampsInSnapshots), !0 === t5.timestampsInSnapshots ? error("\n  The timestampsInSnapshots setting now defaults to true and you no\n  longer need to explicitly set it. In a future release, the setting\n  will be removed entirely and so it is recommended that you remove it\n  from your firestore.settings() call now.") : !1 === t5.timestampsInSnapshots && error("\n  The timestampsInSnapshots setting will soon be removed. YOU MUST UPDATE\n  YOUR CODE.\n\n  To hide this warning, stop using the timestampsInSnapshots setting in your\n  firestore.settings({ ... }) call.\n\n  Once you remove the setting, Timestamps stored in Cloud Firestore will be\n  read back as Firebase Timestamp objects instead of as system Date objects.\n  So you will also need to update code expecting a Date to instead expect a\n  Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at'); const date =\n  timestamp.toDate();\n\n  Please audit all existing usages of Date when you enable the new\n  behavior."), this.timestampsInSnapshots = __PRIVATE_defaulted(t5.timestampsInSnapshots, __PRIVATE_DEFAULT_TIMESTAMPS_IN_SNAPSHOTS), __PRIVATE_validateNamedOptionalType("settings", "number", "cacheSizeBytes", t5.cacheSizeBytes), (void 0) === t5.cacheSizeBytes) this.cacheSizeBytes = __PRIVATE_LruParams.D_;
        else {
            if (t5.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && t5.cacheSizeBytes < __PRIVATE_LruParams.S_) throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + __PRIVATE_LruParams.S_);
            this.cacheSizeBytes = t5.cacheSizeBytes;
        }
        __PRIVATE_validateNamedOptionalType("settings", "boolean", "experimentalForceLongPolling", t5.experimentalForceLongPolling), this.forceLongPolling = (void 0) === t5.experimentalForceLongPolling ? __PRIVATE_DEFAULT_FORCE_LONG_POLLING : t5.experimentalForceLongPolling;
    }
    return t2.prototype.isEqual = function(t5) {
        return this.host === t5.host && this.ssl === t5.ssl && this.timestampsInSnapshots === t5.timestampsInSnapshots && this.credentials === t5.credentials && this.cacheSizeBytes === t5.cacheSizeBytes && this.forceLongPolling === t5.forceLongPolling;
    }, t2;
}(), Firestore = function() {
    function t2(e13, n10) {
        var r = this;
        if (this.BE = null, this.UE = new __PRIVATE_AsyncQueue, this.INTERNAL = {
            delete: function() {
                return tslib.__awaiter(r, void 0, void 0, function() {
                    return tslib.__generator(this, function(t5) {
                        switch(t5.label){
                            case 0:
                                return this.kE(), [
                                    4,
                                    this.xE.terminate()
                                ];
                            case 1:
                                return t5.sent(), [
                                    2
                                ];
                        }
                    });
                });
            }
        }, "object" == typeof e13.options) {
            var i11 = e13;
            this.BE = i11, this.KE = t2.jE(i11), this.qE = i11.name, this.QE = new __PRIVATE_FirebaseCredentialsProvider(n10);
        } else {
            var s = e13;
            if (!s.projectId) throw new FirestoreError(Code.INVALID_ARGUMENT, "Must provide projectId");
            this.KE = new __PRIVATE_DatabaseId(s.projectId, s.database), this.qE = "[DEFAULT]", this.QE = new __PRIVATE_EmptyCredentialsProvider;
        }
        this.WE = new __PRIVATE_FirestoreSettings({
        }), this.$E = this.YE(this.KE);
    }
    return t2.prototype.settings = function(t5) {
        if (__PRIVATE_validateExactNumberOfArgs("Firestore.settings", arguments, 1), __PRIVATE_validateArgType("Firestore.settings", "object", 1, t5), contains(t5, "persistence")) throw new FirestoreError(Code.INVALID_ARGUMENT, '"persistence" is now specified with a separate call to firestore.enablePersistence().');
        var e13 = new __PRIVATE_FirestoreSettings(t5);
        if (this.xE && !this.WE.isEqual(e13)) throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");
        this.WE = e13, (void 0) !== e13.credentials && (this.QE = __PRIVATE_makeCredentialsProvider(e13.credentials));
    }, t2.prototype.enableNetwork = function() {
        return this.kE(), this.xE.enableNetwork();
    }, t2.prototype.disableNetwork = function() {
        return this.kE(), this.xE.disableNetwork();
    }, t2.prototype.enablePersistence = function(t5) {
        if (this.xE) throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");
        var e13 = !1;
        return t5 && ((void 0) !== t5.experimentalTabSynchronization && error("The 'experimentalTabSynchronization' setting has been renamed to 'synchronizeTabs'. In a future release, the setting will be removed and it is recommended that you update your firestore.enablePersistence() call to use 'synchronizeTabs'."), e13 = __PRIVATE_defaulted((void 0) !== t5.synchronizeTabs ? t5.synchronizeTabs : t5.experimentalTabSynchronization, __PRIVATE_DEFAULT_SYNCHRONIZE_TABS)), this.HE(new __PRIVATE_IndexedDbPersistenceSettings(this.WE.cacheSizeBytes, e13));
    }, t2.prototype.clearPersistence = function() {
        var t5 = this, e13 = __PRIVATE_IndexedDbPersistence.hh(this.XE()), n10 = new __PRIVATE_Deferred;
        return this.UE.$s(function() {
            return tslib.__awaiter(t5, void 0, void 0, function() {
                var t6;
                return tslib.__generator(this, function(r) {
                    switch(r.label){
                        case 0:
                            if (r.trys.push([
                                0,
                                2,
                                ,
                                3
                            ]), (void 0) !== this.xE && !this.xE.FE) throw new FirestoreError(Code.FAILED_PRECONDITION, "Persistence cannot be cleared after this Firestore instance is initialized.");
                            return [
                                4,
                                __PRIVATE_IndexedDbPersistence.clearPersistence(e13)
                            ];
                        case 1:
                            return r.sent(), n10.resolve(), [
                                3,
                                3
                            ];
                        case 2:
                            return t6 = r.sent(), n10.reject(t6), [
                                3,
                                3
                            ];
                        case 3:
                            return [
                                2
                            ];
                    }
                });
            });
        }), n10.promise;
    }, t2.prototype.terminate = function() {
        return this.app._removeServiceInstance("firestore"), this.INTERNAL.delete();
    }, Object.defineProperty(t2.prototype, "zE", {
        get: function() {
            return this.kE(), this.xE.FE;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.waitForPendingWrites = function() {
        return this.kE(), this.xE.waitForPendingWrites();
    }, t2.prototype.onSnapshotsInSync = function(t5) {
        if (this.kE(), __PRIVATE_isPartialObserver(t5)) return this.JE(t5);
        __PRIVATE_validateArgType("Firestore.onSnapshotsInSync", "function", 1, t5);
        var e13 = {
            next: t5
        };
        return this.JE(e13);
    }, t2.prototype.JE = function(t5) {
        var e13 = this, n10 = new __PRIVATE_AsyncObserver({
            next: function() {
                t5.next && t5.next();
            },
            error: function(t6) {
                throw fail("Uncaught Error in onSnapshotsInSync");
            }
        });
        return this.xE.fE(n10), function() {
            n10.GE(), e13.xE.lE(n10);
        };
    }, t2.prototype.kE = function() {
        return this.xE || this.HE(new __PRIVATE_MemoryPersistenceSettings), this.xE;
    }, t2.prototype.XE = function() {
        return new __PRIVATE_DatabaseInfo(this.KE, this.qE, this.WE.host, this.WE.ssl, this.WE.forceLongPolling);
    }, t2.prototype.HE = function(t5) {
        assert(!!this.WE.host, "FirestoreSettings.host is not set"), assert(!this.xE, "configureClient() called multiple times");
        var e13 = this.XE();
        return this.xE = new __PRIVATE_FirestoreClient(__PRIVATE_PlatformSupport.t(), e13, this.QE, this.UE), this.xE.start(t5);
    }, t2.prototype.YE = function(t5) {
        return new __PRIVATE_UserDataConverter(function(e13) {
            if (e13 instanceof DocumentReference) {
                var n10 = t5, r = e13.firestore.KE;
                if (!r.isEqual(n10)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Document reference is for database " + r.projectId + "/" + r.database + " but should be for database " + n10.projectId + "/" + n10.database);
                return new __PRIVATE_DocumentKeyReference(t5, e13.ZE);
            }
            return e13;
        });
    }, t2.jE = function(t5) {
        var e13 = t5.options;
        if (!contains(e13, "projectId")) throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
        var n11 = e13.projectId;
        if (!n11 || "string" != typeof n11) throw new FirestoreError(Code.INVALID_ARGUMENT, "projectId must be a string in FirebaseApp.options");
        return new __PRIVATE_DatabaseId(n11);
    }, Object.defineProperty(t2.prototype, "app", {
        get: function() {
            if (!this.BE) throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.BE;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.collection = function(t5) {
        return __PRIVATE_validateExactNumberOfArgs("Firestore.collection", arguments, 1), __PRIVATE_validateArgType("Firestore.collection", "non-empty string", 1, t5), this.kE(), new CollectionReference(ResourcePath.ut(t5), this);
    }, t2.prototype.doc = function(t5) {
        return __PRIVATE_validateExactNumberOfArgs("Firestore.doc", arguments, 1), __PRIVATE_validateArgType("Firestore.doc", "non-empty string", 1, t5), this.kE(), DocumentReference.tP(ResourcePath.ut(t5), this);
    }, t2.prototype.collectionGroup = function(t5) {
        if (__PRIVATE_validateExactNumberOfArgs("Firestore.collectionGroup", arguments, 1), __PRIVATE_validateArgType("Firestore.collectionGroup", "non-empty string", 1, t5), t5.indexOf("/") >= 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection ID '" + t5 + "' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");
        return this.kE(), new Query$1(new Query(ResourcePath.at, t5), this);
    }, t2.prototype.runTransaction = function(t5) {
        var e13 = this;
        return __PRIVATE_validateExactNumberOfArgs("Firestore.runTransaction", arguments, 1), __PRIVATE_validateArgType("Firestore.runTransaction", "function", 1, t5), this.kE().transaction(function(n11) {
            return t5(new Transaction$1(e13, n11));
        });
    }, t2.prototype.batch = function() {
        return this.kE(), new WriteBatch(this);
    }, Object.defineProperty(t2, "logLevel", {
        get: function() {
            switch(__PRIVATE_getLogLevel()){
                case LogLevel.DEBUG:
                    return "debug";
                case LogLevel.ERROR:
                    return "error";
                case LogLevel.SILENT:
                    return "silent";
                default:
                    return fail("Unknown log level: " + __PRIVATE_getLogLevel());
            }
        },
        enumerable: !0,
        configurable: !0
    }), t2.setLogLevel = function(t5) {
        switch(__PRIVATE_validateExactNumberOfArgs("Firestore.setLogLevel", arguments, 1), __PRIVATE_validateArgType("Firestore.setLogLevel", "non-empty string", 1, t5), t5){
            case "debug":
                setLogLevel(LogLevel.DEBUG);
                break;
            case "error":
                setLogLevel(LogLevel.ERROR);
                break;
            case "silent":
                setLogLevel(LogLevel.SILENT);
                break;
            default:
                throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid log level: " + t5);
        }
    }, t2.prototype.eP = function() {
        return this.WE.timestampsInSnapshots;
    }, t2;
}(), Transaction$1 = function() {
    function t2(t5, e13) {
        this.nP = t5, this.rP = e13;
    }
    return t2.prototype.get = function(t5) {
        var e13 = this;
        __PRIVATE_validateExactNumberOfArgs("Transaction.get", arguments, 1);
        var n11 = __PRIVATE_validateReference("Transaction.get", t5, this.nP);
        return this.rP.lookup([
            n11.ZE
        ]).then(function(t6) {
            if (!t6 || 1 !== t6.length) return fail("Mismatch in docs returned from document lookup.");
            var r = t6[0];
            if (r instanceof __PRIVATE_NoDocument) return new DocumentSnapshot(e13.nP, n11.ZE, null, !1, !1, n11.iP);
            if (r instanceof Document1) return new DocumentSnapshot(e13.nP, n11.ZE, r, !1, !1, n11.iP);
            throw fail("BatchGetDocumentsRequest returned unexpected document type: " + r.constructor.name);
        });
    }, t2.prototype.set = function(t5, e13, n11) {
        __PRIVATE_validateBetweenNumberOfArgs("Transaction.set", arguments, 2, 3);
        var r = __PRIVATE_validateReference("Transaction.set", t5, this.nP);
        n11 = __PRIVATE_validateSetOptions("Transaction.set", n11);
        var i12 = __PRIVATE_applyFirestoreDataConverter(r.iP, e13, "Transaction.set"), s = i12[0], o = i12[1], u = n11.merge || n11.mergeFields ? this.nP.$E.rl(o, s, n11.mergeFields) : this.nP.$E.el(o, s);
        return this.rP.set(r.ZE, u), this;
    }, t2.prototype.update = function(t5, e13, n11) {
        for(var r, i12, s = [], o = 3; o < arguments.length; o++)s[o - 3] = arguments[o];
        return "string" == typeof e13 || e13 instanceof FieldPath$1 ? (__PRIVATE_validateAtLeastNumberOfArgs("Transaction.update", arguments, 3), r = __PRIVATE_validateReference("Transaction.update", t5, this.nP), i12 = this.nP.$E.ol("Transaction.update", e13, n11, s)) : (__PRIVATE_validateExactNumberOfArgs("Transaction.update", arguments, 2), r = __PRIVATE_validateReference("Transaction.update", t5, this.nP), i12 = this.nP.$E.il("Transaction.update", e13)), this.rP.update(r.ZE, i12), this;
    }, t2.prototype.delete = function(t5) {
        __PRIVATE_validateExactNumberOfArgs("Transaction.delete", arguments, 1);
        var e13 = __PRIVATE_validateReference("Transaction.delete", t5, this.nP);
        return this.rP.delete(e13.ZE), this;
    }, t2;
}(), WriteBatch = function() {
    function t2(t5) {
        this.nP = t5, this.sP = [], this.oP = !1;
    }
    return t2.prototype.set = function(t5, e13, n11) {
        __PRIVATE_validateBetweenNumberOfArgs("WriteBatch.set", arguments, 2, 3), this.uP();
        var r = __PRIVATE_validateReference("WriteBatch.set", t5, this.nP);
        n11 = __PRIVATE_validateSetOptions("WriteBatch.set", n11);
        var i12 = __PRIVATE_applyFirestoreDataConverter(r.iP, e13, "WriteBatch.set"), s = i12[0], o = i12[1], u = n11.merge || n11.mergeFields ? this.nP.$E.rl(o, s, n11.mergeFields) : this.nP.$E.el(o, s);
        return this.sP = this.sP.concat(u.xf(r.ZE, Precondition.NONE)), this;
    }, t2.prototype.update = function(t5, e13, n11) {
        for(var r, i12, s = [], o = 3; o < arguments.length; o++)s[o - 3] = arguments[o];
        return this.uP(), "string" == typeof e13 || e13 instanceof FieldPath$1 ? (__PRIVATE_validateAtLeastNumberOfArgs("WriteBatch.update", arguments, 3), r = __PRIVATE_validateReference("WriteBatch.update", t5, this.nP), i12 = this.nP.$E.ol("WriteBatch.update", e13, n11, s)) : (__PRIVATE_validateExactNumberOfArgs("WriteBatch.update", arguments, 2), r = __PRIVATE_validateReference("WriteBatch.update", t5, this.nP), i12 = this.nP.$E.il("WriteBatch.update", e13)), this.sP = this.sP.concat(i12.xf(r.ZE, Precondition.exists(!0))), this;
    }, t2.prototype.delete = function(t5) {
        __PRIVATE_validateExactNumberOfArgs("WriteBatch.delete", arguments, 1), this.uP();
        var e13 = __PRIVATE_validateReference("WriteBatch.delete", t5, this.nP);
        return this.sP = this.sP.concat(new __PRIVATE_DeleteMutation(e13.ZE, Precondition.NONE)), this;
    }, t2.prototype.commit = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(t5) {
                return this.uP(), this.oP = !0, this.sP.length > 0 ? [
                    2,
                    this.nP.kE().write(this.sP)
                ] : [
                    2
                ];
            });
        });
    }, t2.prototype.uP = function() {
        if (this.oP) throw new FirestoreError(Code.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }, t2;
}(), DocumentReference = function() {
    function t2(t5, e13, n11) {
        this.ZE = t5, this.firestore = e13, this.iP = n11, this.xE = this.firestore.kE();
    }
    return t2.tP = function(e13, n11, r) {
        if (e13.length % 2 != 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + e13.ot() + " has " + e13.length);
        return new t2(new __PRIVATE_DocumentKey(e13), n11, r);
    }, Object.defineProperty(t2.prototype, "id", {
        get: function() {
            return this.ZE.path.nt();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "parent", {
        get: function() {
            return new CollectionReference(this.ZE.path.Z(), this.firestore, this.iP);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "path", {
        get: function() {
            return this.ZE.path.ot();
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.collection = function(t5) {
        if (__PRIVATE_validateExactNumberOfArgs("DocumentReference.collection", arguments, 1), __PRIVATE_validateArgType("DocumentReference.collection", "non-empty string", 1, t5), !t5) throw new FirestoreError(Code.INVALID_ARGUMENT, "Must provide a non-empty collection name to collection()");
        var e13 = ResourcePath.ut(t5);
        return new CollectionReference(this.ZE.path.child(e13), this.firestore);
    }, t2.prototype.isEqual = function(e13) {
        if (!(e13 instanceof t2)) throw __PRIVATE_invalidClassError("isEqual", "DocumentReference", 1, e13);
        return this.firestore === e13.firestore && this.ZE.isEqual(e13.ZE) && this.iP === e13.iP;
    }, t2.prototype.set = function(t5, e13) {
        __PRIVATE_validateBetweenNumberOfArgs("DocumentReference.set", arguments, 1, 2), e13 = __PRIVATE_validateSetOptions("DocumentReference.set", e13);
        var n11 = __PRIVATE_applyFirestoreDataConverter(this.iP, t5, "DocumentReference.set"), r = n11[0], i12 = n11[1], s = e13.merge || e13.mergeFields ? this.firestore.$E.rl(i12, r, e13.mergeFields) : this.firestore.$E.el(i12, r);
        return this.xE.write(s.xf(this.ZE, Precondition.NONE));
    }, t2.prototype.update = function(t5, e13) {
        for(var n11, r = [], i12 = 2; i12 < arguments.length; i12++)r[i12 - 2] = arguments[i12];
        return "string" == typeof t5 || t5 instanceof FieldPath$1 ? (__PRIVATE_validateAtLeastNumberOfArgs("DocumentReference.update", arguments, 2), n11 = this.firestore.$E.ol("DocumentReference.update", t5, e13, r)) : (__PRIVATE_validateExactNumberOfArgs("DocumentReference.update", arguments, 1), n11 = this.firestore.$E.il("DocumentReference.update", t5)), this.xE.write(n11.xf(this.ZE, Precondition.exists(!0)));
    }, t2.prototype.delete = function() {
        return __PRIVATE_validateExactNumberOfArgs("DocumentReference.delete", arguments, 0), this.xE.write([
            new __PRIVATE_DeleteMutation(this.ZE, Precondition.NONE)
        ]);
    }, t2.prototype.onSnapshot = function() {
        for(var t5 = [], e13 = 0; e13 < arguments.length; e13++)t5[e13] = arguments[e13];
        __PRIVATE_validateBetweenNumberOfArgs("DocumentReference.onSnapshot", arguments, 1, 4);
        var n11, r = {
            includeMetadataChanges: !1
        }, i12 = 0;
        "object" != typeof t5[i12] || __PRIVATE_isPartialObserver(t5[i12]) || (__PRIVATE_validateOptionNames("DocumentReference.onSnapshot", r = t5[i12], [
            "includeMetadataChanges"
        ]), __PRIVATE_validateNamedOptionalType("DocumentReference.onSnapshot", "boolean", "includeMetadataChanges", r.includeMetadataChanges), i12++);
        var s = {
            includeMetadataChanges: r.includeMetadataChanges
        };
        return __PRIVATE_isPartialObserver(t5[i12]) ? n11 = t5[i12] : (__PRIVATE_validateArgType("DocumentReference.onSnapshot", "function", i12, t5[i12]), __PRIVATE_validateOptionalArgType("DocumentReference.onSnapshot", "function", i12 + 1, t5[i12 + 1]), __PRIVATE_validateOptionalArgType("DocumentReference.onSnapshot", "function", i12 + 2, t5[i12 + 2]), n11 = {
            next: t5[i12],
            error: t5[i12 + 1],
            complete: t5[i12 + 2]
        }), this.aP(s, n11);
    }, t2.prototype.aP = function(t5, e13) {
        var n11 = this, r = function(t6) {
            console.error("Uncaught Error in onSnapshot:", t6);
        };
        e13.error && (r = e13.error.bind(e13));
        var i12 = new __PRIVATE_AsyncObserver({
            next: function(t6) {
                if (e13.next) {
                    assert(t6.docs.size <= 1, "Too many documents returned on a document query");
                    var r1 = t6.docs.get(n11.ZE);
                    e13.next(new DocumentSnapshot(n11.firestore, n11.ZE, r1, t6.fromCache, t6.hasPendingWrites, n11.iP));
                }
            },
            error: r
        }), s = this.xE.listen(Query.rn(this.ZE.path), i12, t5);
        return function() {
            i12.GE(), n11.xE.Jl(s);
        };
    }, t2.prototype.get = function(t5) {
        var e13 = this;
        return __PRIVATE_validateBetweenNumberOfArgs("DocumentReference.get", arguments, 0, 1), __PRIVATE_validateGetOptions("DocumentReference.get", t5), new Promise(function(n11, r2) {
            t5 && "cache" === t5.source ? e13.firestore.kE().NE(e13.ZE).then(function(t6) {
                n11(new DocumentSnapshot(e13.firestore, e13.ZE, t6, !0, t6 instanceof Document1 && t6.ce, e13.iP));
            }, r2) : e13._P(n11, r2, t5);
        });
    }, t2.prototype._P = function(t5, e13, n11) {
        var r2 = this.aP({
            includeMetadataChanges: !0,
            IE: !0
        }, {
            next: function(i12) {
                r2(), !i12.exists && i12.metadata.fromCache ? e13(new FirestoreError(Code.UNAVAILABLE, "Failed to get document because the client is offline.")) : i12.exists && i12.metadata.fromCache && n11 && "server" === n11.source ? e13(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : t5(i12);
            },
            error: e13
        });
    }, t2.prototype.withConverter = function(e13) {
        return new t2(this.ZE, this.firestore, e13);
    }, t2;
}(), SnapshotMetadata = function() {
    function t2(t5, e13) {
        this.hasPendingWrites = t5, this.fromCache = e13;
    }
    return t2.prototype.isEqual = function(t5) {
        return this.hasPendingWrites === t5.hasPendingWrites && this.fromCache === t5.fromCache;
    }, t2;
}(), DocumentSnapshot = function() {
    function t2(t5, e13, n11, r2, i12, s) {
        this.nP = t5, this.ZE = e13, this.cP = n11, this.hP = r2, this.fP = i12, this.iP = s;
    }
    return t2.prototype.data = function(t5) {
        if (__PRIVATE_validateBetweenNumberOfArgs("DocumentSnapshot.data", arguments, 0, 1), t5 = __PRIVATE_validateSnapshotOptions("DocumentSnapshot.data", t5), this.cP) {
            if (this.iP) {
                var e13 = new QueryDocumentSnapshot(this.nP, this.ZE, this.cP, this.hP, this.fP);
                return this.iP.fromFirestore(e13, t5);
            }
            return this.lP(this.cP.data(), __PRIVATE_FieldValueOptions.Oe(t5, this.nP.eP()));
        }
    }, t2.prototype.get = function(t5, e14) {
        if (__PRIVATE_validateBetweenNumberOfArgs("DocumentSnapshot.get", arguments, 1, 2), e14 = __PRIVATE_validateSnapshotOptions("DocumentSnapshot.get", e14), this.cP) {
            var n11 = this.cP.data().field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", t5));
            if (null !== n11) return this.dP(n11, __PRIVATE_FieldValueOptions.Oe(e14, this.nP.eP()));
        }
    }, Object.defineProperty(t2.prototype, "id", {
        get: function() {
            return this.ZE.path.nt();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "ref", {
        get: function() {
            return new DocumentReference(this.ZE, this.nP, this.iP);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "exists", {
        get: function() {
            return null !== this.cP;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "metadata", {
        get: function() {
            return new SnapshotMetadata(this.fP, this.hP);
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.isEqual = function(e14) {
        if (!(e14 instanceof t2)) throw __PRIVATE_invalidClassError("isEqual", "DocumentSnapshot", 1, e14);
        return this.nP === e14.nP && this.hP === e14.hP && this.ZE.isEqual(e14.ZE) && (null === this.cP ? null === e14.cP : this.cP.isEqual(e14.cP)) && this.iP === e14.iP;
    }, t2.prototype.lP = function(t5, e14) {
        var n12 = this, r2 = {
        };
        return t5.forEach(function(t6, i12) {
            r2[t6] = n12.dP(i12, e14);
        }), r2;
    }, t2.prototype.dP = function(t5, e14) {
        if (t5 instanceof __PRIVATE_ObjectValue) return this.lP(t5, e14);
        if (t5 instanceof ArrayValue) return this.TP(t5, e14);
        if (t5 instanceof __PRIVATE_RefValue) {
            var n12 = t5.value(e14), r2 = this.nP.kE().o();
            return t5.o.isEqual(r2) || error("Document " + this.ZE.path + " contains a document reference within a different database (" + t5.o.projectId + "/" + t5.o.database + ") which is not supported. It will be treated as a reference in the current database (" + r2.projectId + "/" + r2.database + ") instead."), new DocumentReference(n12, this.nP, this.iP);
        }
        return t5.value(e14);
    }, t2.prototype.TP = function(t5, e14) {
        var n13 = this;
        return t5.Zt.map(function(t6) {
            return n13.dP(t6, e14);
        });
    }, t2;
}(), QueryDocumentSnapshot = function(t2) {
    function e14() {
        return null !== t2 && t2.apply(this, arguments) || this;
    }
    return tslib.__extends(e14, t2), e14.prototype.data = function(e15) {
        var n13 = t2.prototype.data.call(this, e15);
        return assert((void 0) !== n13, "Document in a QueryDocumentSnapshot should exist"), n13;
    }, e14;
}(DocumentSnapshot), Query$1 = function() {
    function t2(t5, e14, n13) {
        this.EP = t5, this.firestore = e14, this.iP = n13;
    }
    return t2.prototype.where = function(e14, n13, r3) {
        __PRIVATE_validateExactNumberOfArgs("Query.where", arguments, 3), __PRIVATE_validateDefined("Query.where", 3, r3);
        var i12, s = [
            "<",
            "<=",
            "==",
            ">=",
            ">",
            "array-contains",
            "in",
            "array-contains-any"
        ];
        __PRIVATE_validateStringEnum("Query.where", s, 2, n13);
        var o = __PRIVATE_fieldPathFromArgument("Query.where", e14), u = __PRIVATE_Operator.ut(n13);
        if (o.ct()) {
            if (u === __PRIVATE_Operator.ARRAY_CONTAINS || u === __PRIVATE_Operator.ARRAY_CONTAINS_ANY) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + u.toString() + "' queries on FieldPath.documentId().");
            if (u === __PRIVATE_Operator.IN) {
                this.PP(r3, u);
                for(var a = [], _ = 0, c = r3; _ < c.length; _++){
                    var h = c[_];
                    a.push(this.AP(h));
                }
                i12 = new ArrayValue(a);
            } else i12 = this.AP(r3);
        } else u !== __PRIVATE_Operator.IN && u !== __PRIVATE_Operator.ARRAY_CONTAINS_ANY || this.PP(r3, u), i12 = this.firestore.$E.ul("Query.where", r3, u === __PRIVATE_Operator.IN);
        var f = FieldFilter.create(o, u, i12);
        return this.RP(f), new t2(this.EP.on(f), this.firestore, this.iP);
    }, t2.prototype.orderBy = function(e14, n13) {
        var r3;
        if (__PRIVATE_validateBetweenNumberOfArgs("Query.orderBy", arguments, 1, 2), __PRIVATE_validateOptionalArgType("Query.orderBy", "non-empty string", 2, n13), (void 0) === n13 || "asc" === n13) r3 = __PRIVATE_Direction.ASCENDING;
        else {
            if ("desc" !== n13) throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + n13 + "', expected 'asc' or 'desc'.");
            r3 = __PRIVATE_Direction.DESCENDING;
        }
        if (null !== this.EP.startAt) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call Query.startAt() or Query.startAfter() before calling Query.orderBy().");
        if (null !== this.EP.endAt) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call Query.endAt() or Query.endBefore() before calling Query.orderBy().");
        var i12 = __PRIVATE_fieldPathFromArgument("Query.orderBy", e14), s = new __PRIVATE_OrderBy(i12, r3);
        return this.IP(s), new t2(this.EP.an(s), this.firestore, this.iP);
    }, t2.prototype.limit = function(e14) {
        return __PRIVATE_validateExactNumberOfArgs("Query.limit", arguments, 1), __PRIVATE_validateArgType("Query.limit", "number", 1, e14), __PRIVATE_validatePositiveNumber("Query.limit", 1, e14), new t2(this.EP._n(e14), this.firestore, this.iP);
    }, t2.prototype.limitToLast = function(e14) {
        return __PRIVATE_validateExactNumberOfArgs("Query.limitToLast", arguments, 1), __PRIVATE_validateArgType("Query.limitToLast", "number", 1, e14), __PRIVATE_validatePositiveNumber("Query.limitToLast", 1, e14), new t2(this.EP.cn(e14), this.firestore, this.iP);
    }, t2.prototype.startAt = function(e14) {
        for(var n13 = [], r3 = 1; r3 < arguments.length; r3++)n13[r3 - 1] = arguments[r3];
        __PRIVATE_validateAtLeastNumberOfArgs("Query.startAt", arguments, 1);
        var i12 = this.VP("Query.startAt", e14, n13, !0);
        return new t2(this.EP.hn(i12), this.firestore, this.iP);
    }, t2.prototype.startAfter = function(e14) {
        for(var n13 = [], r3 = 1; r3 < arguments.length; r3++)n13[r3 - 1] = arguments[r3];
        __PRIVATE_validateAtLeastNumberOfArgs("Query.startAfter", arguments, 1);
        var i12 = this.VP("Query.startAfter", e14, n13, !1);
        return new t2(this.EP.hn(i12), this.firestore, this.iP);
    }, t2.prototype.endBefore = function(e14) {
        for(var n13 = [], r3 = 1; r3 < arguments.length; r3++)n13[r3 - 1] = arguments[r3];
        __PRIVATE_validateAtLeastNumberOfArgs("Query.endBefore", arguments, 1);
        var i12 = this.VP("Query.endBefore", e14, n13, !0);
        return new t2(this.EP.fn(i12), this.firestore, this.iP);
    }, t2.prototype.endAt = function(e14) {
        for(var n13 = [], r3 = 1; r3 < arguments.length; r3++)n13[r3 - 1] = arguments[r3];
        __PRIVATE_validateAtLeastNumberOfArgs("Query.endAt", arguments, 1);
        var i12 = this.VP("Query.endAt", e14, n13, !1);
        return new t2(this.EP.fn(i12), this.firestore, this.iP);
    }, t2.prototype.isEqual = function(e14) {
        if (!(e14 instanceof t2)) throw __PRIVATE_invalidClassError("isEqual", "Query", 1, e14);
        return this.firestore === e14.firestore && this.EP.isEqual(e14.EP);
    }, t2.prototype.withConverter = function(e14) {
        return new t2(this.EP, this.firestore, e14);
    }, t2.prototype.VP = function(t5, e14, n13, r3) {
        if (__PRIVATE_validateDefined(t5, 1, e14), e14 instanceof DocumentSnapshot) {
            if (n13.length > 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + t5 + "().");
            var i12 = e14;
            if (!i12.exists) throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + t5 + "().");
            return this.mP(t5, i12.cP, r3);
        }
        var s = [
            e14
        ].concat(n13);
        return this.vP(t5, s, r3);
    }, t2.prototype.mP = function(t5, e14, n13) {
        for(var r3 = [], i13 = 0, s = this.EP.orderBy; i13 < s.length; i13++){
            var o = s[i13];
            if (o.field.ct()) r3.push(new __PRIVATE_RefValue(this.firestore.KE, e14.key));
            else {
                var u = e14.field(o.field);
                if (u instanceof __PRIVATE_ServerTimestampValue) throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + o.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === u) {
                    var a = o.field.ot();
                    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + a + "' (used as the orderBy) does not exist.");
                }
                r3.push(u);
            }
        }
        return new __PRIVATE_Bound(r3, n13);
    }, t2.prototype.vP = function(t5, e14, n13) {
        var r3 = this.EP.Je;
        if (e14.length > r3.length) throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + t5 + "(). The number of arguments must be less than or equal to the number of Query.orderBy() clauses");
        for(var i13 = [], s = 0; s < e14.length; s++){
            var o = e14[s];
            if (r3[s].field.ct()) {
                if ("string" != typeof o) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + t5 + "(), but got a " + typeof o);
                if (!this.EP.pn() && -1 !== o.indexOf("/")) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + t5 + "() must be a plain document ID, but '" + o + "' contains a slash.");
                var u = this.EP.path.child(ResourcePath.ut(o));
                if (!__PRIVATE_DocumentKey.lt(u)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + t5 + "() must result in a valid document path, but '" + u + "' is not because it contains an odd number of segments.");
                var a = new __PRIVATE_DocumentKey(u);
                i13.push(new __PRIVATE_RefValue(this.firestore.KE, a));
            } else {
                var _ = this.firestore.$E.ul(t5, o);
                i13.push(_);
            }
        }
        return new __PRIVATE_Bound(i13, n13);
    }, t2.prototype.onSnapshot = function() {
        for(var t5 = [], e14 = 0; e14 < arguments.length; e14++)t5[e14] = arguments[e14];
        __PRIVATE_validateBetweenNumberOfArgs("Query.onSnapshot", arguments, 1, 4);
        var n13, r3 = {
        }, i13 = 0;
        return "object" != typeof t5[i13] || __PRIVATE_isPartialObserver(t5[i13]) || (__PRIVATE_validateOptionNames("Query.onSnapshot", r3 = t5[i13], [
            "includeMetadataChanges"
        ]), __PRIVATE_validateNamedOptionalType("Query.onSnapshot", "boolean", "includeMetadataChanges", r3.includeMetadataChanges), i13++), __PRIVATE_isPartialObserver(t5[i13]) ? n13 = t5[i13] : (__PRIVATE_validateArgType("Query.onSnapshot", "function", i13, t5[i13]), __PRIVATE_validateOptionalArgType("Query.onSnapshot", "function", i13 + 1, t5[i13 + 1]), __PRIVATE_validateOptionalArgType("Query.onSnapshot", "function", i13 + 2, t5[i13 + 2]), n13 = {
            next: t5[i13],
            error: t5[i13 + 1],
            complete: t5[i13 + 2]
        }), this.pP(this.EP), this.aP(r3, n13);
    }, t2.prototype.aP = function(t5, e14) {
        var n13 = this, r3 = function(t6) {
            console.error("Uncaught Error in onSnapshot:", t6);
        };
        e14.error && (r3 = e14.error.bind(e14));
        var i13 = new __PRIVATE_AsyncObserver({
            next: function(t6) {
                e14.next && e14.next(new QuerySnapshot(n13.firestore, n13.EP, t6, n13.iP));
            },
            error: r3
        }), s = this.firestore.kE(), o = s.listen(this.EP, i13, t5);
        return function() {
            i13.GE(), s.Jl(o);
        };
    }, t2.prototype.pP = function(t5) {
        if (t5.mn() && 0 === t5.Je.length) throw new FirestoreError(Code.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }, t2.prototype.get = function(t5) {
        var e14 = this;
        return __PRIVATE_validateBetweenNumberOfArgs("Query.get", arguments, 0, 1), __PRIVATE_validateGetOptions("Query.get", t5), this.pP(this.EP), new Promise(function(n13, r3) {
            t5 && "cache" === t5.source ? e14.firestore.kE().ME(e14.EP).then(function(t6) {
                n13(new QuerySnapshot(e14.firestore, e14.EP, t6, e14.iP));
            }, r3) : e14._P(n13, r3, t5);
        });
    }, t2.prototype._P = function(t5, e14, n13) {
        var r3 = this.aP({
            includeMetadataChanges: !0,
            IE: !0
        }, {
            next: function(i13) {
                r3(), i13.metadata.fromCache && n13 && "server" === n13.source ? e14(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : t5(i13);
            },
            error: e14
        });
    }, t2.prototype.AP = function(t5) {
        if ("string" == typeof t5) {
            if ("" === t5) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!this.EP.pn() && -1 !== t5.indexOf("/")) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + t5 + "' contains a '/' character.");
            var e14 = this.EP.path.child(ResourcePath.ut(t5));
            if (!__PRIVATE_DocumentKey.lt(e14)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + e14 + "' is not because it has an odd number of segments (" + e14.length + ").");
            return new __PRIVATE_RefValue(this.firestore.KE, new __PRIVATE_DocumentKey(e14));
        }
        if (t5 instanceof DocumentReference) {
            var n13 = t5;
            return new __PRIVATE_RefValue(this.firestore.KE, n13.ZE);
        }
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + __PRIVATE_valueDescription(t5) + ".");
    }, t2.prototype.PP = function(t5, e15) {
        if (!Array.isArray(t5) || 0 === t5.length) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e15.toString() + "' filters.");
        if (t5.length > 10) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + e15.toString() + "' filters support a maximum of 10 elements in the value array.");
        if (t5.indexOf(null) >= 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + e15.toString() + "' filters cannot contain 'null' in the value array.");
        if (t5.filter(function(t6) {
            return Number.isNaN(t6);
        }).length > 0) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + e15.toString() + "' filters cannot contain 'NaN' in the value array.");
    }, t2.prototype.RP = function(t5) {
        if (t5 instanceof FieldFilter) {
            var e15 = [
                __PRIVATE_Operator.ARRAY_CONTAINS,
                __PRIVATE_Operator.ARRAY_CONTAINS_ANY
            ], n14 = [
                __PRIVATE_Operator.IN,
                __PRIVATE_Operator.ARRAY_CONTAINS_ANY
            ], r3 = e15.indexOf(t5.op) >= 0, i13 = n14.indexOf(t5.op) >= 0;
            if (t5.un()) {
                var s = this.EP.in();
                if (null !== s && !s.isEqual(t5.field)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '" + s.toString() + "' and '" + t5.field.toString() + "'");
                var o = this.EP.sn();
                null !== o && this.bP(t5.field, o);
            } else if (i13 || r3) {
                var u = null;
                if (i13 && (u = this.EP.vn(n14)), null === u && r3 && (u = this.EP.vn(e15)), null != u) throw u === t5.op ? new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + t5.op.toString() + "' filter.") : new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use '" + t5.op.toString() + "' filters with '" + u.toString() + "' filters.");
            }
        }
    }, t2.prototype.IP = function(t5) {
        if (null === this.EP.sn()) {
            var e16 = this.EP.in();
            null !== e16 && this.bP(e16, t5.field);
        }
    }, t2.prototype.bP = function(t5, e17) {
        if (!e17.isEqual(t5)) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '" + t5.toString() + "' and so you must also use '" + t5.toString() + "' as your first Query.orderBy(), but your first Query.orderBy() is on field '" + e17.toString() + "' instead.");
    }, t2;
}(), QuerySnapshot = function() {
    function t2(t5, e17, n15, r4) {
        this.nP = t5, this.gP = e17, this.wP = n15, this.iP = r4, this.yP = null, this.SP = null, this.metadata = new SnapshotMetadata(n15.hasPendingWrites, n15.fromCache);
    }
    return Object.defineProperty(t2.prototype, "docs", {
        get: function() {
            var t5 = [];
            return this.forEach(function(e17) {
                return t5.push(e17);
            }), t5;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "empty", {
        get: function() {
            return this.wP.docs.tt();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "size", {
        get: function() {
            return this.wP.docs.size;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.forEach = function(t5, e17) {
        var n15 = this;
        __PRIVATE_validateBetweenNumberOfArgs("QuerySnapshot.forEach", arguments, 1, 2), __PRIVATE_validateArgType("QuerySnapshot.forEach", "function", 1, t5), this.wP.docs.forEach(function(r4) {
            t5.call(e17, n15.DP(r4));
        });
    }, Object.defineProperty(t2.prototype, "query", {
        get: function() {
            return new Query$1(this.gP, this.nP, this.iP);
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.docChanges = function(t5) {
        t5 && (__PRIVATE_validateOptionNames("QuerySnapshot.docChanges", t5, [
            "includeMetadataChanges"
        ]), __PRIVATE_validateNamedOptionalType("QuerySnapshot.docChanges", "boolean", "includeMetadataChanges", t5.includeMetadataChanges));
        var e17 = !(!t5 || !t5.includeMetadataChanges);
        if (e17 && this.wP.Xn) throw new FirestoreError(Code.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this.yP && this.SP === e17 || (this.yP = __PRIVATE_changesFromSnapshot(this.nP, e17, this.wP, this.iP), this.SP = e17), this.yP;
    }, t2.prototype.isEqual = function(e17) {
        if (!(e17 instanceof t2)) throw __PRIVATE_invalidClassError("isEqual", "QuerySnapshot", 1, e17);
        return this.nP === e17.nP && this.gP.isEqual(e17.gP) && this.wP.isEqual(e17.wP) && this.iP === e17.iP;
    }, t2.prototype.DP = function(t5) {
        return new QueryDocumentSnapshot(this.nP, t5.key, t5, this.metadata.fromCache, this.wP.Yn.has(t5.key), this.iP);
    }, t2;
}();
function __PRIVATE_throwDocChangesMethodError() {
    throw new FirestoreError(Code.INVALID_ARGUMENT, 'QuerySnapshot.docChanges has been changed from a property into a method, so usages like "querySnapshot.docChanges" should become "querySnapshot.docChanges()"');
}
var __PRIVATE_docChangesPropertiesToOverride = tslib.__spreadArrays([
    "length",
    "forEach",
    "map"
], "undefined" != typeof Symbol ? [
    Symbol.iterator
] : []);
__PRIVATE_docChangesPropertiesToOverride.forEach(function(t2) {
    try {
        Object.defineProperty(QuerySnapshot.prototype.docChanges, t2, {
            get: function() {
                return __PRIVATE_throwDocChangesMethodError();
            }
        });
    } catch (t5) {
    }
});
var CollectionReference = function(t2) {
    function e17(e18, n15, r4) {
        var i14 = t2.call(this, Query.rn(e18), n15, r4) || this;
        if (i14.CP = e18, e18.length % 2 != 1) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + e18.ot() + " has " + e18.length);
        return i14;
    }
    return tslib.__extends(e17, t2), Object.defineProperty(e17.prototype, "id", {
        get: function() {
            return this.EP.path.nt();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e17.prototype, "parent", {
        get: function() {
            var t5 = this.EP.path.Z();
            return t5.tt() ? null : new DocumentReference(new __PRIVATE_DocumentKey(t5), this.firestore);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e17.prototype, "path", {
        get: function() {
            return this.EP.path.ot();
        },
        enumerable: !0,
        configurable: !0
    }), e17.prototype.doc = function(t5) {
        if (__PRIVATE_validateBetweenNumberOfArgs("CollectionReference.doc", arguments, 0, 1), 0 === arguments.length && (t5 = __PRIVATE_AutoId.s()), __PRIVATE_validateArgType("CollectionReference.doc", "non-empty string", 1, t5), "" === t5) throw new FirestoreError(Code.INVALID_ARGUMENT, "Document path must be a non-empty string");
        var e18 = ResourcePath.ut(t5);
        return DocumentReference.tP(this.EP.path.child(e18), this.firestore, this.iP);
    }, e17.prototype.add = function(t5) {
        __PRIVATE_validateExactNumberOfArgs("CollectionReference.add", arguments, 1);
        var e18 = this.iP ? this.iP.toFirestore(t5) : t5;
        __PRIVATE_validateArgType("CollectionReference.add", "object", 1, e18);
        var n15 = this.doc();
        return n15.set(t5).then(function() {
            return n15;
        });
    }, e17.prototype.withConverter = function(t5) {
        return new e17(this.CP, this.firestore, t5);
    }, e17;
}(Query$1);
function __PRIVATE_validateSetOptions(t2, e17) {
    if ((void 0) === e17) return {
        merge: !1
    };
    if (__PRIVATE_validateOptionNames(t2, e17, [
        "merge",
        "mergeFields"
    ]), __PRIVATE_validateNamedOptionalType(t2, "boolean", "merge", e17.merge), __PRIVATE_validateOptionalArrayElements(t2, "mergeFields", "a string or a FieldPath", e17.mergeFields, function(t5) {
        return "string" == typeof t5 || t5 instanceof FieldPath$1;
    }), (void 0) !== e17.mergeFields && (void 0) !== e17.merge) throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid options passed to function " + t2 + '(): You cannot specify both "merge" and "mergeFields".');
    return e17;
}
function __PRIVATE_validateSnapshotOptions(t2, e17) {
    return (void 0) === e17 ? {
    } : (__PRIVATE_validateOptionNames(t2, e17, [
        "serverTimestamps"
    ]), __PRIVATE_validateNamedOptionalPropertyEquals(t2, "options", "serverTimestamps", e17.serverTimestamps, [
        "estimate",
        "previous",
        "none"
    ]), e17);
}
function __PRIVATE_validateGetOptions(t2, e17) {
    __PRIVATE_validateOptionalArgType(t2, "object", 1, e17), e17 && (__PRIVATE_validateOptionNames(t2, e17, [
        "source"
    ]), __PRIVATE_validateNamedOptionalPropertyEquals(t2, "options", "source", e17.source, [
        "default",
        "server",
        "cache"
    ]));
}
function __PRIVATE_validateReference(t2, e17, n15) {
    if (e17 instanceof DocumentReference) {
        if (e17.firestore !== n15) throw new FirestoreError(Code.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return e17;
    }
    throw __PRIVATE_invalidClassError(t2, "DocumentReference", 1, e17);
}
function __PRIVATE_changesFromSnapshot(t2, e17, n15, r4) {
    if (n15.$n.tt()) {
        var i14, s = 0;
        return n15.docChanges.map(function(e18) {
            var o = new QueryDocumentSnapshot(t2, e18.doc.key, e18.doc, n15.fromCache, n15.Yn.has(e18.doc.key), r4);
            return assert(e18.type === __PRIVATE_ChangeType.Un, "Invalid event type for first snapshot"), assert(!i14 || n15.query.En(i14, e18.doc) < 0, "Got added events in wrong order"), i14 = e18.doc, {
                type: "added",
                doc: o,
                oldIndex: -1,
                newIndex: s++
            };
        });
    }
    var o = n15.$n;
    return n15.docChanges.filter(function(t5) {
        return e17 || t5.type !== __PRIVATE_ChangeType.Kn;
    }).map(function(e18) {
        var i15 = new QueryDocumentSnapshot(t2, e18.doc.key, e18.doc, n15.fromCache, n15.Yn.has(e18.doc.key), r4), s = -1, u = -1;
        return e18.type !== __PRIVATE_ChangeType.Un && (assert((s = o.indexOf(e18.doc.key)) >= 0, "Index for document not found"), o = o.delete(e18.doc.key)), e18.type !== __PRIVATE_ChangeType.kn && (u = (o = o.add(e18.doc)).indexOf(e18.doc.key)), {
            type: __PRIVATE_resultChangeType(e18.type),
            doc: i15,
            oldIndex: s,
            newIndex: u
        };
    });
}
function __PRIVATE_resultChangeType(t2) {
    switch(t2){
        case __PRIVATE_ChangeType.Un:
            return "added";
        case __PRIVATE_ChangeType.xn:
        case __PRIVATE_ChangeType.Kn:
            return "modified";
        case __PRIVATE_ChangeType.kn:
            return "removed";
        default:
            return fail("Unknown change type: " + t2);
    }
}
function __PRIVATE_applyFirestoreDataConverter(t2, e17, n15) {
    var r4;
    return t2 ? (r4 = t2.toFirestore(e17), n15 = "toFirestore() in " + n15) : r4 = e17, [
        r4,
        n15
    ];
}
var __PRIVATE_PublicFirestore = __PRIVATE_makeConstructorPrivate(Firestore, "Use firebase.firestore() instead."), __PRIVATE_PublicTransaction = __PRIVATE_makeConstructorPrivate(Transaction$1, "Use firebase.firestore().runTransaction() instead."), __PRIVATE_PublicWriteBatch = __PRIVATE_makeConstructorPrivate(WriteBatch, "Use firebase.firestore().batch() instead."), __PRIVATE_PublicDocumentReference = __PRIVATE_makeConstructorPrivate(DocumentReference, "Use firebase.firestore().doc() instead."), __PRIVATE_PublicDocumentSnapshot = __PRIVATE_makeConstructorPrivate(DocumentSnapshot), __PRIVATE_PublicQueryDocumentSnapshot = __PRIVATE_makeConstructorPrivate(QueryDocumentSnapshot), __PRIVATE_PublicQuery = __PRIVATE_makeConstructorPrivate(Query$1), __PRIVATE_PublicQuerySnapshot = __PRIVATE_makeConstructorPrivate(QuerySnapshot), __PRIVATE_PublicCollectionReference = __PRIVATE_makeConstructorPrivate(CollectionReference, "Use firebase.firestore().collection() instead."), __PRIVATE_firestoreNamespace = {
    Firestore: __PRIVATE_PublicFirestore,
    GeoPoint: GeoPoint,
    Timestamp: Timestamp,
    Blob: __PRIVATE_PublicBlob,
    Transaction: __PRIVATE_PublicTransaction,
    WriteBatch: __PRIVATE_PublicWriteBatch,
    DocumentReference: __PRIVATE_PublicDocumentReference,
    DocumentSnapshot: __PRIVATE_PublicDocumentSnapshot,
    Query: __PRIVATE_PublicQuery,
    QueryDocumentSnapshot: __PRIVATE_PublicQueryDocumentSnapshot,
    QuerySnapshot: __PRIVATE_PublicQuerySnapshot,
    CollectionReference: __PRIVATE_PublicCollectionReference,
    FieldPath: FieldPath$1,
    FieldValue: __PRIVATE_PublicFieldValue,
    setLogLevel: Firestore.setLogLevel,
    CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED
};
function __PRIVATE_configureForFirebase(t2) {
    t2.INTERNAL.registerComponent(new component.Component("firestore", function(t5) {
        var e17 = t5.getProvider("app").getImmediate();
        return new Firestore(e17, t5.getProvider("auth-internal"));
    }, "PUBLIC").setServiceProps(__PRIVATE_shallowCopy(__PRIVATE_firestoreNamespace)));
}
var __PRIVATE_NoopConnectivityMonitor = function() {
    function t2() {
    }
    return t2.prototype.Nl = function(t5) {
    }, t2.prototype.shutdown = function() {
    }, t2;
}(), __PRIVATE_LOG_TAG$c = "ConnectivityMonitor", __PRIVATE_BrowserConnectivityMonitor = function() {
    function t2() {
        var t5 = this;
        this.OP = function() {
            return t5.FP();
        }, this.NP = function() {
            return t5.MP();
        }, this.LP = [], this.GP();
    }
    return t2.prototype.Nl = function(t5) {
        this.LP.push(t5);
    }, t2.prototype.shutdown = function() {
        window.removeEventListener("online", this.OP), window.removeEventListener("offline", this.NP);
    }, t2.prototype.GP = function() {
        window.addEventListener("online", this.OP), window.addEventListener("offline", this.NP);
    }, t2.prototype.FP = function() {
        debug(__PRIVATE_LOG_TAG$c, "Network connectivity changed: AVAILABLE");
        for(var t5 = 0, e17 = this.LP; t5 < e17.length; t5++)e17[t5](0);
    }, t2.prototype.MP = function() {
        debug(__PRIVATE_LOG_TAG$c, "Network connectivity changed: UNAVAILABLE");
        for(var t5 = 0, e17 = this.LP; t5 < e17.length; t5++)e17[t5](1);
    }, t2.Xo = function() {
        return "undefined" != typeof window && (void 0) !== window.addEventListener && (void 0) !== window.removeEventListener;
    }, t2;
}(), __PRIVATE_StreamBridge = function() {
    function t2(t5) {
        this.BP = t5.BP, this.UP = t5.UP;
    }
    return t2.prototype.mf = function(t5) {
        assert(!this.kP, "Called onOpen on stream twice!"), this.kP = t5;
    }, t2.prototype.Pf = function(t5) {
        assert(!this.xP, "Called onClose on stream twice!"), this.xP = t5;
    }, t2.prototype.onMessage = function(t5) {
        assert(!this.KP, "Called onMessage on stream twice!"), this.KP = t5;
    }, t2.prototype.close = function() {
        this.UP();
    }, t2.prototype.send = function(t5) {
        this.BP(t5);
    }, t2.prototype.jP = function() {
        assert((void 0) !== this.kP, "Cannot call onOpen because no callback was set"), this.kP();
    }, t2.prototype.qP = function(t5) {
        assert((void 0) !== this.xP, "Cannot call onClose because no callback was set"), this.xP(t5);
    }, t2.prototype.QP = function(t5) {
        assert((void 0) !== this.KP, "Cannot call onMessage because no callback was set"), this.KP(t5);
    }, t2;
}(), __PRIVATE_LOG_TAG$d = "Connection", __PRIVATE_RPC_STREAM_SERVICE = "google.firestore.v1.Firestore", __PRIVATE_RPC_URL_VERSION = "v1", __PRIVATE_RPC_NAME_REST_MAPPING = {
    BatchGetDocuments: "batchGet",
    Commit: "commit"
}, __PRIVATE_X_GOOG_API_CLIENT_VALUE = "gl-js/ fire/" + SDK_VERSION, __PRIVATE_XHR_TIMEOUT_SECS = 15, __PRIVATE_WebChannelConnection = function() {
    function t2(t5) {
        this.o = t5.o;
        var e17 = t5.ssl ? "https" : "http";
        this.WP = e17 + "://" + t5.host, this.forceLongPolling = t5.forceLongPolling;
    }
    return t2.prototype.$P = function(t5, e17) {
        if (e17) for(var n15 in e17.v)e17.v.hasOwnProperty(n15) && (t5[n15] = e17.v[n15]);
        t5["X-Goog-Api-Client"] = __PRIVATE_X_GOOG_API_CLIENT_VALUE;
    }, t2.prototype.Nf = function(t5, e17, n15) {
        var r4 = this, i15 = this.YP(t5);
        return new Promise(function(s, o) {
            var u = new webchannelWrapper.XhrIo;
            u.listenOnce(webchannelWrapper.EventType.COMPLETE, function() {
                try {
                    switch(u.getLastErrorCode()){
                        case webchannelWrapper.ErrorCode.NO_ERROR:
                            var e18 = u.getResponseJson();
                            debug(__PRIVATE_LOG_TAG$d, "XHR received:", JSON.stringify(e18)), s(e18);
                            break;
                        case webchannelWrapper.ErrorCode.TIMEOUT:
                            debug(__PRIVATE_LOG_TAG$d, 'RPC "' + t5 + '" timed out'), o(new FirestoreError(Code.DEADLINE_EXCEEDED, "Request time out"));
                            break;
                        case webchannelWrapper.ErrorCode.HTTP_ERROR:
                            var n16 = u.getStatus();
                            if (debug(__PRIVATE_LOG_TAG$d, 'RPC "' + t5 + '" failed with status:', n16, "response text:", u.getResponseText()), n16 > 0) {
                                var r5 = u.getResponseJson().error;
                                if (r5 && r5.status && r5.message) {
                                    var i16 = __PRIVATE_mapCodeFromHttpResponseErrorStatus(r5.status);
                                    o(new FirestoreError(i16, r5.message));
                                } else o(new FirestoreError(Code.UNKNOWN, "Server responded with status " + u.getStatus()));
                            } else debug(__PRIVATE_LOG_TAG$d, 'RPC "' + t5 + '" failed'), o(new FirestoreError(Code.UNAVAILABLE, "Connection failed."));
                            break;
                        default:
                            fail('RPC "' + t5 + '" failed with unanticipated webchannel error ' + u.getLastErrorCode() + ": " + u.getLastError() + ", giving up.");
                    }
                } finally{
                    debug(__PRIVATE_LOG_TAG$d, 'RPC "' + t5 + '" completed.');
                }
            });
            var a = tslib.__assign({
            }, e17);
            delete a.database;
            var _ = JSON.stringify(a);
            debug(__PRIVATE_LOG_TAG$d, "XHR sending: ", i15 + " " + _);
            var c = {
                "Content-Type": "text/plain"
            };
            r4.$P(c, n15), u.send(i15, "POST", _, c, __PRIVATE_XHR_TIMEOUT_SECS);
        });
    }, t2.prototype.Mf = function(t5, e17, n15) {
        return this.Nf(t5, e17, n15);
    }, t2.prototype.vf = function(t5, e17) {
        var n15 = [
            this.WP,
            "/",
            __PRIVATE_RPC_STREAM_SERVICE,
            "/",
            t5,
            "/channel"
        ], r4 = webchannelWrapper.createWebChannelTransport(), i15 = {
            backgroundChannelTest: !0,
            httpSessionIdParam: "gsessionid",
            initMessageHeaders: {
            },
            messageUrlParams: {
                database: "projects/" + this.o.projectId + "/databases/" + this.o.database
            },
            sendRawJson: !0,
            supportsCrossDomainXhr: !0,
            internalChannelParams: {
                forwardChannelRequestTimeoutMs: 600000
            },
            forceLongPolling: this.forceLongPolling
        };
        this.$P(i15.initMessageHeaders, e17), util.isMobileCordova() || util.isReactNative() || util.isElectron() || util.isIE() || util.isUWP() || util.isBrowserExtension() || (i15.httpHeadersOverwriteParam = "$httpHeaders");
        var s = n15.join("");
        debug(__PRIVATE_LOG_TAG$d, "Creating WebChannel: " + s + " " + i15);
        var o = r4.createWebChannel(s, i15), u = !1, a = !1, _ = new __PRIVATE_StreamBridge({
            BP: function(t6) {
                a ? debug(__PRIVATE_LOG_TAG$d, "Not sending because WebChannel is closed:", t6) : (u || (debug(__PRIVATE_LOG_TAG$d, "Opening WebChannel transport."), o.open(), u = !0), debug(__PRIVATE_LOG_TAG$d, "WebChannel sending:", t6), o.send(t6));
            },
            UP: function() {
                return o.close();
            }
        }), c = function(t6, e18) {
            o.listen(t6, function(t7) {
                try {
                    e18(t7);
                } catch (t8) {
                    setTimeout(function() {
                        throw t8;
                    }, 0);
                }
            });
        };
        return c(webchannelWrapper.WebChannel.EventType.OPEN, function() {
            a || debug(__PRIVATE_LOG_TAG$d, "WebChannel transport opened.");
        }), c(webchannelWrapper.WebChannel.EventType.CLOSE, function() {
            a || (a = !0, debug(__PRIVATE_LOG_TAG$d, "WebChannel transport closed"), _.qP());
        }), c(webchannelWrapper.WebChannel.EventType.ERROR, function(t6) {
            a || (a = !0, debug(__PRIVATE_LOG_TAG$d, "WebChannel transport errored:", t6), _.qP(new FirestoreError(Code.UNAVAILABLE, "The operation could not be completed")));
        }), c(webchannelWrapper.WebChannel.EventType.MESSAGE, function(t6) {
            var e18;
            if (!a) {
                var n16 = t6.data[0];
                assert(!!n16, "Got a webchannel message without data.");
                var r6 = n16, i17 = r6.error || (null === (e18 = r6[0]) || (void 0) === e18 ? void 0 : e18.error);
                if (i17) {
                    debug(__PRIVATE_LOG_TAG$d, "WebChannel received error:", i17);
                    var s1 = i17.status, u1 = __PRIVATE_mapCodeFromRpcStatus(s1), c1 = i17.message;
                    (void 0) === u1 && (u1 = Code.INTERNAL, c1 = "Unknown error status: " + s1 + " with message " + i17.message), a = !0, _.qP(new FirestoreError(u1, c1)), o.close();
                } else debug(__PRIVATE_LOG_TAG$d, "WebChannel received:", n16), _.QP(n16);
            }
        }), setTimeout(function() {
            _.jP();
        }, 0), _;
    }, t2.prototype.YP = function(t5) {
        var e17 = __PRIVATE_RPC_NAME_REST_MAPPING[t5];
        return assert((void 0) !== e17, "Unknown REST mapping for: " + t5), this.WP + "/" + __PRIVATE_RPC_URL_VERSION + "/projects/" + this.o.projectId + "/databases/" + this.o.database + "/documents:" + e17;
    }, t2;
}(), __PRIVATE_BrowserPlatform = function() {
    function t2() {
        this.zr = "", this.ds = "undefined" != typeof atob;
    }
    return Object.defineProperty(t2.prototype, "document", {
        get: function() {
            return "undefined" != typeof document ? document : null;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t2.prototype, "window", {
        get: function() {
            return "undefined" != typeof window ? window : null;
        },
        enumerable: !0,
        configurable: !0
    }), t2.prototype.yE = function(t5) {
        return Promise.resolve(new __PRIVATE_WebChannelConnection(t5));
    }, t2.prototype.DE = function() {
        return __PRIVATE_BrowserConnectivityMonitor.Xo() ? new __PRIVATE_BrowserConnectivityMonitor : new __PRIVATE_NoopConnectivityMonitor;
    }, t2.prototype.CE = function(t5) {
        return new __PRIVATE_JsonProtoSerializer(t5, {
            Jr: !0
        });
    }, t2.prototype.i = function(t5) {
        return JSON.stringify(t5);
    }, t2.prototype.atob = function(t5) {
        return atob(t5);
    }, t2.prototype.btoa = function(t5) {
        return btoa(t5);
    }, t2;
}();
__PRIVATE_PlatformSupport.ls(new __PRIVATE_BrowserPlatform);
var name = "@firebase/firestore", version = "1.11.0";
function __PRIVATE_registerFirestore(t2) {
    __PRIVATE_configureForFirebase(t2), t2.registerVersion(name, version);
}
__PRIVATE_registerFirestore(firebase), exports.__PRIVATE_registerFirestore = __PRIVATE_registerFirestore;

},{"process":"6Upk8","@firebase/app":"78NCT","tslib":"fny2B","@firebase/logger":"9SAfg","@firebase/util":"gllVM","@firebase/component":"lSYWx","@firebase/webchannel-wrapper":"3P5qE"}],"6Upk8":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"fny2B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
parcelHelpers.export(exports, "__spread", ()=>__spread
);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d1, b1) {
        d1.__proto__ = b1;
    } || function(d1, b1) {
        for(var p in b1)if (b1.hasOwnProperty(p)) d1[p] = b1[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign1(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function(resolve1) {
                resolve1(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
function __exportStar(m, exports) {
    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v1) {
            resolve({
                value: v1,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9SAfg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>Logger
);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A container for all of the Logger instances
 */ var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var LogLevel;
(function(LogLevel1) {
    LogLevel1[LogLevel1["DEBUG"] = 0] = "DEBUG";
    LogLevel1[LogLevel1["VERBOSE"] = 1] = "VERBOSE";
    LogLevel1[LogLevel1["INFO"] = 2] = "INFO";
    LogLevel1[LogLevel1["WARN"] = 3] = "WARN";
    LogLevel1[LogLevel1["ERROR"] = 4] = "ERROR";
    LogLevel1[LogLevel1["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {
}));
/**
 * The default log level
 */ var defaultLogLevel = LogLevel.INFO;
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ var defaultLogHandler = function(instance, logType) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    if (logType < instance.logLevel) return;
    var now = new Date().toISOString();
    switch(logType){
        /**
         * By default, `console.debug` is not displayed in the developer console (in
         * chrome). To avoid forcing users to have to opt-in to these logs twice
         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
         * logs to the `console.log` function.
         */ case LogLevel.DEBUG:
            console.log.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.VERBOSE:
            console.log.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.INFO:
            console.info.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.WARN:
            console.warn.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        case LogLevel.ERROR:
            console.error.apply(console, __spreadArrays([
                "[" + now + "]  " + instance.name + ":"
            ], args));
            break;
        default:
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = function() {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ function Logger1(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The log handler for the Logger instance.
         */ this._logHandler = defaultLogHandler;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    Object.defineProperty(Logger1.prototype, "logLevel", {
        get: function() {
            return this._logLevel;
        },
        set: function(val) {
            if (!(val in LogLevel)) throw new TypeError('Invalid value assigned to `logLevel`');
            this._logLevel = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger1.prototype, "logHandler", {
        get: function() {
            return this._logHandler;
        },
        set: function(val) {
            if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
            this._logHandler = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */ Logger1.prototype.debug = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.DEBUG
        ], args));
    };
    Logger1.prototype.log = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.VERBOSE
        ], args));
    };
    Logger1.prototype.info = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.INFO
        ], args));
    };
    Logger1.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.WARN
        ], args));
    };
    Logger1.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.ERROR
        ], args));
    };
    return Logger1;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function setLogLevel(level) {
    instances.forEach(function(inst) {
        inst.logLevel = level;
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gllVM":[function(require,module,exports) {
var global = arguments[3];
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ var assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ var assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var stringToByteArray = function(str) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            // Surrogate Pair
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ var byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var pos = 0, c = 0;
    while(pos < bytes.length){
        var c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
            out[c++] = String.fromCharCode(55296 + (u >> 10));
            out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for(var i = 0; i < input.length; i += 3){
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
            var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
            var outByte4 = byte3 & 63;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for(var i = 0; i < input.length;){
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            var outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    var outByte3 = byte3 << 6 & 192 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_: function() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {
            };
            this.charToByteMap_ = {
            };
            this.byteToCharMapWebSafe_ = {
            };
            this.charToByteMapWebSafe_ = {
            };
            // We want quick mappings back and forth, so we precompute two maps.
            for(var i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ var base64Encode = function(str) {
    var utf8Bytes = stringToByteArray(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ var base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {
            };
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(var prop in source){
        if (!source.hasOwnProperty(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Deferred = function() {
    function Deferred1() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ Deferred1.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error, value) {
            if (error) _this.reject(error);
            else _this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function() {
                });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    };
    return Deferred1;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError1 = function(_super) {
    tslib.__extends(FirebaseError2, _super);
    function FirebaseError2(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        return _this;
    }
    return FirebaseError2;
}(Error);
var ErrorFactory = function() {
    function ErrorFactory1(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory1.prototype.create = function(code) {
        var data = [];
        for(var _i = 1; _i < arguments.length; _i++)data[_i - 1] = arguments[_i];
        var customData = data[0] || {
        };
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError1(fullCode, fullMessage);
        // Keys with an underscore at the end of their name are not included in
        // error.data for some reason.
        // TODO: Replace with Object.entries when lib is updated to es2017.
        for(var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++){
            var key = _b[_a];
            if (key.slice(-1) !== '_') {
                if (key in error) console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                error[key] = customData[key];
            }
        }
        return error;
    };
    return ErrorFactory1;
}();
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? value.toString() : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var decode = function(token) {
    var header = {
    }, claims = {
    }, data = {
    }, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {
        };
        delete claims['d'];
    } catch (e) {
    }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidTimestamp = function(token) {
    var claims = decode(token).claims;
    var now = Math.floor(new Date().getTime() / 1000);
    var validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var issuedAtTime = function(token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidFormat = function(token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isAdmin = function(token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    var res = {
    };
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function(key, value) {
        if (Array.isArray(value)) value.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
        });
        else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    };
    for(var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++){
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    var obj = {
    };
    var tokens = querystring1.replace(/^\?/, '').split('&');
    tokens.forEach(function(token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ var Sha1 = function() {
    function Sha11() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(var i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    Sha11.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ Sha11.prototype.compress_ = function(buf, offset) {
        if (!offset) offset = 0;
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(var i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(var i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(var i = 16; i < 80; i++){
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(var i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 1518500249;
                } else {
                    f = b ^ c ^ d;
                    k = 1859775393;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 2400959708;
            } else {
                f = b ^ c ^ d;
                k = 3395469782;
            }
            var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 4294967295;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
    };
    Sha11.prototype.update = function(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    };
    /** @override */ Sha11.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(var i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for(var i = 0; i < 5; i++)for(var j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    };
    return Sha11;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ var ObserverProxy = function() {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ function ObserverProxy1(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(function() {
            executor(_this);
        }).catch(function(e) {
            _this.error(e);
        });
    }
    ObserverProxy1.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
            observer.next(value);
        });
    };
    ObserverProxy1.prototype.error = function(error) {
        this.forEachObserver(function(observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy1.prototype.complete = function() {
        this.forEachObserver(function(observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ ObserverProxy1.prototype.subscribe = function(nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error: error,
            complete: complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            try {
                if (_this.finalError) observer.error(_this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy1.prototype.unsubscribeOne = function(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    };
    ObserverProxy1.prototype.forEachObserver = function(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(var i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy1.prototype.sendOne = function(i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) try {
                fn(_this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    };
    ObserverProxy1.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy1;
}();
/** Turn synchronous function into one called asynchronously. */ function async(fn, onError) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        Promise.resolve(true).then(function() {
            fn.apply(void 0, args);
        }).catch(function(error) {
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for(var _i = 0, methods_1 = methods; _i < methods_1.length; _i++){
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ var validateArgCount = function(fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch(argumentNumber){
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ var stringToByteArray$1 = function(str) {
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 55296 && c <= 56319) {
            var high = c - 55296; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 56320; // the low 10 bits.
            c = 65536 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ var stringLength = function(str) {
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 55296 && c <= 56319) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
exports.CONSTANTS = CONSTANTS;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError1;
exports.Sha1 = Sha1;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.getUA = getUA;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isUWP = isUWP;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;
exports.stringify = stringify;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateNamespace = validateNamespace;

},{"tslib":"fny2B"}],"3P5qE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ErrorCode", ()=>tmp_2
);
parcelHelpers.export(exports, "EventType", ()=>tmp_3
);
parcelHelpers.export(exports, "WebChannel", ()=>tmp_4
);
parcelHelpers.export(exports, "XhrIo", ()=>tmp_5
);
parcelHelpers.export(exports, "createWebChannelTransport", ()=>tmp_1
);
var global = arguments[3];
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {
};
var g, goog = goog || {
}, k = commonjsGlobal;
function m(a) {
    return "string" == typeof a;
}
function aa(a) {
    return "number" == typeof a;
}
function n(a, b) {
    a = a.split(".");
    b = b || k;
    for(var c = 0; c < a.length; c++)if (b = b[a[c]], null == b) return null;
    return b;
}
function ba() {
}
function p(a) {
    var b = typeof a;
    if ("object" == b) {
        if (a) {
            if (a instanceof Array) return "array";
            if (a instanceof Object) return b;
            var c = Object.prototype.toString.call(a);
            if ("[object Window]" == c) return "object";
            if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
            if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
        } else return "null";
    } else if ("function" == b && "undefined" == typeof a.call) return "object";
    return b;
}
function q(a) {
    return "array" == p(a);
}
function ca(a) {
    var b = p(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
}
function r(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
}
var t = "closure_uid_" + (1000000000 * Math.random() >>> 0), da = 0;
function ea(a, b, c) {
    return a.call.apply(a.bind, arguments);
}
function fa(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function() {
            var e = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e, d);
            return a.apply(b, e);
        };
    }
    return function() {
        return a.apply(b, arguments);
    };
}
function u(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? u = ea : u = fa;
    return u.apply(null, arguments);
}
function v(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
        var d = c.slice();
        d.push.apply(d, arguments);
        return a.apply(this, d);
    };
}
var w = Date.now || function() {
    return +new Date;
};
function x(a, b) {
    function c() {
    }
    c.prototype = b.prototype;
    a.N = b.prototype;
    a.prototype = new c;
    a.prototype.constructor = a;
    a.xb = function(d, e, f) {
        for(var h = Array(arguments.length - 2), l = 2; l < arguments.length; l++)h[l - 2] = arguments[l];
        return b.prototype[e].apply(d, h);
    };
}
function y() {
    this.j = this.j;
    this.i = this.i;
}
var ha = 0;
y.prototype.j = !1;
y.prototype.la = function() {
    if (!this.j && (this.j = !0, this.G(), 0 != ha)) var a = this[t] || (this[t] = ++da);
};
y.prototype.G = function() {
    if (this.i) for(; this.i.length;)this.i.shift()();
};
var ja = Array.prototype.indexOf ? function(a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
} : function(a, b) {
    if (m(a)) return m(b) && 1 == b.length ? a.indexOf(b, 0) : -1;
    for(var c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
    return -1;
}, la = Array.prototype.forEach ? function(a, b, c) {
    Array.prototype.forEach.call(a, b, c);
} : function(a, b, c) {
    for(var d = a.length, e = m(a) ? a.split("") : a, f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
};
function ma(a) {
    a: {
        var b = na;
        for(var c = a.length, d = m(a) ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;
            break a;
        }
        b = -1;
    }
    return 0 > b ? null : m(a) ? a.charAt(b) : a[b];
}
function oa(a) {
    return Array.prototype.concat.apply([], arguments);
}
function pa(a) {
    var b = a.length;
    if (0 < b) {
        for(var c = Array(b), d = 0; d < b; d++)c[d] = a[d];
        return c;
    }
    return [];
}
function qa(a) {
    return /^[\s\xa0]*$/.test(a);
}
var ra = String.prototype.trim ? function(a) {
    return a.trim();
} : function(a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};
function z(a, b) {
    return -1 != a.indexOf(b);
}
function sa(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
var A;
a: {
    var ta = k.navigator;
    if (ta) {
        var ua = ta.userAgent;
        if (ua) {
            A = ua;
            break a;
        }
    }
    A = "";
}
function va(a, b, c) {
    for(var d in a)b.call(c, a[d], d, a);
}
function wa(a) {
    var b = {
    }, c;
    for(c in a)b[c] = a[c];
    return b;
}
var xa = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function ya(a, b) {
    for(var c, d, e = 1; e < arguments.length; e++){
        d = arguments[e];
        for(c in d)a[c] = d[c];
        for(var f = 0; f < xa.length; f++)c = xa[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
}
function za(a) {
    za[" "](a);
    return a;
}
za[" "] = ba;
function Aa(a, b) {
    var c = Ba;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
}
var Ca = z(A, "Opera"), B = z(A, "Trident") || z(A, "MSIE"), Da = z(A, "Edge"), Ea = Da || B, Fa = z(A, "Gecko") && !(z(A.toLowerCase(), "webkit") && !z(A, "Edge")) && !(z(A, "Trident") || z(A, "MSIE")) && !z(A, "Edge"), Ga = z(A.toLowerCase(), "webkit") && !z(A, "Edge");
function Ha() {
    var a = k.document;
    return a ? a.documentMode : void 0;
}
var Ia;
a: {
    var Ja = "", Ka = function() {
        var a = A;
        if (Fa) return /rv:([^\);]+)(\)|;)/.exec(a);
        if (Da) return /Edge\/([\d\.]+)/.exec(a);
        if (B) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
        if (Ga) return /WebKit\/(\S+)/.exec(a);
        if (Ca) return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();
    Ka && (Ja = Ka ? Ka[1] : "");
    if (B) {
        var La = Ha();
        if (null != La && La > parseFloat(Ja)) {
            Ia = String(La);
            break a;
        }
    }
    Ia = Ja;
}
var Ba = {
};
function Ma(a) {
    return Aa(a, function() {
        for(var b = 0, c = ra(String(Ia)).split("."), d = ra(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++){
            var h = c[f] || "", l = d[f] || "";
            do {
                h = /(\d*)(\D*)(.*)/.exec(h) || [
                    "",
                    "",
                    "",
                    ""
                ];
                l = /(\d*)(\D*)(.*)/.exec(l) || [
                    "",
                    "",
                    "",
                    ""
                ];
                if (0 == h[0].length && 0 == l[0].length) break;
                b = sa(0 == h[1].length ? 0 : parseInt(h[1], 10), 0 == l[1].length ? 0 : parseInt(l[1], 10)) || sa(0 == h[2].length, 0 == l[2].length) || sa(h[2], l[2]);
                h = h[3];
                l = l[3];
            }while (0 == b)
        }
        return 0 <= b;
    });
}
var Na;
var Oa = k.document;
Na = Oa && B ? Ha() || ("CSS1Compat" == Oa.compatMode ? parseInt(Ia, 10) : 5) : void 0;
var Pa = !B || 9 <= Number(Na), Qa = B && !Ma("9"), Ra = function() {
    if (!k.addEventListener || !Object.defineProperty) return !1;
    var a = !1, b = Object.defineProperty({
    }, "passive", {
        get: function() {
            a = !0;
        }
    });
    try {
        k.addEventListener("test", ba, b), k.removeEventListener("test", ba, b);
    } catch (c) {
    }
    return a;
}();
function C(a, b) {
    this.type = a;
    this.a = this.target = b;
    this.Ia = !0;
}
C.prototype.b = function() {
    this.Ia = !1;
};
function D(a, b) {
    C.call(this, a ? a.type : "");
    this.relatedTarget = this.a = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.c = null;
    if (a) {
        var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
        this.target = a.target || a.srcElement;
        this.a = b;
        if (b = a.relatedTarget) {
            if (Fa) {
                a: {
                    try {
                        za(b.nodeName);
                        var e = !0;
                        break a;
                    } catch (f) {
                    }
                    e = !1;
                }
                e || (b = null);
            }
        } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
        this.relatedTarget = b;
        d ? (this.clientX = (void 0) !== d.clientX ? d.clientX : d.pageX, this.clientY = (void 0) !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = (void 0) !== a.clientX ? a.clientX : a.pageX, this.clientY = (void 0) !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
        this.button = a.button;
        this.key = a.key || "";
        this.ctrlKey = a.ctrlKey;
        this.altKey = a.altKey;
        this.shiftKey = a.shiftKey;
        this.metaKey = a.metaKey;
        this.pointerId = a.pointerId || 0;
        this.pointerType = m(a.pointerType) ? a.pointerType : Sa[a.pointerType] || "";
        this.c = a;
        a.defaultPrevented && this.b();
    }
}
x(D, C);
var Sa = {
    2: "touch",
    3: "pen",
    4: "mouse"
};
D.prototype.b = function() {
    D.N.b.call(this);
    var a = this.c;
    if (a.preventDefault) a.preventDefault();
    else if (a.returnValue = !1, Qa) try {
        if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
    } catch (b) {
    }
};
var F = "closure_listenable_" + (1000000 * Math.random() | 0), Ta = 0;
function Ua(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.da = e;
    this.key = ++Ta;
    this.X = this.Z = !1;
}
function Va(a) {
    a.X = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.da = null;
}
function Wa(a) {
    this.src = a;
    this.a = {
    };
    this.b = 0;
}
Wa.prototype.add = function(a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var h = Xa(a, b, d, e);
    -1 < h ? (b = a[h], c || (b.Z = !1)) : (b = new Ua(b, this.src, f, !!d, e), b.Z = c, a.push(b));
    return b;
};
function Ya(a, b) {
    var c = b.type;
    if (c in a.a) {
        var d = a.a[c], e = ja(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && (Va(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }
}
function Xa(a, b, c, d) {
    for(var e = 0; e < a.length; ++e){
        var f = a[e];
        if (!f.X && f.listener == b && f.capture == !!c && f.da == d) return e;
    }
    return -1;
}
var Za = "closure_lm_" + (1000000 * Math.random() | 0), $a = {
};
function bb(a, b, c, d, e) {
    if (d && d.once) return cb(a, b, c, d, e);
    if (q(b)) {
        for(var f = 0; f < b.length; f++)bb(a, b[f], c, d, e);
        return null;
    }
    c = db(c);
    return a && a[F] ? a.za(b, c, r(d) ? !!d.capture : !!d, e) : eb(a, b, c, !1, d, e);
}
function eb(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var h = r(e) ? !!e.capture : !!e;
    if (h && !Pa) return null;
    var l = fb(a);
    l || (a[Za] = l = new Wa(a));
    c = l.add(b, c, d, h, f);
    if (c.proxy) return c;
    d = gb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener) Ra || (e = h), (void 0) === e && (e = !1), a.addEventListener(b.toString(), d, e);
    else if (a.attachEvent) a.attachEvent(hb(b.toString()), d);
    else if (a.addListener && a.removeListener) a.addListener(d);
    else throw Error("addEventListener and attachEvent are unavailable.");
    return c;
}
function gb() {
    var a = ib, b = Pa ? function(c) {
        return a.call(b.src, b.listener, c);
    } : function(c) {
        c = a.call(b.src, b.listener, c);
        if (!c) return c;
    };
    return b;
}
function cb(a, b, c, d, e) {
    if (q(b)) {
        for(var f = 0; f < b.length; f++)cb(a, b[f], c, d, e);
        return null;
    }
    c = db(c);
    return a && a[F] ? a.Aa(b, c, r(d) ? !!d.capture : !!d, e) : eb(a, b, c, !0, d, e);
}
function jb(a, b, c, d, e) {
    if (q(b)) for(var f = 0; f < b.length; f++)jb(a, b[f], c, d, e);
    else (d = r(d) ? !!d.capture : !!d, c = db(c), a && a[F]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = Xa(f, c, d, e), -1 < c && (Va(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = fb(a)) && (b = a.a[b.toString()], a = -1, b && (a = Xa(b, c, d, e)), (c = -1 < a ? b[a] : null) && kb(c));
}
function kb(a) {
    if (!aa(a) && a && !a.X) {
        var b = a.src;
        if (b && b[F]) Ya(b.c, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(hb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = fb(b)) ? (Ya(c, a), 0 == c.b && (c.src = null, b[Za] = null)) : Va(a);
        }
    }
}
function hb(a) {
    return a in $a ? $a[a] : $a[a] = "on" + a;
}
function lb(a, b) {
    var c = a.listener, d = a.da || a.src;
    a.Z && kb(a);
    return c.call(d, b);
}
function ib(a, b) {
    return a.X ? !0 : Pa ? lb(a, new D(b, this)) : (b = new D(b || n("window.event"), this), lb(a, b));
}
function fb(a) {
    a = a[Za];
    return a instanceof Wa ? a : null;
}
var mb = "__closure_events_fn_" + (1000000000 * Math.random() >>> 0);
function db(a) {
    if ("function" == p(a)) return a;
    a[mb] || (a[mb] = function(b) {
        return a.handleEvent(b);
    });
    return a[mb];
}
function G() {
    y.call(this);
    this.c = new Wa(this);
    this.J = this;
    this.B = null;
}
x(G, y);
G.prototype[F] = !0;
g = G.prototype;
g.addEventListener = function(a, b, c, d) {
    bb(this, a, b, c, d);
};
g.removeEventListener = function(a, b, c, d) {
    jb(this, a, b, c, d);
};
g.dispatchEvent = function(a) {
    var b, c = this.B;
    if (c) for(b = []; c; c = c.B)b.push(c);
    c = this.J;
    var d = a.type || a;
    if (m(a)) a = new C(a, c);
    else if (a instanceof C) a.target = a.target || c;
    else {
        var e = a;
        a = new C(d, c);
        ya(a, e);
    }
    e = !0;
    if (b) for(var f = b.length - 1; 0 <= f; f--){
        var h = a.a = b[f];
        e = nb(h, d, !0, a) && e;
    }
    h = a.a = c;
    e = nb(h, d, !0, a) && e;
    e = nb(h, d, !1, a) && e;
    if (b) for(f = 0; f < b.length; f++)h = a.a = b[f], e = nb(h, d, !1, a) && e;
    return e;
};
g.G = function() {
    G.N.G.call(this);
    if (this.c) {
        var a = this.c, c;
        for(c in a.a){
            for(var d = a.a[c], e = 0; e < d.length; e++)Va(d[e]);
            delete a.a[c];
            a.b--;
        }
    }
    this.B = null;
};
g.za = function(a, b, c, d) {
    return this.c.add(String(a), b, !1, c, d);
};
g.Aa = function(a, b, c, d) {
    return this.c.add(String(a), b, !0, c, d);
};
function nb(a, b, c, d) {
    b = a.c.a[String(b)];
    if (!b) return !0;
    b = b.concat();
    for(var e = !0, f = 0; f < b.length; ++f){
        var h = b[f];
        if (h && !h.X && h.capture == c) {
            var l = h.listener, E = h.da || h.src;
            h.Z && Ya(a.c, h);
            e = !1 !== l.call(E, d) && e;
        }
    }
    return e && 0 != d.Ia;
}
var ob = k.JSON.stringify;
function pb(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
}
pb.prototype.get = function() {
    if (0 < this.b) {
        this.b--;
        var a = this.a;
        this.a = a.next;
        a.next = null;
    } else a = this.c();
    return a;
};
function qb() {
    this.b = this.a = null;
}
var sb = new pb(function() {
    return new rb;
}, function(a) {
    a.reset();
});
qb.prototype.add = function(a, b) {
    var c = sb.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
};
function tb() {
    var a = ub, b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
}
function rb() {
    this.next = this.b = this.a = null;
}
rb.prototype.set = function(a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
};
rb.prototype.reset = function() {
    this.next = this.b = this.a = null;
};
function vb(a) {
    k.setTimeout(function() {
        throw a;
    }, 0);
}
function wb(a, b) {
    xb || yb();
    zb || (xb(), zb = !0);
    ub.add(a, b);
}
var xb;
function yb() {
    var a = k.Promise.resolve(void 0);
    xb = function() {
        a.then(Ab);
    };
}
var zb = !1, ub = new qb;
function Ab() {
    for(var a; a = tb();){
        try {
            a.a.call(a.b);
        } catch (c) {
            vb(c);
        }
        var b = sb;
        b.f(a);
        100 > b.b && (b.b++, a.next = b.a, b.a = a);
    }
    zb = !1;
}
function Cb(a, b) {
    G.call(this);
    this.b = a || 1;
    this.a = b || k;
    this.f = u(this.fb, this);
    this.g = w();
}
x(Cb, G);
g = Cb.prototype;
g.ba = !1;
g.L = null;
g.fb = function() {
    if (this.ba) {
        var a = w() - this.g;
        0 < a && a < 0.8 * this.b ? this.L = this.a.setTimeout(this.f, this.b - a) : (this.L && (this.a.clearTimeout(this.L), this.L = null), this.dispatchEvent("tick"), this.ba && (Db(this), this.start()));
    }
};
g.start = function() {
    this.ba = !0;
    this.L || (this.L = this.a.setTimeout(this.f, this.b), this.g = w());
};
function Db(a) {
    a.ba = !1;
    a.L && (a.a.clearTimeout(a.L), a.L = null);
}
g.G = function() {
    Cb.N.G.call(this);
    Db(this);
    delete this.a;
};
function Eb(a, b, c) {
    if ("function" == p(a)) c && (a = u(a, c));
    else if (a && "function" == typeof a.handleEvent) a = u(a.handleEvent, a);
    else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0);
}
function Fb(a, b, c) {
    y.call(this);
    this.f = null != c ? u(a, c) : a;
    this.c = b;
    this.b = u(this.$a, this);
    this.a = [];
}
x(Fb, y);
g = Fb.prototype;
g.ea = !1;
g.U = null;
g.Ta = function(a) {
    this.a = arguments;
    this.U ? this.ea = !0 : Gb(this);
};
g.G = function() {
    Fb.N.G.call(this);
    this.U && (k.clearTimeout(this.U), this.U = null, this.ea = !1, this.a = []);
};
g.$a = function() {
    this.U = null;
    this.ea && (this.ea = !1, Gb(this));
};
function Gb(a) {
    a.U = Eb(a.b, a.c);
    a.f.apply(null, a.a);
}
function H(a) {
    y.call(this);
    this.b = a;
    this.a = {
    };
}
x(H, y);
var Hb = [];
function Ib(a, b, c, d) {
    q(c) || (c && (Hb[0] = c.toString()), c = Hb);
    for(var e = 0; e < c.length; e++){
        var f = bb(b, c[e], d || a.handleEvent, !1, a.b || a);
        if (!f) break;
        a.a[f.key] = f;
    }
}
function Jb(a) {
    va(a.a, function(b, c) {
        this.a.hasOwnProperty(c) && kb(b);
    }, a);
    a.a = {
    };
}
H.prototype.G = function() {
    H.N.G.call(this);
    Jb(this);
};
H.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
};
function Kb() {
}
var I = new G;
function Lb(a) {
    C.call(this, "serverreachability", a);
}
x(Lb, C);
function J(a) {
    I.dispatchEvent(new Lb(I, a));
}
function Mb(a) {
    C.call(this, "statevent", a);
}
x(Mb, C);
function K(a) {
    I.dispatchEvent(new Mb(I, a));
}
function Nb(a) {
    C.call(this, "timingevent", a);
}
x(Nb, C);
function Ob(a, b) {
    if ("function" != p(a)) throw Error("Fn must not be null and must be a function");
    return k.setTimeout(function() {
        a();
    }, b);
}
var Pb = {
    NO_ERROR: 0,
    gb: 1,
    nb: 2,
    mb: 3,
    jb: 4,
    lb: 5,
    ob: 6,
    La: 7,
    TIMEOUT: 8,
    rb: 9
};
var Qb = {
    ib: "complete",
    vb: "success",
    Ma: "error",
    La: "abort",
    tb: "ready",
    ub: "readystatechange",
    TIMEOUT: "timeout",
    pb: "incrementaldata",
    sb: "progress",
    kb: "downloadprogress",
    wb: "uploadprogress"
};
function Rb() {
}
Rb.prototype.a = null;
function Sb(a) {
    var b;
    (b = a.a) || (b = a.a = {
    });
    return b;
}
function Tb() {
}
var L = {
    OPEN: "a",
    hb: "b",
    Ma: "c",
    qb: "d"
};
function Ub() {
    C.call(this, "d");
}
x(Ub, C);
function Vb() {
    C.call(this, "c");
}
x(Vb, C);
var Wb;
function Xb() {
}
x(Xb, Rb);
Wb = new Xb;
function M(a, b, c) {
    this.g = a;
    this.W = b;
    this.V = c || 1;
    this.I = new H(this);
    this.O = Yb;
    a = Ea ? 125 : void 0;
    this.P = new Cb(a);
    this.h = null;
    this.b = !1;
    this.l = this.D = this.f = this.F = this.v = this.R = this.i = null;
    this.j = [];
    this.a = null;
    this.A = 0;
    this.c = this.w = null;
    this.o = -1;
    this.m = !1;
    this.J = 0;
    this.B = null;
    this.s = this.S = this.H = !1;
}
var Yb = 45000, Zb = {
}, $b = {
};
g = M.prototype;
g.setTimeout = function(a) {
    this.O = a;
};
function ac(a, b, c) {
    a.F = 1;
    a.f = bc(N(b));
    a.l = c;
    a.H = !0;
    cc(a, null);
}
function dc(a, b, c, d) {
    a.F = 1;
    a.f = bc(N(b));
    a.l = null;
    a.H = c;
    cc(a, d);
}
function cc(a, b) {
    a.v = w();
    ec(a);
    a.D = N(a.f);
    fc(a.D, "t", a.V);
    a.A = 0;
    a.a = a.g.$(a.g.Y() ? b : null);
    0 < a.J && (a.B = new Fb(u(a.Ja, a, a.a), a.J));
    Ib(a.I, a.a, "readystatechange", a.cb);
    b = a.h ? wa(a.h) : {
    };
    a.l ? (a.w || (a.w = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ca(a.D, a.w, a.l, b)) : (a.w = "GET", a.a.ca(a.D, a.w, null, b));
    J(1);
}
g.cb = function(a) {
    a = a.target;
    var b = this.B;
    b && 3 == O(a) ? b.Ta() : this.Ja(a);
};
g.Ja = function(a) {
    try {
        if (a == this.a) a: {
            var b = O(this.a), c = this.a.ya(), d = this.a.T();
            if (!(3 > b || 3 == b && !Ea && !this.a.aa())) {
                this.m || 4 != b || 7 == c || (8 == c || 0 >= d ? J(3) : J(2));
                gc(this);
                var e = this.a.T();
                this.o = e;
                var f = this.a.aa();
                if (this.b = 200 == e) {
                    if (this.S && !this.s) {
                        b: {
                            if (this.a) {
                                var h = hc(this.a, "X-HTTP-Initial-Response");
                                if (h && !qa(h)) {
                                    var l = h;
                                    break b;
                                }
                            }
                            l = null;
                        }
                        if (l) this.s = !0, ic(this, l);
                        else {
                            this.b = !1;
                            this.c = 3;
                            K(12);
                            P(this);
                            jc(this);
                            break a;
                        }
                    }
                    this.H ? (kc(this, b, f), Ea && this.b && 3 == b && (Ib(this.I, this.P, "tick", this.bb), this.P.start())) : ic(this, f);
                    4 == b && P(this);
                    this.b && !this.m && (4 == b ? this.g.na(this) : (this.b = !1, ec(this)));
                } else 400 == e && 0 < f.indexOf("Unknown SID") ? (this.c = 3, K(12)) : (this.c = 0, K(13)), P(this), jc(this);
            }
        }
    } catch (E) {
    } finally{
    }
};
function kc(a, b, c) {
    for(var d = !0; !a.m && a.A < c.length;){
        var e = lc(a, c);
        if (e == $b) {
            4 == b && (a.c = 4, K(14), d = !1);
            break;
        } else if (e == Zb) {
            a.c = 4;
            K(15);
            d = !1;
            break;
        } else ic(a, e);
    }
    4 == b && 0 == c.length && (a.c = 1, K(16), d = !1);
    a.b = a.b && d;
    d || (P(a), jc(a));
}
g.bb = function() {
    if (this.a) {
        var a = O(this.a), b = this.a.aa();
        this.A < b.length && (gc(this), kc(this, a, b), this.b && 4 != a && ec(this));
    }
};
function lc(a, b) {
    var c = a.A, d = b.indexOf("\n", c);
    if (-1 == d) return $b;
    c = Number(b.substring(c, d));
    if (isNaN(c)) return Zb;
    d += 1;
    if (d + c > b.length) return $b;
    b = b.substr(d, c);
    a.A = d + c;
    return b;
}
g.cancel = function() {
    this.m = !0;
    P(this);
};
function ec(a) {
    a.R = w() + a.O;
    mc(a, a.O);
}
function mc(a, b) {
    if (null != a.i) throw Error("WatchDog timer not null");
    a.i = Ob(u(a.ab, a), b);
}
function gc(a) {
    a.i && (k.clearTimeout(a.i), a.i = null);
}
g.ab = function() {
    this.i = null;
    var a = w();
    0 <= a - this.R ? (2 != this.F && (J(3), K(17)), P(this), this.c = 2, jc(this)) : mc(this, this.R - a);
};
function jc(a) {
    a.g.Ca() || a.m || a.g.na(a);
}
function P(a) {
    gc(a);
    var b = a.B;
    b && "function" == typeof b.la && b.la();
    a.B = null;
    Db(a.P);
    Jb(a.I);
    a.a && (b = a.a, a.a = null, b.abort(), b.la());
}
function ic(a, b) {
    try {
        a.g.Fa(a, b), J(4);
    } catch (c) {
    }
}
function nc(a) {
    if (a.C && "function" == typeof a.C) return a.C();
    if (m(a)) return a.split("");
    if (ca(a)) {
        for(var b = [], c = a.length, d = 0; d < c; d++)b.push(a[d]);
        return b;
    }
    b = [];
    c = 0;
    for(d in a)b[c++] = a[d];
    return b;
}
function oc(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);
    else if (ca(a) || m(a)) la(a, b, void 0);
    else {
        if (a.K && "function" == typeof a.K) var c = a.K();
        else if (a.C && "function" == typeof a.C) c = void 0;
        else if (ca(a) || m(a)) {
            c = [];
            for(var d = a.length, e = 0; e < d; e++)c.push(e);
        } else for(e in c = [], d = 0, a)c[d++] = e;
        d = nc(a);
        e = d.length;
        for(var f = 0; f < e; f++)b.call(void 0, d[f], c && c[f], a);
    }
}
function Q(a, b) {
    this.b = {
    };
    this.a = [];
    this.c = 0;
    var c = arguments.length;
    if (1 < c) {
        if (c % 2) throw Error("Uneven number of arguments");
        for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
    } else if (a) {
        if (a instanceof Q) for(c = a.K(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
        else for(d in a)this.set(d, a[d]);
    }
}
g = Q.prototype;
g.C = function() {
    pc(this);
    for(var a = [], b = 0; b < this.a.length; b++)a.push(this.b[this.a[b]]);
    return a;
};
g.K = function() {
    pc(this);
    return this.a.concat();
};
function qc(a) {
    a.b = {
    };
    a.a.length = 0;
    a.c = 0;
}
function rc(a, b) {
    R(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && pc(a));
}
function pc(a) {
    if (a.c != a.a.length) {
        for(var b = 0, c = 0; b < a.a.length;){
            var d = a.a[b];
            R(a.b, d) && (a.a[c++] = d);
            b++;
        }
        a.a.length = c;
    }
    if (a.c != a.a.length) {
        var e = {
        };
        for(c = b = 0; b < a.a.length;)d = a.a[b], R(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        a.a.length = c;
    }
}
g.get = function(a, b) {
    return R(this.b, a) ? this.b[a] : b;
};
g.set = function(a, b) {
    R(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
};
g.forEach = function(a, b) {
    for(var c = this.K(), d = 0; d < c.length; d++){
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    }
};
function R(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}
var sc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
function tc(a, b) {
    if (a) {
        a = a.split("&");
        for(var c = 0; c < a.length; c++){
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            } else f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    }
}
function S(a, b) {
    this.b = this.j = this.f = "";
    this.i = null;
    this.g = this.a = "";
    this.h = !1;
    var c;
    a instanceof S ? (this.h = (void 0) !== b ? b : a.h, uc(this, a.f), this.j = a.j, vc(this, a.b), wc(this, a.i), this.a = a.a, xc(this, yc(a.c)), this.g = a.g) : a && (c = String(a).match(sc)) ? (this.h = !!b, uc(this, c[1] || "", !0), this.j = zc(c[2] || ""), vc(this, c[3] || "", !0), wc(this, c[4]), this.a = zc(c[5] || "", !0), xc(this, c[6] || "", !0), this.g = zc(c[7] || "")) : (this.h = !!b, this.c = new Ac(null, this.h));
}
S.prototype.toString = function() {
    var a = [], b = this.f;
    b && a.push(Bc(b, Cc, !0), ":");
    var c = this.b;
    if (c || "file" == b) a.push("//"), (b = this.j) && a.push(Bc(b, Cc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.i, null != c && a.push(":", String(c));
    if (c = this.a) this.b && "/" != c.charAt(0) && a.push("/"), a.push(Bc(c, "/" == c.charAt(0) ? Dc : Ec, !0));
    (c = this.c.toString()) && a.push("?", c);
    (c = this.g) && a.push("#", Bc(c, Fc));
    return a.join("");
};
S.prototype.resolve = function(a) {
    var b = N(this), c = !!a.f;
    c ? uc(b, a.f) : c = !!a.j;
    c ? b.j = a.j : c = !!a.b;
    c ? vc(b, a.b) : c = null != a.i;
    var d = a.a;
    if (c) wc(b, a.i);
    else if (c = !!a.a) {
        if ("/" != d.charAt(0)) {
            if (this.b && !this.a) d = "/" + d;
            else {
                var e = b.a.lastIndexOf("/");
                -1 != e && (d = b.a.substr(0, e + 1) + d);
            }
        }
        e = d;
        if (".." == e || "." == e) d = "";
        else if (z(e, "./") || z(e, "/.")) {
            d = 0 == e.lastIndexOf("/", 0);
            e = e.split("/");
            for(var f = [], h = 0; h < e.length;){
                var l = e[h++];
                "." == l ? d && h == e.length && f.push("") : ".." == l ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && h == e.length && f.push("")) : (f.push(l), d = !0);
            }
            d = f.join("/");
        } else d = e;
    }
    c ? b.a = d : c = "" !== a.c.toString();
    c ? xc(b, yc(a.c)) : c = !!a.g;
    c && (b.g = a.g);
    return b;
};
function N(a) {
    return new S(a);
}
function uc(a, b, c) {
    a.f = c ? zc(b, !0) : b;
    a.f && (a.f = a.f.replace(/:$/, ""));
}
function vc(a, b, c) {
    a.b = c ? zc(b, !0) : b;
}
function wc(a, b) {
    if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
        a.i = b;
    } else a.i = null;
}
function xc(a, b, c) {
    b instanceof Ac ? (a.c = b, Gc(a.c, a.h)) : (c || (b = Bc(b, Hc)), a.c = new Ac(b, a.h));
}
function T(a, b, c) {
    a.c.set(b, c);
}
function fc(a, b, c) {
    q(c) || (c = [
        String(c)
    ]);
    Ic(a.c, b, c);
}
function bc(a) {
    T(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ w()).toString(36));
    return a;
}
function Jc(a) {
    return a instanceof S ? N(a) : new S(a, void 0);
}
function Kc(a, b, c, d) {
    var e = new S(null, void 0);
    a && uc(e, a);
    b && vc(e, b);
    c && wc(e, c);
    d && (e.a = d);
    return e;
}
function zc(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}
function Bc(a, b, c) {
    return m(a) ? (a = encodeURI(a).replace(b, Lc), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}
function Lc(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}
var Cc = /[#\/\?@]/g, Ec = /[#\?:]/g, Dc = /[#\?]/g, Hc = /[#\?@]/g, Fc = /#/g;
function Ac(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
}
function U(a) {
    a.a || (a.a = new Q, a.b = 0, a.c && tc(a.c, function(b, c) {
        a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
}
g = Ac.prototype;
g.add = function(a, b) {
    U(this);
    this.c = null;
    a = V(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
};
function Mc(a, b) {
    U(a);
    b = V(a, b);
    R(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, rc(a.a, b));
}
function Nc(a, b) {
    U(a);
    b = V(a, b);
    return R(a.a.b, b);
}
g.forEach = function(a, b) {
    U(this);
    this.a.forEach(function(c, d) {
        la(c, function(e) {
            a.call(b, e, d, this);
        }, this);
    }, this);
};
g.K = function() {
    U(this);
    for(var a = this.a.C(), b = this.a.K(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
    return c;
};
g.C = function(a) {
    U(this);
    var b = [];
    if (m(a)) Nc(this, a) && (b = oa(b, this.a.get(V(this, a))));
    else {
        a = this.a.C();
        for(var c = 0; c < a.length; c++)b = oa(b, a[c]);
    }
    return b;
};
g.set = function(a, b) {
    U(this);
    this.c = null;
    a = V(this, a);
    Nc(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [
        b
    ]);
    this.b += 1;
    return this;
};
g.get = function(a, b) {
    if (!a) return b;
    a = this.C(a);
    return 0 < a.length ? String(a[0]) : b;
};
function Ic(a, b, c) {
    Mc(a, b);
    0 < c.length && (a.c = null, a.a.set(V(a, b), pa(c)), a.b += c.length);
}
g.toString = function() {
    if (this.c) return this.c;
    if (!this.a) return "";
    for(var a = [], b = this.a.K(), c = 0; c < b.length; c++){
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.C(d);
        for(var f = 0; f < d.length; f++){
            var h = e;
            "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
            a.push(h);
        }
    }
    return this.c = a.join("&");
};
function yc(a) {
    var b = new Ac;
    b.c = a.c;
    a.a && (b.a = new Q(a.a), b.b = a.b);
    return b;
}
function V(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
}
function Gc(a, b) {
    b && !a.f && (U(a), a.c = null, a.a.forEach(function(c, d) {
        var e = d.toLowerCase();
        d != e && (Mc(this, d), Ic(this, e, c));
    }, a));
    a.f = b;
}
function Qc() {
}
function Rc() {
}
x(Rc, Qc);
function Sc(a) {
    this.a = a;
    this.b = this.h = null;
    this.g = !1;
    this.i = null;
    this.c = -1;
    this.l = this.f = null;
}
g = Sc.prototype;
g.M = null;
function Uc(a) {
    var b = a.a.F.a;
    if (null != b) K(4), b ? (K(10), Vc(a.a, a, !1)) : (K(11), Vc(a.a, a, !0));
    else {
        a.b = new M(a, void 0, void 0);
        a.b.h = a.h;
        b = a.a;
        b = Wc(b, b.Y() ? a.f : null, a.i);
        K(4);
        fc(b, "TYPE", "xmlhttp");
        var c = a.a.j, d = a.a.I;
        c && d && T(b, c, d);
        dc(a.b, b, !1, a.f);
    }
}
g.$ = function(a) {
    return this.a.$(a);
};
g.abort = function() {
    this.b && (this.b.cancel(), this.b = null);
    this.c = -1;
};
g.Ca = function() {
    return !1;
};
g.Fa = function(a, b) {
    this.c = a.o;
    if (0 == this.M) {
        if (!this.a.o && (a = a.a)) {
            var c = hc(a, "X-Client-Wire-Protocol");
            this.l = c ? c : null;
            this.a.j && (a = hc(a, "X-HTTP-Session-Id")) && (this.a.I = a);
        }
        if (b) {
            try {
                var d = this.a.ja.a.parse(b);
            } catch (e) {
                b = this.a;
                b.m = this.c;
                W(b, 2);
                return;
            }
            this.f = d[0];
        } else b = this.a, b.m = this.c, W(b, 2);
    } else if (1 == this.M) {
        if (this.g) K(6);
        else if ("11111" == b) {
            if (K(5), this.g = !0, !B || 10 <= Number(Na)) this.c = 200, this.b.cancel(), K(11), Vc(this.a, this, !0);
        } else K(7), this.g = !1;
    }
};
g.na = function() {
    this.c = this.b.o;
    if (this.b.b) 0 == this.M ? (this.M = 1, Uc(this)) : 1 == this.M && (this.g ? (K(11), Vc(this.a, this, !0)) : (K(10), Vc(this.a, this, !1)));
    else {
        0 == this.M ? K(8) : 1 == this.M && K(9);
        var a = this.a;
        a.m = this.c;
        W(a, 2);
    }
};
g.Y = function() {
    return this.a.Y();
};
g.ma = function() {
    return this.a.ma();
};
function Xc() {
    this.a = this.b = null;
}
function Yc() {
    this.a = new Q;
}
function Zc(a) {
    var b = typeof a;
    return "object" == b && a || "function" == b ? "o" + (a[t] || (a[t] = ++da)) : b.charAt(0) + a;
}
Yc.prototype.add = function(a) {
    this.a.set(Zc(a), a);
};
Yc.prototype.C = function() {
    return this.a.C();
};
function $c(a, b) {
    this.b = a;
    this.a = b;
}
function ad(a) {
    this.g = a || bd;
    k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ka && k.ka.Da && k.ka.Da() && k.ka.Da().yb);
    this.f = a ? this.g : 1;
    this.a = null;
    1 < this.f && (this.a = new Yc);
    this.b = null;
    this.c = [];
}
var bd = 10;
function cd(a, b) {
    !a.a && (z(b, "spdy") || z(b, "quic") || z(b, "h2")) && (a.f = a.g, a.a = new Yc, a.b && (dd(a, a.b), a.b = null));
}
function ed(a) {
    return a.b ? !0 : a.a ? a.a.a.c >= a.f : !1;
}
function fd(a) {
    return a.b ? 1 : a.a ? a.a.a.c : 0;
}
function gd(a, b) {
    a.b ? a = a.b == b : a.a ? (b = Zc(b), a = R(a.a.a.b, b)) : a = !1;
    return a;
}
function dd(a, b) {
    a.a ? a.a.add(b) : a.b = b;
}
function hd(a, b) {
    if (a.b && a.b == b) a.b = null;
    else {
        var c;
        if (c = a.a) c = Zc(b), c = R(a.a.a.b, c);
        c && rc(a.a.a, Zc(b));
    }
}
ad.prototype.cancel = function() {
    this.c = id(this);
    this.b ? (this.b.cancel(), this.b = null) : this.a && 0 != this.a.a.c && (la(this.a.C(), function(a) {
        a.cancel();
    }), qc(this.a.a));
};
function id(a) {
    if (null != a.b) return a.c.concat(a.b.j);
    if (null != a.a && 0 != a.a.a.c) {
        var b = a.c;
        la(a.a.C(), function(c) {
            b = b.concat(c.j);
        });
        return b;
    }
    return pa(a.c);
}
function jd() {
}
jd.prototype.stringify = function(a) {
    return k.JSON.stringify(a, void 0);
};
jd.prototype.parse = function(a) {
    return k.JSON.parse(a, void 0);
};
function kd() {
    this.a = new jd;
}
function ld(a, b, c) {
    var d = c || "";
    try {
        oc(a, function(e, f) {
            var h = e;
            r(e) && (h = ob(e));
            b.push(d + f + "=" + encodeURIComponent(h));
        });
    } catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    }
}
function md(a, b) {
    var c = new Kb;
    if (k.Image) {
        var d = new Image;
        d.onload = v(nd, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = v(nd, c, d, "TestLoadImage: error", !1, b);
        d.onabort = v(nd, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = v(nd, c, d, "TestLoadImage: timeout", !1, b);
        k.setTimeout(function() {
            if (d.ontimeout) d.ontimeout();
        }, 10000);
        d.src = a;
    } else b(!1);
}
function nd(a, b, c, d, e) {
    try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    } catch (f) {
    }
}
var od = k.JSON.parse;
function X(a) {
    G.call(this);
    this.headers = new Q;
    this.H = a || null;
    this.b = !1;
    this.s = this.a = null;
    this.A = "";
    this.h = 0;
    this.f = "";
    this.g = this.w = this.l = this.v = !1;
    this.o = 0;
    this.m = null;
    this.I = pd;
    this.D = this.F = !1;
}
x(X, G);
var pd = "", qd = /^https?$/i, rd = [
    "POST",
    "PUT"
];
g = X.prototype;
g.ca = function(a, b, c, d) {
    if (this.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.A + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.A = a;
    this.f = "";
    this.h = 0;
    this.v = !1;
    this.b = !0;
    this.a = new XMLHttpRequest;
    this.s = this.H ? Sb(this.H) : Sb(Wb);
    this.a.onreadystatechange = u(this.Ea, this);
    try {
        this.w = !0, this.a.open(b, String(a), !0), this.w = !1;
    } catch (f) {
        sd(this, f);
        return;
    }
    a = c || "";
    var e = new Q(this.headers);
    d && oc(d, function(f, h) {
        e.set(h, f);
    });
    d = ma(e.K());
    c = k.FormData && a instanceof k.FormData;
    !(0 <= ja(rd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    e.forEach(function(f, h) {
        this.a.setRequestHeader(h, f);
    }, this);
    this.I && (this.a.responseType = this.I);
    "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
    try {
        td(this), 0 < this.o && ((this.D = ud(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = u(this.Ba, this)) : this.m = Eb(this.Ba, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
    } catch (f) {
        sd(this, f);
    }
};
function ud(a) {
    return B && Ma(9) && aa(a.timeout) && (void 0) !== a.ontimeout;
}
function na(a) {
    return "content-type" == a.toLowerCase();
}
g.Ba = function() {
    "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, this.dispatchEvent("timeout"), this.abort(8));
};
function sd(a, b) {
    a.b = !1;
    a.a && (a.g = !0, a.a.abort(), a.g = !1);
    a.f = b;
    a.h = 5;
    vd(a);
    wd(a);
}
function vd(a) {
    a.v || (a.v = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
}
g.abort = function(a) {
    this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, this.dispatchEvent("complete"), this.dispatchEvent("abort"), wd(this));
};
g.G = function() {
    this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), wd(this, !0));
    X.N.G.call(this);
};
g.Ea = function() {
    this.j || (this.w || this.l || this.g ? xd(this) : this.Za());
};
g.Za = function() {
    xd(this);
};
function xd(a) {
    if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.T())) {
        if (a.l && 4 == O(a)) Eb(a.Ea, 0, a);
        else if (a.dispatchEvent("readystatechange"), 4 == O(a)) {
            a.b = !1;
            try {
                var b = a.T();
                a: switch(b){
                    case 200:
                    case 201:
                    case 202:
                    case 204:
                    case 206:
                    case 304:
                    case 1223:
                        var c = !0;
                        break a;
                    default:
                        c = !1;
                }
                var d;
                if (!(d = c)) {
                    var e;
                    if (e = 0 === b) {
                        var f = String(a.A).match(sc)[1] || null;
                        if (!f && k.self && k.self.location) {
                            var h = k.self.location.protocol;
                            f = h.substr(0, h.length - 1);
                        }
                        e = !qd.test(f ? f.toLowerCase() : "");
                    }
                    d = e;
                }
                if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");
                else {
                    a.h = 6;
                    try {
                        var l = 2 < O(a) ? a.a.statusText : "";
                    } catch (E) {
                        l = "";
                    }
                    a.f = l + " [" + a.T() + "]";
                    vd(a);
                }
            } finally{
                wd(a);
            }
        }
    }
}
function wd(a, b) {
    if (a.a) {
        td(a);
        var c = a.a, d = a.s[0] ? ba : null;
        a.a = null;
        a.s = null;
        b || a.dispatchEvent("ready");
        try {
            c.onreadystatechange = d;
        } catch (e) {
        }
    }
}
function td(a) {
    a.a && a.D && (a.a.ontimeout = null);
    a.m && (k.clearTimeout(a.m), a.m = null);
}
function O(a) {
    return a.a ? a.a.readyState : 0;
}
g.T = function() {
    try {
        return 2 < O(this) ? this.a.status : -1;
    } catch (a) {
        return -1;
    }
};
g.aa = function() {
    try {
        return this.a ? this.a.responseText : "";
    } catch (a) {
        return "";
    }
};
g.Ua = function(a) {
    if (this.a) {
        var b = this.a.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return od(b);
    }
};
function hc(a, b) {
    return a.a ? a.a.getResponseHeader(b) : null;
}
g.ya = function() {
    return this.h;
};
g.Xa = function() {
    return m(this.f) ? this.f : String(this.f);
};
function yd(a) {
    var b = "";
    va(a, function(c, d) {
        b += d;
        b += ":";
        b += c;
        b += "\r\n";
    });
    return b;
}
function zd(a, b, c) {
    a: {
        for(d in c){
            var d = !1;
            break a;
        }
        d = !0;
    }
    if (d) return a;
    c = yd(c);
    if (m(a)) {
        b = encodeURIComponent(String(b));
        c = null != c ? "=" + encodeURIComponent(String(c)) : "";
        if (b += c) {
            c = a.indexOf("#");
            0 > c && (c = a.length);
            d = a.indexOf("?");
            if (0 > d || d > c) {
                d = c;
                var e = "";
            } else e = a.substring(d + 1, c);
            a = [
                a.substr(0, d),
                e,
                a.substr(c)
            ];
            c = a[1];
            a[1] = b ? c ? c + "&" + b : b : c;
            a = a[0] + (a[1] ? "?" + a[1] : "") + a[2];
        }
        return a;
    }
    T(a, b, c);
    return a;
}
function Ad(a) {
    this.f = [];
    this.F = new Xc;
    this.ga = this.pa = this.B = this.ha = this.a = this.I = this.j = this.V = this.g = this.J = this.i = null;
    this.Qa = this.P = 0;
    this.Oa = !!n("internalChannelParams.failFast", a);
    this.ia = this.w = this.s = this.l = this.h = this.c = null;
    this.oa = !0;
    this.m = this.ra = this.O = -1;
    this.S = this.v = this.A = 0;
    this.Na = n("internalChannelParams.baseRetryDelayMs", a) || 5000;
    this.Ra = n("internalChannelParams.retryDelaySeedMs", a) || 10000;
    this.Pa = n("internalChannelParams.forwardChannelMaxRetries", a) || 2;
    this.qa = n("internalChannelParams.forwardChannelRequestTimeoutMs", a) || 20000;
    this.Ka = a && a.zb || void 0;
    this.D = void 0;
    this.R = a && a.supportsCrossDomainXhr || !1;
    this.H = "";
    this.b = new ad(a && a.concurrentRequestLimit);
    this.ja = new kd;
    this.o = a && (void 0) !== a.backgroundChannelTest ? a.backgroundChannelTest : !0;
    (this.W = a && a.fastHandshake || !1) && !this.o && (this.o = !0);
    a && a.forceLongPolling && (this.oa = !1);
    this.fa = void 0;
}
g = Ad.prototype;
g.wa = 8;
g.u = 1;
function Bd(a) {
    Cd(a);
    if (3 == a.u) {
        var b = a.P++, c = N(a.B);
        T(c, "SID", a.H);
        T(c, "RID", b);
        T(c, "TYPE", "terminate");
        Dd(a, c);
        b = new M(a, b, void 0);
        b.F = 2;
        b.f = bc(N(c));
        c = !1;
        k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.f.toString(), ""));
        !c && k.Image && ((new Image).src = b.f, c = !0);
        c || (b.a = b.g.$(null), b.a.ca(b.f));
        b.v = w();
        ec(b);
    }
    Ed(a);
}
function Cd(a) {
    a.w && (a.w.abort(), a.w = null);
    a.a && (a.a.cancel(), a.a = null);
    a.l && (k.clearTimeout(a.l), a.l = null);
    Fd(a);
    a.b.cancel();
    a.h && (aa(a.h) && k.clearTimeout(a.h), a.h = null);
}
function Gd(a, b) {
    a.f.push(new $c(a.Qa++, b));
    3 == a.u && Hd(a);
}
g.Ca = function() {
    return 0 == this.u;
};
function Hd(a) {
    ed(a.b) || a.h || (a.h = !0, wb(a.Ha, a), a.A = 0);
}
function Id(a, b) {
    if (fd(a.b) >= a.b.f - (a.h ? 1 : 0)) return !1;
    if (a.h) return a.f = b.j.concat(a.f), !0;
    if (1 == a.u || 2 == a.u || a.A >= (a.Oa ? 0 : a.Pa)) return !1;
    a.h = Ob(u(a.Ha, a, b), Jd(a, a.A));
    a.A++;
    return !0;
}
g.Ha = function(a) {
    if (this.h) {
        if (this.h = null, 1 == this.u) {
            if (!a) {
                this.P = Math.floor(100000 * Math.random());
                a = this.P++;
                var b = new M(this, a, void 0), c = this.i;
                this.J && (c ? (c = wa(c), ya(c, this.J)) : c = this.J);
                null === this.g && (b.h = c);
                var d;
                if (this.W) a: {
                    for(var e = d = 0; e < this.f.length; e++){
                        b: {
                            var f = this.f[e];
                            if ("__data__" in f.a && (f = f.a.__data__, m(f))) {
                                f = f.length;
                                break b;
                            }
                            f = void 0;
                        }
                        if ((void 0) === f) break;
                        d += f;
                        if (4096 < d) {
                            d = e;
                            break a;
                        }
                        if (4096 === d || e === this.f.length - 1) {
                            d = e + 1;
                            break a;
                        }
                    }
                    d = 1000;
                }
                else d = 1000;
                d = Kd(this, b, d);
                e = N(this.B);
                T(e, "RID", a);
                T(e, "CVER", 22);
                this.o && this.j && T(e, "X-HTTP-Session-Id", this.j);
                Dd(this, e);
                this.g && c && zd(e, this.g, c);
                dd(this.b, b);
                this.W ? (T(e, "$req", d), T(e, "SID", "null"), b.S = !0, ac(b, e, null)) : ac(b, e, d);
                this.u = 2;
            }
        } else 3 == this.u && (a ? Ld(this, a) : 0 == this.f.length || ed(this.b) || Ld(this));
    }
};
function Ld(a, b) {
    var c;
    b ? c = b.W : c = a.P++;
    var d = N(a.B);
    T(d, "SID", a.H);
    T(d, "RID", c);
    T(d, "AID", a.O);
    Dd(a, d);
    a.g && a.i && zd(d, a.g, a.i);
    c = new M(a, c, a.A + 1);
    null === a.g && (c.h = a.i);
    b && (a.f = b.j.concat(a.f));
    b = Kd(a, c, 1000);
    c.setTimeout(Math.round(0.5 * a.qa) + Math.round(0.5 * a.qa * Math.random()));
    dd(a.b, c);
    ac(c, d, b);
}
function Dd(a, b) {
    a.c && oc({
    }, function(c, d) {
        T(b, d, c);
    });
}
function Kd(a, b, c) {
    c = Math.min(a.f.length, c);
    var d = a.c ? u(a.c.Sa, a.c, a) : null;
    a: for(var e = a.f, f = -1;;){
        var h = [
            "count=" + c
        ];
        -1 == f ? 0 < c ? (f = e[0].b, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
        for(var l = !0, E = 0; E < c; E++){
            var Bb = e[E].b, Tc = e[E].a;
            Bb -= f;
            if (0 > Bb) f = Math.max(0, e[E].b - 100), l = !1;
            else try {
                ld(Tc, h, "req" + Bb + "_");
            } catch (Ud) {
                d && d(Tc);
            }
        }
        if (l) {
            d = h.join("&");
            break a;
        }
    }
    a = a.f.splice(0, c);
    b.j = a;
    return d;
}
function Md(a) {
    a.a || a.l || (a.S = 1, wb(a.Ga, a), a.v = 0);
}
function Nd(a) {
    if (a.a || a.l || 3 <= a.v) return !1;
    a.S++;
    a.l = Ob(u(a.Ga, a), Jd(a, a.v));
    a.v++;
    return !0;
}
g.Ga = function() {
    this.l = null;
    this.a = new M(this, "rpc", this.S);
    null === this.g && (this.a.h = this.i);
    this.a.J = 0;
    var a = N(this.pa);
    T(a, "RID", "rpc");
    T(a, "SID", this.H);
    T(a, "CI", this.ia ? "0" : "1");
    T(a, "AID", this.O);
    Dd(this, a);
    T(a, "TYPE", "xmlhttp");
    this.g && this.i && zd(a, this.g, this.i);
    this.D && this.a.setTimeout(this.D);
    dc(this.a, a, !0, this.ga);
};
function Vc(a, b, c) {
    var d = b.l;
    d && cd(a.b, d);
    a.ia = a.oa && c;
    a.m = b.c;
    a.B = Wc(a, null, a.ha);
    Hd(a);
}
g.Fa = function(a, b) {
    if (0 != this.u && (this.a == a || gd(this.b, a))) {
        if (this.m = a.o, !a.s && gd(this.b, a) && 3 == this.u) {
            try {
                var c = this.ja.a.parse(b);
            } catch (f) {
                c = null;
            }
            if (q(c) && 3 == c.length) {
                b = c;
                if (0 == b[0]) a: if (!this.l) {
                    if (this.a) {
                        if (this.a.v + 3000 < a.v) Fd(this), this.a.cancel(), this.a = null;
                        else break a;
                    }
                    Nd(this);
                    K(18);
                }
                else this.ra = b[1], 0 < this.ra - this.O && 37500 > b[2] && this.ia && 0 == this.v && !this.s && (this.s = Ob(u(this.Ya, this), 6000));
                if (1 >= fd(this.b) && this.fa) {
                    try {
                        this.fa();
                    } catch (f) {
                    }
                    this.fa = void 0;
                }
            } else W(this, 11);
        } else if ((a.s || this.a == a) && Fd(this), !qa(b)) for(b = c = this.ja.a.parse(b), c = 0; c < b.length; c++){
            var d = b[c];
            this.O = d[0];
            d = d[1];
            if (2 == this.u) {
                if ("c" == d[0]) {
                    this.H = d[1];
                    this.ga = d[2];
                    var e = d[3];
                    null != e && (this.wa = e);
                    d = d[5];
                    null != d && aa(d) && 0 < d && (this.D = 1.5 * d);
                    this.o && (d = a.a) && ((e = hc(d, "X-Client-Wire-Protocol")) && cd(this.b, e), this.j && (d = hc(d, "X-HTTP-Session-Id"))) && (this.I = d, T(this.B, this.j, d));
                    this.u = 3;
                    this.c && this.c.va();
                    d = a;
                    this.pa = Wc(this, this.Y() ? this.ga : null, this.ha);
                    d.s ? (hd(this.b, d), (e = this.D) && d.setTimeout(e), d.i && (gc(d), ec(d)), this.a = d) : Md(this);
                    0 < this.f.length && Hd(this);
                } else "stop" != d[0] && "close" != d[0] || W(this, 7);
            } else 3 == this.u && ("stop" == d[0] || "close" == d[0] ? "stop" == d[0] ? W(this, 7) : Bd(this) : "noop" != d[0] && this.c && this.c.ua(d), this.v = 0);
        }
    }
};
g.Ya = function() {
    null != this.s && (this.s = null, this.a.cancel(), this.a = null, Nd(this), K(19));
};
function Fd(a) {
    null != a.s && (k.clearTimeout(a.s), a.s = null);
}
g.na = function(a) {
    var b = null;
    if (this.a == a) {
        Fd(this);
        this.a = null;
        var c = 2;
    } else if (gd(this.b, a)) b = a.j, hd(this.b, a), c = 1;
    else return;
    this.m = a.o;
    if (0 != this.u) {
        if (a.b) 1 == c ? (b = w() - a.v, I.dispatchEvent(new Nb(I, a.l ? a.l.length : 0, b, this.A)), Hd(this)) : Md(this);
        else {
            var d = a.c;
            if (3 == d || 0 == d && 0 < this.m || !(1 == c && Id(this, a) || 2 == c && Nd(this))) switch(b && 0 < b.length && (a = this.b, a.c = a.c.concat(b)), d){
                case 1:
                    W(this, 5);
                    break;
                case 4:
                    W(this, 10);
                    break;
                case 3:
                    W(this, 6);
                    break;
                default:
                    W(this, 2);
            }
        }
    }
};
function Jd(a, b) {
    var c = a.Na + Math.floor(Math.random() * a.Ra);
    a.ma() || (c *= 2);
    return c * b;
}
function W(a, b) {
    if (2 == b) {
        var c = null;
        a.c && (c = null);
        var d = u(a.eb, a);
        c || (c = new S("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || uc(c, "https"), bc(c));
        md(c.toString(), d);
    } else K(2);
    a.u = 0;
    a.c && a.c.ta(b);
    Ed(a);
    Cd(a);
}
g.eb = function(a) {
    a ? K(2) : K(1);
};
function Ed(a) {
    a.u = 0;
    a.m = -1;
    if (a.c) {
        if (0 != id(a.b).length || 0 != a.f.length) a.b.c.length = 0, pa(a.f), a.f.length = 0;
        a.c.sa();
    }
}
function Wc(a, b, c) {
    var d = Jc(c);
    if ("" != d.b) b && vc(d, b + "." + d.b), wc(d, d.i);
    else {
        var e = k.location, f;
        b ? f = b + "." + e.hostname : f = e.hostname;
        d = Kc(e.protocol, f, +e.port, c);
    }
    a.V && va(a.V, function(h, l) {
        T(d, l, h);
    });
    b = a.j;
    c = a.I;
    b && c && T(d, b, c);
    T(d, "VER", a.wa);
    Dd(a, d);
    return d;
}
g.$ = function(a) {
    if (a && !this.R) throw Error("Can't create secondary domain capable XhrIo object.");
    a = new X(this.Ka);
    a.F = this.R;
    return a;
};
g.ma = function() {
    return !!this.c && !0;
};
g.Y = function() {
    return this.R;
};
function Od() {
}
g = Od.prototype;
g.va = function() {
};
g.ua = function() {
};
g.ta = function() {
};
g.sa = function() {
};
g.Sa = function() {
};
function Pd(a) {
    for(var b = arguments[0], c = 1; c < arguments.length; c++){
        var d = arguments[c];
        if (0 == d.lastIndexOf("/", 0)) b = d;
        else {
            var e;
            (e = "" == b) || (e = b.length - 1, e = 0 <= e && b.indexOf("/", e) == e);
            e ? b += d : b += "/" + d;
        }
    }
    return b;
}
function Qd() {
    if (B && !(10 <= Number(Na))) throw Error("Environmental error: no available transport.");
}
Qd.prototype.a = function(a, b) {
    return new Y(a, b);
};
function Y(a, b) {
    G.call(this);
    this.a = new Ad(b);
    this.g = a;
    this.m = b && b.testUrl ? b.testUrl : Pd(this.g, "test");
    this.b = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
        "X-Client-Protocol": "webchannel"
    });
    this.a.i = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
        "X-WebChannel-Content-Type": b.messageContentType
    });
    b && b.xa && (a ? a["X-WebChannel-Client-Profile"] = b.xa : a = {
        "X-WebChannel-Client-Profile": b.xa
    });
    this.a.J = a;
    (a = b && b.httpHeadersOverwriteParam) && !qa(a) && (this.a.g = a);
    this.l = b && b.supportsCrossDomainXhr || !1;
    this.h = b && b.sendRawJson || !1;
    (b = b && b.httpSessionIdParam) && !qa(b) && (this.a.j = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
    this.f = new Z(this);
}
x(Y, G);
g = Y.prototype;
g.addEventListener = function(a, b, c, d) {
    Y.N.addEventListener.call(this, a, b, c, d);
};
g.removeEventListener = function(a, b, c, d) {
    Y.N.removeEventListener.call(this, a, b, c, d);
};
g.Va = function() {
    this.a.c = this.f;
    this.l && (this.a.R = !0);
    var a = this.a, b = this.m, c = this.g, d = this.b || void 0;
    K(0);
    a.ha = c;
    a.V = d || {
    };
    a.o && (a.F.b = [], a.F.a = !1);
    a.w = new Sc(a);
    null === a.g && (a.w.h = a.i);
    c = b;
    a.g && a.i && (c = zd(b, a.g, a.i));
    a = a.w;
    a.i = c;
    b = Wc(a.a, null, a.i);
    K(3);
    c = a.a.F.b;
    null != c ? (a.f = c[0], a.M = 1, Uc(a)) : (fc(b, "MODE", "init"), !a.a.o && a.a.j && fc(b, "X-HTTP-Session-Id", a.a.j), a.b = new M(a, void 0, void 0), a.b.h = a.h, dc(a.b, b, !1, null), a.M = 0);
};
g.close = function() {
    Bd(this.a);
};
g.Wa = function(a) {
    if (m(a)) {
        var b = {
        };
        b.__data__ = a;
        Gd(this.a, b);
    } else this.h ? (b = {
    }, b.__data__ = ob(a), Gd(this.a, b)) : Gd(this.a, a);
};
g.G = function() {
    this.a.c = null;
    delete this.f;
    Bd(this.a);
    delete this.a;
    Y.N.G.call(this);
};
function Rd(a) {
    Ub.call(this);
    var b = a.__sm__;
    if (b) {
        a: {
            for(var c in b){
                a = c;
                break a;
            }
            a = void 0;
        }
        (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
    } else this.data = a;
}
x(Rd, Ub);
function Sd() {
    Vb.call(this);
    this.status = 1;
}
x(Sd, Vb);
function Z(a) {
    this.a = a;
}
x(Z, Od);
Z.prototype.va = function() {
    this.a.dispatchEvent("a");
};
Z.prototype.ua = function(a) {
    this.a.dispatchEvent(new Rd(a));
};
Z.prototype.ta = function(a) {
    this.a.dispatchEvent(new Sd(a));
};
Z.prototype.sa = function() {
    this.a.dispatchEvent("b");
};
var Td = v(function(a, b) {
    function c() {
    }
    c.prototype = a.prototype;
    var d = new c;
    a.apply(d, Array.prototype.slice.call(arguments, 1));
    return d;
}, Qd); /*

 Copyright 2017 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/ 
Qd.prototype.createWebChannel = Qd.prototype.a;
Y.prototype.send = Y.prototype.Wa;
Y.prototype.open = Y.prototype.Va;
Y.prototype.close = Y.prototype.close;
Pb.NO_ERROR = 0;
Pb.TIMEOUT = 8;
Pb.HTTP_ERROR = 6;
Qb.COMPLETE = "complete";
Tb.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
G.prototype.listen = G.prototype.za;
X.prototype.listenOnce = X.prototype.Aa;
X.prototype.getLastError = X.prototype.Xa;
X.prototype.getLastErrorCode = X.prototype.ya;
X.prototype.getStatus = X.prototype.T;
X.prototype.getResponseJson = X.prototype.Ua;
X.prototype.getResponseText = X.prototype.aa;
X.prototype.send = X.prototype.ca;
var tmp = {
    createWebChannelTransport: Td,
    ErrorCode: Pb,
    EventType: Qb,
    WebChannel: Tb,
    XhrIo: X
};
var tmp_1 = tmp.createWebChannelTransport;
var tmp_2 = tmp.ErrorCode;
var tmp_3 = tmp.EventType;
var tmp_4 = tmp.WebChannel;
var tmp_5 = tmp.XhrIo;
exports.default = tmp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cAxUs":[function(require,module,exports) {
var _auth = require("@firebase/auth");

},{"@firebase/auth":"gV5ez"}],"gV5ez":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _app = require("@firebase/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var global = arguments[3];
(function() {
    var k, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        a != Array.prototype && a != Object.prototype && (a[b] = c.value);
    };
    function ba(a) {
        a = [
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global,
            a
        ];
        for(var b = 0; b < a.length; ++b){
            var c = a[b];
            if (c && c.Math == Math) return c;
        }
        return globalThis;
    }
    var ca = ba(this);
    function da(a, b) {
        if (b) {
            var c = ca;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                e in c || (c[e] = {
                });
                c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && aa(c, a, {
                configurable: !0,
                writable: !0,
                value: b
            });
        }
    }
    function ea(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: !1,
                value: a[b++]
            } : {
                done: !0
            };
        };
    }
    function fa(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: ea(a)
        };
    }
    da("Promise", function(a) {
        function b(g) {
            this.b = 0;
            this.c = void 0;
            this.a = [];
            var h = this.f();
            try {
                g(h.resolve, h.reject);
            } catch (m) {
                h.reject(m);
            }
        }
        function c() {
            this.a = null;
        }
        function d(g) {
            return g instanceof b ? g : new b(function(h) {
                h(g);
            });
        }
        if (a) return a;
        c.prototype.b = function(g) {
            if (null == this.a) {
                this.a = [];
                var h = this;
                this.c(function() {
                    h.g();
                });
            }
            this.a.push(g);
        };
        var e = ca.setTimeout;
        c.prototype.c = function(g) {
            e(g, 0);
        };
        c.prototype.g = function() {
            for(; this.a && this.a.length;){
                var g = this.a;
                this.a = [];
                for(var h = 0; h < g.length; ++h){
                    var m = g[h];
                    g[h] = null;
                    try {
                        m();
                    } catch (p) {
                        this.f(p);
                    }
                }
            }
            this.a = null;
        };
        c.prototype.f = function(g) {
            this.c(function() {
                throw g;
            });
        };
        b.prototype.f = function() {
            function g(p) {
                return function(u) {
                    m || (m = !0, p.call(h, u));
                };
            }
            var h = this, m = !1;
            return {
                resolve: g(this.m),
                reject: g(this.g)
            };
        };
        b.prototype.m = function(g) {
            if (g === this) this.g(new TypeError("A Promise cannot resolve to itself"));
            else if (g instanceof b) this.o(g);
            else {
                a: switch(typeof g){
                    case "object":
                        var h = null != g;
                        break a;
                    case "function":
                        h = !0;
                        break a;
                    default:
                        h = !1;
                }
                h ? this.u(g) : this.h(g);
            }
        };
        b.prototype.u = function(g) {
            var h = void 0;
            try {
                h = g.then;
            } catch (m) {
                this.g(m);
                return;
            }
            "function" == typeof h ? this.v(h, g) : this.h(g);
        };
        b.prototype.g = function(g) {
            this.i(2, g);
        };
        b.prototype.h = function(g) {
            this.i(1, g);
        };
        b.prototype.i = function(g, h) {
            if (0 != this.b) throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.b);
            this.b = g;
            this.c = h;
            this.l();
        };
        b.prototype.l = function() {
            if (null != this.a) {
                for(var g = 0; g < this.a.length; ++g)f.b(this.a[g]);
                this.a = null;
            }
        };
        var f = new c;
        b.prototype.o = function(g) {
            var h = this.f();
            g.La(h.resolve, h.reject);
        };
        b.prototype.v = function(g, h) {
            var m = this.f();
            try {
                g.call(h, m.resolve, m.reject);
            } catch (p) {
                m.reject(p);
            }
        };
        b.prototype.then = function(g, h) {
            function m(C, N) {
                return "function" == typeof C ? function(wa) {
                    try {
                        p(C(wa));
                    } catch (ld) {
                        u(ld);
                    }
                } : N;
            }
            var p, u, A = new b(function(C, N) {
                p = C;
                u = N;
            });
            this.La(m(g, p), m(h, u));
            return A;
        };
        b.prototype.catch = function(g) {
            return this.then(void 0, g);
        };
        b.prototype.La = function(g, h) {
            function m() {
                switch(p.b){
                    case 1:
                        g(p.c);
                        break;
                    case 2:
                        h(p.c);
                        break;
                    default:
                        throw Error("Unexpected state: " + p.b);
                }
            }
            var p = this;
            null == this.a ? f.b(m) : this.a.push(m);
        };
        b.resolve = d;
        b.reject = function(g) {
            return new b(function(h, m) {
                m(g);
            });
        };
        b.race = function(g) {
            return new b(function(h, m) {
                for(var p = fa(g), u = p.next(); !u.done; u = p.next())d(u.value).La(h, m);
            });
        };
        b.all = function(g) {
            var h = fa(g), m = h.next();
            return m.done ? d([]) : new b(function(p, u) {
                function A(wa) {
                    return function(ld) {
                        C[wa] = ld;
                        N--;
                        0 == N && p(C);
                    };
                }
                var C = [], N = 0;
                do C.push(void 0), N++, d(m.value).La(A(C.length - 1), u), m = h.next();
                while (!m.done)
            });
        };
        return b;
    });
    var ha = ha || {
    }, l = this || self;
    function n(a) {
        return "string" == typeof a;
    }
    function ia(a) {
        return "boolean" == typeof a;
    }
    var ja = /^[\w+/_-]+[=]{0,2}$/, ka = null;
    function la() {
    }
    function ma(a) {
        var b = typeof a;
        if ("object" == b) {
            if (a) {
                if (a instanceof Array) return "array";
                if (a instanceof Object) return b;
                var c = Object.prototype.toString.call(a);
                if ("[object Window]" == c) return "object";
                if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
                if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
            } else return "null";
        } else if ("function" == b && "undefined" == typeof a.call) return "object";
        return b;
    }
    function na(a) {
        return null === a;
    }
    function oa(a) {
        return "array" == ma(a);
    }
    function pa(a) {
        var b = ma(a);
        return "array" == b || "object" == b && "number" == typeof a.length;
    }
    function q(a) {
        return "function" == ma(a);
    }
    function r(a) {
        var b = typeof a;
        return "object" == b && null != a || "function" == b;
    }
    var qa = "closure_uid_" + (1000000000 * Math.random() >>> 0), ra = 0;
    function sa(a, b, c) {
        return a.call.apply(a.bind, arguments);
    }
    function ta(a, b, c) {
        if (!a) throw Error();
        if (2 < arguments.length) {
            var d = Array.prototype.slice.call(arguments, 2);
            return function() {
                var e = Array.prototype.slice.call(arguments);
                Array.prototype.unshift.apply(e, d);
                return a.apply(b, e);
            };
        }
        return function() {
            return a.apply(b, arguments);
        };
    }
    function t(a, b, c) {
        Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? t = sa : t = ta;
        return t.apply(null, arguments);
    }
    function ua(a, b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return function() {
            var d = c.slice();
            d.push.apply(d, arguments);
            return a.apply(this, d);
        };
    }
    var va = Date.now || function() {
        return +new Date;
    };
    function v(a, b) {
        function c() {
        }
        c.prototype = b.prototype;
        a.qb = b.prototype;
        a.prototype = new c;
        a.prototype.constructor = a;
    }
    function xa(a) {
        if (!a) return !1;
        try {
            return !!a.$goog_Thenable;
        } catch (b) {
            return !1;
        }
    }
    function w(a) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, w);
        else {
            var b = Error().stack;
            b && (this.stack = b);
        }
        a && (this.message = String(a));
    }
    v(w, Error);
    w.prototype.name = "CustomError";
    function ya(a, b) {
        a = a.split("%s");
        for(var c = "", d = a.length - 1, e = 0; e < d; e++)c += a[e] + (e < b.length ? b[e] : "%s");
        w.call(this, c + a[d]);
    }
    v(ya, w);
    ya.prototype.name = "AssertionError";
    function za(a, b) {
        throw new ya("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
    }
    function Aa(a, b) {
        this.c = a;
        this.f = b;
        this.b = 0;
        this.a = null;
    }
    Aa.prototype.get = function() {
        if (0 < this.b) {
            this.b--;
            var a = this.a;
            this.a = a.next;
            a.next = null;
        } else a = this.c();
        return a;
    };
    function Ba(a, b) {
        a.f(b);
        100 > a.b && (a.b++, b.next = a.a, a.a = b);
    }
    function Ca() {
        this.b = this.a = null;
    }
    var Ea = new Aa(function() {
        return new Da;
    }, function(a) {
        a.reset();
    });
    Ca.prototype.add = function(a, b) {
        var c = Ea.get();
        c.set(a, b);
        this.b ? this.b.next = c : this.a = c;
        this.b = c;
    };
    function Fa() {
        var a = Ga, b = null;
        a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
        return b;
    }
    function Da() {
        this.next = this.b = this.a = null;
    }
    Da.prototype.set = function(a, b) {
        this.a = a;
        this.b = b;
        this.next = null;
    };
    Da.prototype.reset = function() {
        this.next = this.b = this.a = null;
    };
    function Ha(a, b) {
        a: {
            try {
                var c = a && a.ownerDocument, d = c && (c.defaultView || c.parentWindow);
                d = d || l;
                if (d.Element && d.Location) {
                    var e = d;
                    break a;
                }
            } catch (g) {
            }
            e = null;
        }
        if (e && "undefined" != typeof e[b] && (!a || !(a instanceof e[b]) && (a instanceof e.Location || a instanceof e.Element))) {
            if (r(a)) try {
                var f = a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);
            } catch (g) {
                f = "<object could not be stringified>";
            }
            else f = (void 0) === a ? "undefined" : null === a ? "null" : typeof a;
            za("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, f);
        }
    }
    var Ia = Array.prototype.indexOf ? function(a, b) {
        return Array.prototype.indexOf.call(a, b, void 0);
    } : function(a, b) {
        if (n(a)) return n(b) && 1 == b.length ? a.indexOf(b, 0) : -1;
        for(var c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
        return -1;
    }, x = Array.prototype.forEach ? function(a, b, c) {
        Array.prototype.forEach.call(a, b, c);
    } : function(a, b, c) {
        for(var d = a.length, e = n(a) ? a.split("") : a, f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
    };
    function Ja(a, b) {
        for(var c = n(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d)d in c && b.call(void 0, c[d], d, a);
    }
    var Ka = Array.prototype.map ? function(a, b) {
        return Array.prototype.map.call(a, b, void 0);
    } : function(a, b) {
        for(var c = a.length, d = Array(c), e = n(a) ? a.split("") : a, f = 0; f < c; f++)f in e && (d[f] = b.call(void 0, e[f], f, a));
        return d;
    }, La = Array.prototype.some ? function(a, b) {
        return Array.prototype.some.call(a, b, void 0);
    } : function(a, b) {
        for(var c = a.length, d = n(a) ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) return !0;
        return !1;
    };
    function Ma(a) {
        a: {
            var b = Na;
            for(var c = a.length, d = n(a) ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
            b = -1;
        }
        return 0 > b ? null : n(a) ? a.charAt(b) : a[b];
    }
    function Oa(a, b) {
        return 0 <= Ia(a, b);
    }
    function Pa(a, b) {
        b = Ia(a, b);
        var c;
        (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
        return c;
    }
    function Qa(a, b) {
        var c = 0;
        Ja(a, function(d, e) {
            b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
        });
    }
    function Ra(a) {
        return Array.prototype.concat.apply([], arguments);
    }
    function Sa(a) {
        var b = a.length;
        if (0 < b) {
            for(var c = Array(b), d = 0; d < b; d++)c[d] = a[d];
            return c;
        }
        return [];
    }
    function Ta(a, b) {
        for(var c in a)b.call(void 0, a[c], c, a);
    }
    function Ua(a) {
        for(var b in a)return !1;
        return !0;
    }
    function Va(a) {
        var b = {
        }, c;
        for(c in a)b[c] = a[c];
        return b;
    }
    var Wa = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Xa(a, b) {
        for(var c, d, e = 1; e < arguments.length; e++){
            d = arguments[e];
            for(c in d)a[c] = d[c];
            for(var f = 0; f < Wa.length; f++)c = Wa[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
    }
    function Ya(a, b) {
        this.a = a === Za && b || "";
        this.b = $a;
    }
    Ya.prototype.qa = !0;
    Ya.prototype.pa = function() {
        return this.a;
    };
    Ya.prototype.toString = function() {
        return "Const{" + this.a + "}";
    };
    function ab(a) {
        if (a instanceof Ya && a.constructor === Ya && a.b === $a) return a.a;
        za("expected object of type Const, got '" + a + "'");
        return "type_error:Const";
    }
    var $a = {
    }, Za = {
    }, bb = new Ya(Za, "");
    function cb() {
        this.a = "";
        this.b = db;
    }
    cb.prototype.qa = !0;
    cb.prototype.pa = function() {
        return this.a.toString();
    };
    cb.prototype.toString = function() {
        return "TrustedResourceUrl{" + this.a + "}";
    };
    function eb(a) {
        if (a instanceof cb && a.constructor === cb && a.b === db) return a.a;
        za("expected object of type TrustedResourceUrl, got '" + a + "' of type " + ma(a));
        return "type_error:TrustedResourceUrl";
    }
    function fb(a, b) {
        var c = ab(a);
        if (!gb.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
        a = c.replace(hb, function(d, e) {
            if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
            d = b[e];
            return d instanceof Ya ? ab(d) : encodeURIComponent(String(d));
        });
        return ib(a);
    }
    var hb = /%{(\w+)}/g, gb = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i, db = {
    };
    function ib(a) {
        var b = new cb;
        b.a = a;
        return b;
    }
    var jb = String.prototype.trim ? function(a) {
        return a.trim();
    } : function(a) {
        return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
    }, kb = /&/g, lb = /</g, mb = />/g, nb = /"/g, ob = /'/g, pb = /\x00/g, qb = /[\x00&<>"']/;
    function y(a, b) {
        return -1 != a.indexOf(b);
    }
    function rb(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
    }
    function sb() {
        this.a = "";
        this.b = tb;
    }
    sb.prototype.qa = !0;
    sb.prototype.pa = function() {
        return this.a.toString();
    };
    sb.prototype.toString = function() {
        return "SafeUrl{" + this.a + "}";
    };
    function ub(a) {
        if (a instanceof sb && a.constructor === sb && a.b === tb) return a.a;
        za("expected object of type SafeUrl, got '" + a + "' of type " + ma(a));
        return "type_error:SafeUrl";
    }
    var vb = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
    function wb(a) {
        if (a instanceof sb) return a;
        a = "object" == typeof a && a.qa ? a.pa() : String(a);
        vb.test(a) || (a = "about:invalid#zClosurez");
        return xb(a);
    }
    var tb = {
    };
    function xb(a) {
        var b = new sb;
        b.a = a;
        return b;
    }
    xb("about:blank");
    var yb;
    a: {
        var zb = l.navigator;
        if (zb) {
            var Ab = zb.userAgent;
            if (Ab) {
                yb = Ab;
                break a;
            }
        }
        yb = "";
    }
    function z(a) {
        return y(yb, a);
    }
    function Bb() {
        this.a = "";
        this.b = Cb;
    }
    Bb.prototype.qa = !0;
    Bb.prototype.pa = function() {
        return this.a.toString();
    };
    Bb.prototype.toString = function() {
        return "SafeHtml{" + this.a + "}";
    };
    function Db(a) {
        if (a instanceof Bb && a.constructor === Bb && a.b === Cb) return a.a;
        za("expected object of type SafeHtml, got '" + a + "' of type " + ma(a));
        return "type_error:SafeHtml";
    }
    var Cb = {
    };
    function Eb(a) {
        var b = new Bb;
        b.a = a;
        return b;
    }
    Eb("<!DOCTYPE html>");
    var Fb = Eb("");
    Eb("<br>");
    function Gb(a) {
        var b = ib(ab(bb));
        Ha(a, "HTMLIFrameElement");
        a.src = eb(b).toString();
    }
    function Hb(a, b) {
        Ha(a, "HTMLScriptElement");
        a.src = eb(b);
        if (null === ka) b: {
            b = l.document;
            if ((b = b.querySelector && b.querySelector("script[nonce]")) && (b = b.nonce || b.getAttribute("nonce")) && ja.test(b)) {
                ka = b;
                break b;
            }
            ka = "";
        }
        b = ka;
        b && a.setAttribute("nonce", b);
    }
    function Ib(a, b) {
        for(var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;)d += c.shift() + e.shift();
        return d + c.join("%s");
    }
    function Jb(a) {
        qb.test(a) && (-1 != a.indexOf("&") && (a = a.replace(kb, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(lb, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(mb, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(nb, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(ob, "&#39;")), -1 != a.indexOf("\x00") && (a = a.replace(pb, "&#0;")));
        return a;
    }
    function Kb(a) {
        l.setTimeout(function() {
            throw a;
        }, 0);
    }
    var Lb;
    function Mb() {
        var a = l.MessageChannel;
        "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !z("Presto") && (a = function() {
            var e = document.createElement("IFRAME");
            e.style.display = "none";
            Gb(e);
            document.documentElement.appendChild(e);
            var f = e.contentWindow;
            e = f.document;
            e.open();
            e.write(Db(Fb));
            e.close();
            var g = "callImmediate" + Math.random(), h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
            e = t(function(m) {
                if (("*" == h || m.origin == h) && m.data == g) this.port1.onmessage();
            }, this);
            f.addEventListener("message", e, !1);
            this.port1 = {
            };
            this.port2 = {
                postMessage: function() {
                    f.postMessage(g, h);
                }
            };
        });
        if ("undefined" !== typeof a && !z("Trident") && !z("MSIE")) {
            var b = new a, c = {
            }, d = c;
            b.port1.onmessage = function() {
                if ((void 0) !== c.next) {
                    c = c.next;
                    var e = c.yb;
                    c.yb = null;
                    e();
                }
            };
            return function(e) {
                d.next = {
                    yb: e
                };
                d = d.next;
                b.port2.postMessage(0);
            };
        }
        return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function(e) {
            var f = document.createElement("SCRIPT");
            f.onreadystatechange = function() {
                f.onreadystatechange = null;
                f.parentNode.removeChild(f);
                f = null;
                e();
                e = null;
            };
            document.documentElement.appendChild(f);
        } : function(e) {
            l.setTimeout(e, 0);
        };
    }
    function Nb(a, b) {
        Ob || Pb();
        Qb || (Ob(), Qb = !0);
        Ga.add(a, b);
    }
    var Ob;
    function Pb() {
        if (l.Promise && l.Promise.resolve) {
            var a = l.Promise.resolve(void 0);
            Ob = function() {
                a.then(Rb);
            };
        } else Ob = function() {
            var b = Rb;
            !q(l.setImmediate) || l.Window && l.Window.prototype && !z("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (Lb || (Lb = Mb()), Lb(b)) : l.setImmediate(b);
        };
    }
    var Qb = !1, Ga = new Ca;
    function Rb() {
        for(var a; a = Fa();){
            try {
                a.a.call(a.b);
            } catch (b) {
                Kb(b);
            }
            Ba(Ea, a);
        }
        Qb = !1;
    }
    function B(a, b) {
        this.a = Sb;
        this.i = void 0;
        this.f = this.b = this.c = null;
        this.g = this.h = !1;
        if (a != la) try {
            var c = this;
            a.call(b, function(d) {
                Tb(c, Ub, d);
            }, function(d) {
                if (!(d instanceof Vb)) try {
                    if (d instanceof Error) throw d;
                    throw Error("Promise rejected.");
                } catch (e) {
                }
                Tb(c, Wb, d);
            });
        } catch (d) {
            Tb(this, Wb, d);
        }
    }
    var Sb = 0, Ub = 2, Wb = 3;
    function Xb() {
        this.next = this.f = this.b = this.g = this.a = null;
        this.c = !1;
    }
    Xb.prototype.reset = function() {
        this.f = this.b = this.g = this.a = null;
        this.c = !1;
    };
    var Yb = new Aa(function() {
        return new Xb;
    }, function(a) {
        a.reset();
    });
    function Zb(a, b, c) {
        var d = Yb.get();
        d.g = a;
        d.b = b;
        d.f = c;
        return d;
    }
    function D(a) {
        if (a instanceof B) return a;
        var b = new B(la);
        Tb(b, Ub, a);
        return b;
    }
    function E(a) {
        return new B(function(b, c) {
            c(a);
        });
    }
    function $b(a, b, c) {
        ac(a, b, c, null) || Nb(ua(b, a));
    }
    function bc(a) {
        return new B(function(b, c) {
            var d = a.length, e = [];
            if (d) for(var f = function(p, u) {
                d--;
                e[p] = u;
                0 == d && b(e);
            }, g = function(p) {
                c(p);
            }, h = 0, m; h < a.length; h++)m = a[h], $b(m, ua(f, h), g);
            else b(e);
        });
    }
    function cc(a) {
        return new B(function(b) {
            var c = a.length, d = [];
            if (c) for(var e = function(h, m, p) {
                c--;
                d[h] = m ? {
                    Gb: !0,
                    value: p
                } : {
                    Gb: !1,
                    reason: p
                };
                0 == c && b(d);
            }, f = 0, g; f < a.length; f++)g = a[f], $b(g, ua(e, f, !0), ua(e, f, !1));
            else b(d);
        });
    }
    B.prototype.then = function(a, b, c) {
        return dc(this, q(a) ? a : null, q(b) ? b : null, c);
    };
    B.prototype.$goog_Thenable = !0;
    k = B.prototype;
    k.ka = function(a, b) {
        a = Zb(a, a, b);
        a.c = !0;
        ec(this, a);
        return this;
    };
    k.s = function(a, b) {
        return dc(this, null, a, b);
    };
    k.cancel = function(a) {
        this.a == Sb && Nb(function() {
            var b = new Vb(a);
            fc(this, b);
        }, this);
    };
    function fc(a, b) {
        if (a.a == Sb) {
            if (a.c) {
                var c = a.c;
                if (c.b) {
                    for(var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next)e || (f = g);
                    e && (c.a == Sb && 1 == d ? fc(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : gc(c), hc(c, e, Wb, b)));
                }
                a.c = null;
            } else Tb(a, Wb, b);
        }
    }
    function ec(a, b) {
        a.b || a.a != Ub && a.a != Wb || ic(a);
        a.f ? a.f.next = b : a.b = b;
        a.f = b;
    }
    function dc(a, b, c, d) {
        var e = Zb(null, null, null);
        e.a = new B(function(f, g) {
            e.g = b ? function(h) {
                try {
                    var m = b.call(d, h);
                    f(m);
                } catch (p) {
                    g(p);
                }
            } : f;
            e.b = c ? function(h) {
                try {
                    var m = c.call(d, h);
                    (void 0) === m && h instanceof Vb ? g(h) : f(m);
                } catch (p) {
                    g(p);
                }
            } : g;
        });
        e.a.c = a;
        ec(a, e);
        return e.a;
    }
    k.Oc = function(a) {
        this.a = Sb;
        Tb(this, Ub, a);
    };
    k.Pc = function(a) {
        this.a = Sb;
        Tb(this, Wb, a);
    };
    function Tb(a, b, c) {
        a.a == Sb && (a === c && (b = Wb, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, ac(c, a.Oc, a.Pc, a) || (a.i = c, a.a = b, a.c = null, ic(a), b != Wb || c instanceof Vb || jc(a, c)));
    }
    function ac(a, b, c, d) {
        if (a instanceof B) return ec(a, Zb(b || la, c || null, d)), !0;
        if (xa(a)) return a.then(b, c, d), !0;
        if (r(a)) try {
            var e = a.then;
            if (q(e)) return kc(a, e, b, c, d), !0;
        } catch (f) {
            return c.call(d, f), !0;
        }
        return !1;
    }
    function kc(a, b, c, d, e) {
        function f(m) {
            h || (h = !0, d.call(e, m));
        }
        function g(m) {
            h || (h = !0, c.call(e, m));
        }
        var h = !1;
        try {
            b.call(a, g, f);
        } catch (m) {
            f(m);
        }
    }
    function ic(a) {
        a.h || (a.h = !0, Nb(a.Zb, a));
    }
    function gc(a) {
        var b = null;
        a.b && (b = a.b, a.b = b.next, b.next = null);
        a.b || (a.f = null);
        return b;
    }
    k.Zb = function() {
        for(var a; a = gc(this);)hc(this, a, this.a, this.i);
        this.h = !1;
    };
    function hc(a, b, c, d) {
        if (c == Wb && b.b && !b.c) for(; a && a.g; a = a.c)a.g = !1;
        if (b.a) b.a.c = null, lc(b, c, d);
        else try {
            b.c ? b.g.call(b.f) : lc(b, c, d);
        } catch (e) {
            mc.call(null, e);
        }
        Ba(Yb, b);
    }
    function lc(a, b, c) {
        b == Ub ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
    }
    function jc(a, b) {
        a.g = !0;
        Nb(function() {
            a.g && mc.call(null, b);
        });
    }
    var mc = Kb;
    function Vb(a) {
        w.call(this, a);
    }
    v(Vb, w);
    Vb.prototype.name = "cancel";
    function nc() {
        0 != oc && (pc[this[qa] || (this[qa] = ++ra)] = this);
        this.va = this.va;
        this.la = this.la;
    }
    var oc = 0, pc = {
    };
    nc.prototype.va = !1;
    function qc(a) {
        if (!a.va && (a.va = !0, a.za(), 0 != oc)) {
            var b = a[qa] || (a[qa] = ++ra);
            if (0 != oc && a.la && 0 < a.la.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
            delete pc[b];
        }
    }
    nc.prototype.za = function() {
        if (this.la) for(; this.la.length;)this.la.shift()();
    };
    function rc(a) {
        rc[" "](a);
        return a;
    }
    rc[" "] = la;
    function sc(a, b) {
        var c = tc;
        return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
    }
    var uc = z("Opera"), vc = z("Trident") || z("MSIE"), wc = z("Edge"), xc = wc || vc, yc = z("Gecko") && !(y(yb.toLowerCase(), "webkit") && !z("Edge")) && !(z("Trident") || z("MSIE")) && !z("Edge"), zc = y(yb.toLowerCase(), "webkit") && !z("Edge");
    function Ac() {
        var a = l.document;
        return a ? a.documentMode : void 0;
    }
    var Bc;
    a: {
        var Cc = "", Dc = function() {
            var a = yb;
            if (yc) return /rv:([^\);]+)(\)|;)/.exec(a);
            if (wc) return /Edge\/([\d\.]+)/.exec(a);
            if (vc) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
            if (zc) return /WebKit\/(\S+)/.exec(a);
            if (uc) return /(?:Version)[ \/]?(\S+)/.exec(a);
        }();
        Dc && (Cc = Dc ? Dc[1] : "");
        if (vc) {
            var Ec = Ac();
            if (null != Ec && Ec > parseFloat(Cc)) {
                Bc = String(Ec);
                break a;
            }
        }
        Bc = Cc;
    }
    var tc = {
    };
    function Fc(a) {
        return sc(a, function() {
            for(var b = 0, c = jb(String(Bc)).split("."), d = jb(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++){
                var g = c[f] || "", h = d[f] || "";
                do {
                    g = /(\d*)(\D*)(.*)/.exec(g) || [
                        "",
                        "",
                        "",
                        ""
                    ];
                    h = /(\d*)(\D*)(.*)/.exec(h) || [
                        "",
                        "",
                        "",
                        ""
                    ];
                    if (0 == g[0].length && 0 == h[0].length) break;
                    b = rb(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || rb(0 == g[2].length, 0 == h[2].length) || rb(g[2], h[2]);
                    g = g[3];
                    h = h[3];
                }while (0 == b)
            }
            return 0 <= b;
        });
    }
    var Gc;
    Gc = l.document && vc ? Ac() : void 0;
    var Hc = Object.freeze || function(a) {
        return a;
    };
    var Ic = !vc || 9 <= Number(Gc), Jc = vc && !Fc("9"), Kc = function() {
        if (!l.addEventListener || !Object.defineProperty) return !1;
        var a = !1, b = Object.defineProperty({
        }, "passive", {
            get: function() {
                a = !0;
            }
        });
        try {
            l.addEventListener("test", la, b), l.removeEventListener("test", la, b);
        } catch (c) {
        }
        return a;
    }();
    function F(a, b) {
        this.type = a;
        this.b = this.target = b;
        this.Mb = !0;
    }
    F.prototype.preventDefault = function() {
        this.Mb = !1;
    };
    function Lc(a, b) {
        F.call(this, a ? a.type : "");
        this.relatedTarget = this.b = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
        this.pointerId = 0;
        this.pointerType = "";
        this.a = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.b = b;
            if (b = a.relatedTarget) {
                if (yc) {
                    a: {
                        try {
                            rc(b.nodeName);
                            var e = !0;
                            break a;
                        } catch (f) {
                        }
                        e = !1;
                    }
                    e || (b = null);
                }
            } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = (void 0) !== d.clientX ? d.clientX : d.pageX, this.clientY = (void 0) !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = (void 0) !== a.clientX ? a.clientX : a.pageX, this.clientY = (void 0) !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey = a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = n(a.pointerType) ? a.pointerType : Mc[a.pointerType] || "";
            this.a = a;
            a.defaultPrevented && this.preventDefault();
        }
    }
    v(Lc, F);
    var Mc = Hc({
        2: "touch",
        3: "pen",
        4: "mouse"
    });
    Lc.prototype.preventDefault = function() {
        Lc.qb.preventDefault.call(this);
        var a = this.a;
        if (a.preventDefault) a.preventDefault();
        else if (a.returnValue = !1, Jc) try {
            if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
        } catch (b) {
        }
    };
    Lc.prototype.f = function() {
        return this.a;
    };
    var Nc = "closure_listenable_" + (1000000 * Math.random() | 0), Oc = 0;
    function Pc(a, b, c, d, e) {
        this.listener = a;
        this.proxy = null;
        this.src = b;
        this.type = c;
        this.capture = !!d;
        this.Pa = e;
        this.key = ++Oc;
        this.ta = this.Ka = !1;
    }
    function Qc(a) {
        a.ta = !0;
        a.listener = null;
        a.proxy = null;
        a.src = null;
        a.Pa = null;
    }
    function Rc(a) {
        this.src = a;
        this.a = {
        };
        this.b = 0;
    }
    Rc.prototype.add = function(a, b, c, d, e) {
        var f = a.toString();
        a = this.a[f];
        a || (a = this.a[f] = [], this.b++);
        var g = Sc(a, b, d, e);
        -1 < g ? (b = a[g], c || (b.Ka = !1)) : (b = new Pc(b, this.src, f, !!d, e), b.Ka = c, a.push(b));
        return b;
    };
    function Tc(a, b) {
        var c = b.type;
        c in a.a && Pa(a.a[c], b) && (Qc(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    }
    function Sc(a, b, c, d) {
        for(var e = 0; e < a.length; ++e){
            var f = a[e];
            if (!f.ta && f.listener == b && f.capture == !!c && f.Pa == d) return e;
        }
        return -1;
    }
    var Uc = "closure_lm_" + (1000000 * Math.random() | 0), Vc = {
    }, Wc = 0;
    function Xc(a, b, c, d, e) {
        if (d && d.once) Yc(a, b, c, d, e);
        else if (oa(b)) for(var f = 0; f < b.length; f++)Xc(a, b[f], c, d, e);
        else c = Zc(c), a && a[Nc] ? $c(a, b, c, r(d) ? !!d.capture : !!d, e) : ad(a, b, c, !1, d, e);
    }
    function ad(a, b, c, d, e, f) {
        if (!b) throw Error("Invalid event type");
        var g = r(e) ? !!e.capture : !!e, h = bd(a);
        h || (a[Uc] = h = new Rc(a));
        c = h.add(b, c, d, g, f);
        if (!c.proxy) {
            d = cd();
            c.proxy = d;
            d.src = a;
            d.listener = c;
            if (a.addEventListener) Kc || (e = g), (void 0) === e && (e = !1), a.addEventListener(b.toString(), d, e);
            else if (a.attachEvent) a.attachEvent(dd(b.toString()), d);
            else if (a.addListener && a.removeListener) a.addListener(d);
            else throw Error("addEventListener and attachEvent are unavailable.");
            Wc++;
        }
    }
    function cd() {
        var a = ed, b = Ic ? function(c) {
            return a.call(b.src, b.listener, c);
        } : function(c) {
            c = a.call(b.src, b.listener, c);
            if (!c) return c;
        };
        return b;
    }
    function Yc(a, b, c, d, e) {
        if (oa(b)) for(var f = 0; f < b.length; f++)Yc(a, b[f], c, d, e);
        else c = Zc(c), a && a[Nc] ? fd(a, b, c, r(d) ? !!d.capture : !!d, e) : ad(a, b, c, !0, d, e);
    }
    function gd(a, b, c, d, e) {
        if (oa(b)) for(var f = 0; f < b.length; f++)gd(a, b[f], c, d, e);
        else (d = r(d) ? !!d.capture : !!d, c = Zc(c), a && a[Nc]) ? (a = a.u, b = String(b).toString(), b in a.a && (f = a.a[b], c = Sc(f, c, d, e), -1 < c && (Qc(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = bd(a)) && (b = a.a[b.toString()], a = -1, b && (a = Sc(b, c, d, e)), (c = -1 < a ? b[a] : null) && hd(c));
    }
    function hd(a) {
        if ("number" != typeof a && a && !a.ta) {
            var b = a.src;
            if (b && b[Nc]) Tc(b.u, a);
            else {
                var c = a.type, d = a.proxy;
                b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(dd(c), d) : b.addListener && b.removeListener && b.removeListener(d);
                Wc--;
                (c = bd(b)) ? (Tc(c, a), 0 == c.b && (c.src = null, b[Uc] = null)) : Qc(a);
            }
        }
    }
    function dd(a) {
        return a in Vc ? Vc[a] : Vc[a] = "on" + a;
    }
    function id(a, b, c, d) {
        var e = !0;
        if (a = bd(a)) {
            if (b = a.a[b.toString()]) for(b = b.concat(), a = 0; a < b.length; a++){
                var f = b[a];
                f && f.capture == c && !f.ta && (f = jd(f, d), e = e && !1 !== f);
            }
        }
        return e;
    }
    function jd(a, b) {
        var c = a.listener, d = a.Pa || a.src;
        a.Ka && hd(a);
        return c.call(d, b);
    }
    function ed(a, b) {
        if (a.ta) return !0;
        if (!Ic) {
            if (!b) a: {
                b = [
                    "window",
                    "event"
                ];
                for(var c = l, d = 0; d < b.length; d++)if (c = c[b[d]], null == c) {
                    b = null;
                    break a;
                }
                b = c;
            }
            d = b;
            b = new Lc(d, this);
            c = !0;
            if (!(0 > d.keyCode || (void 0) != d.returnValue)) {
                a: {
                    var e = !1;
                    if (0 == d.keyCode) try {
                        d.keyCode = -1;
                        break a;
                    } catch (g) {
                        e = !0;
                    }
                    if (e || (void 0) == d.returnValue) d.returnValue = !0;
                }
                d = [];
                for(e = b.b; e; e = e.parentNode)d.push(e);
                a = a.type;
                for(e = d.length - 1; 0 <= e; e--){
                    b.b = d[e];
                    var f = id(d[e], a, !0, b);
                    c = c && f;
                }
                for(e = 0; e < d.length; e++)b.b = d[e], f = id(d[e], a, !1, b), c = c && f;
            }
            return c;
        }
        return jd(a, new Lc(b, this));
    }
    function bd(a) {
        a = a[Uc];
        return a instanceof Rc ? a : null;
    }
    var kd = "__closure_events_fn_" + (1000000000 * Math.random() >>> 0);
    function Zc(a) {
        if (q(a)) return a;
        a[kd] || (a[kd] = function(b) {
            return a.handleEvent(b);
        });
        return a[kd];
    }
    function G() {
        nc.call(this);
        this.u = new Rc(this);
        this.Sb = this;
        this.Xa = null;
    }
    v(G, nc);
    G.prototype[Nc] = !0;
    G.prototype.addEventListener = function(a, b, c, d) {
        Xc(this, a, b, c, d);
    };
    G.prototype.removeEventListener = function(a, b, c, d) {
        gd(this, a, b, c, d);
    };
    G.prototype.dispatchEvent = function(a) {
        var b, c = this.Xa;
        if (c) for(b = []; c; c = c.Xa)b.push(c);
        c = this.Sb;
        var d = a.type || a;
        if (n(a)) a = new F(a, c);
        else if (a instanceof F) a.target = a.target || c;
        else {
            var e = a;
            a = new F(d, c);
            Xa(a, e);
        }
        e = !0;
        if (b) for(var f = b.length - 1; 0 <= f; f--){
            var g = a.b = b[f];
            e = md(g, d, !0, a) && e;
        }
        g = a.b = c;
        e = md(g, d, !0, a) && e;
        e = md(g, d, !1, a) && e;
        if (b) for(f = 0; f < b.length; f++)g = a.b = b[f], e = md(g, d, !1, a) && e;
        return e;
    };
    G.prototype.za = function() {
        G.qb.za.call(this);
        if (this.u) {
            var a = this.u, b = 0, c;
            for(c in a.a){
                for(var d = a.a[c], e = 0; e < d.length; e++)++b, Qc(d[e]);
                delete a.a[c];
                a.b--;
            }
        }
        this.Xa = null;
    };
    function $c(a, b, c, d, e) {
        a.u.add(String(b), c, !1, d, e);
    }
    function fd(a, b, c, d, e) {
        a.u.add(String(b), c, !0, d, e);
    }
    function md(a, b, c, d) {
        b = a.u.a[String(b)];
        if (!b) return !0;
        b = b.concat();
        for(var e = !0, f = 0; f < b.length; ++f){
            var g = b[f];
            if (g && !g.ta && g.capture == c) {
                var h = g.listener, m = g.Pa || g.src;
                g.Ka && Tc(a.u, g);
                e = !1 !== h.call(m, d) && e;
            }
        }
        return e && 0 != d.Mb;
    }
    function nd(a, b, c) {
        if (q(a)) c && (a = t(a, c));
        else if (a && "function" == typeof a.handleEvent) a = t(a.handleEvent, a);
        else throw Error("Invalid listener argument");
        return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
    }
    function od(a) {
        var b = null;
        return new B(function(c, d) {
            b = nd(function() {
                c(void 0);
            }, a);
            -1 == b && d(Error("Failed to schedule timer."));
        }).s(function(c) {
            l.clearTimeout(b);
            throw c;
        });
    }
    function pd(a) {
        if (a.U && "function" == typeof a.U) return a.U();
        if (n(a)) return a.split("");
        if (pa(a)) {
            for(var b = [], c = a.length, d = 0; d < c; d++)b.push(a[d]);
            return b;
        }
        b = [];
        c = 0;
        for(d in a)b[c++] = a[d];
        return b;
    }
    function qd(a) {
        if (a.X && "function" == typeof a.X) return a.X();
        if (!a.U || "function" != typeof a.U) {
            if (pa(a) || n(a)) {
                var b = [];
                a = a.length;
                for(var c = 0; c < a; c++)b.push(c);
                return b;
            }
            b = [];
            c = 0;
            for(var d in a)b[c++] = d;
            return b;
        }
    }
    function rd(a, b) {
        if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);
        else if (pa(a) || n(a)) x(a, b, void 0);
        else for(var c = qd(a), d = pd(a), e = d.length, f = 0; f < e; f++)b.call(void 0, d[f], c && c[f], a);
    }
    function sd(a, b) {
        this.b = {
        };
        this.a = [];
        this.c = 0;
        var c = arguments.length;
        if (1 < c) {
            if (c % 2) throw Error("Uneven number of arguments");
            for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
        } else if (a) {
            if (a instanceof sd) for(c = a.X(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
            else for(d in a)this.set(d, a[d]);
        }
    }
    k = sd.prototype;
    k.U = function() {
        td(this);
        for(var a = [], b = 0; b < this.a.length; b++)a.push(this.b[this.a[b]]);
        return a;
    };
    k.X = function() {
        td(this);
        return this.a.concat();
    };
    k.clear = function() {
        this.b = {
        };
        this.c = this.a.length = 0;
    };
    function td(a) {
        if (a.c != a.a.length) {
            for(var b = 0, c = 0; b < a.a.length;){
                var d = a.a[b];
                ud(a.b, d) && (a.a[c++] = d);
                b++;
            }
            a.a.length = c;
        }
        if (a.c != a.a.length) {
            var e = {
            };
            for(c = b = 0; b < a.a.length;)d = a.a[b], ud(e, d) || (a.a[c++] = d, e[d] = 1), b++;
            a.a.length = c;
        }
    }
    k.get = function(a, b) {
        return ud(this.b, a) ? this.b[a] : b;
    };
    k.set = function(a, b) {
        ud(this.b, a) || (this.c++, this.a.push(a));
        this.b[a] = b;
    };
    k.forEach = function(a, b) {
        for(var c = this.X(), d = 0; d < c.length; d++){
            var e = c[d], f = this.get(e);
            a.call(b, f, e, this);
        }
    };
    function ud(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    var vd = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function wd(a, b) {
        if (a) {
            a = a.split("&");
            for(var c = 0; c < a.length; c++){
                var d = a[c].indexOf("="), e = null;
                if (0 <= d) {
                    var f = a[c].substring(0, d);
                    e = a[c].substring(d + 1);
                } else f = a[c];
                b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
            }
        }
    }
    function xd(a, b) {
        this.b = this.i = this.f = "";
        this.l = null;
        this.g = this.c = "";
        this.h = !1;
        var c;
        a instanceof xd ? (this.h = (void 0) !== b ? b : a.h, yd(this, a.f), this.i = a.i, this.b = a.b, zd(this, a.l), this.c = a.c, Ad(this, Bd(a.a)), this.g = a.g) : a && (c = String(a).match(vd)) ? (this.h = !!b, yd(this, c[1] || "", !0), this.i = Cd(c[2] || ""), this.b = Cd(c[3] || "", !0), zd(this, c[4]), this.c = Cd(c[5] || "", !0), Ad(this, c[6] || "", !0), this.g = Cd(c[7] || "")) : (this.h = !!b, this.a = new Dd(null, this.h));
    }
    xd.prototype.toString = function() {
        var a = [], b = this.f;
        b && a.push(Ed(b, Fd, !0), ":");
        var c = this.b;
        if (c || "file" == b) a.push("//"), (b = this.i) && a.push(Ed(b, Fd, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.l, null != c && a.push(":", String(c));
        if (c = this.c) this.b && "/" != c.charAt(0) && a.push("/"), a.push(Ed(c, "/" == c.charAt(0) ? Gd : Hd, !0));
        (c = this.a.toString()) && a.push("?", c);
        (c = this.g) && a.push("#", Ed(c, Id));
        return a.join("");
    };
    xd.prototype.resolve = function(a) {
        var b = new xd(this), c = !!a.f;
        c ? yd(b, a.f) : c = !!a.i;
        c ? b.i = a.i : c = !!a.b;
        c ? b.b = a.b : c = null != a.l;
        var d = a.c;
        if (c) zd(b, a.l);
        else if (c = !!a.c) {
            if ("/" != d.charAt(0)) {
                if (this.b && !this.c) d = "/" + d;
                else {
                    var e = b.c.lastIndexOf("/");
                    -1 != e && (d = b.c.substr(0, e + 1) + d);
                }
            }
            e = d;
            if (".." == e || "." == e) d = "";
            else if (y(e, "./") || y(e, "/.")) {
                d = 0 == e.lastIndexOf("/", 0);
                e = e.split("/");
                for(var f = [], g = 0; g < e.length;){
                    var h = e[g++];
                    "." == h ? d && g == e.length && f.push("") : ".." == h ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h), d = !0);
                }
                d = f.join("/");
            } else d = e;
        }
        c ? b.c = d : c = "" !== a.a.toString();
        c ? Ad(b, Bd(a.a)) : c = !!a.g;
        c && (b.g = a.g);
        return b;
    };
    function yd(a, b, c) {
        a.f = c ? Cd(b, !0) : b;
        a.f && (a.f = a.f.replace(/:$/, ""));
    }
    function zd(a, b) {
        if (b) {
            b = Number(b);
            if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
            a.l = b;
        } else a.l = null;
    }
    function Ad(a, b, c) {
        b instanceof Dd ? (a.a = b, Jd(a.a, a.h)) : (c || (b = Ed(b, Kd)), a.a = new Dd(b, a.h));
    }
    function H(a, b, c) {
        a.a.set(b, c);
    }
    function Ld(a, b) {
        return a.a.get(b);
    }
    function Md(a) {
        return a instanceof xd ? new xd(a) : new xd(a, void 0);
    }
    function Nd(a, b) {
        var c = new xd(null, void 0);
        yd(c, "https");
        a && (c.b = a);
        b && (c.c = b);
        return c;
    }
    function Cd(a, b) {
        return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
    }
    function Ed(a, b, c) {
        return n(a) ? (a = encodeURI(a).replace(b, Od), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
    }
    function Od(a) {
        a = a.charCodeAt(0);
        return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
    }
    var Fd = /[#\/\?@]/g, Hd = /[#\?:]/g, Gd = /[#\?]/g, Kd = /[#\?@]/g, Id = /#/g;
    function Dd(a, b) {
        this.b = this.a = null;
        this.c = a || null;
        this.f = !!b;
    }
    function Pd(a) {
        a.a || (a.a = new sd, a.b = 0, a.c && wd(a.c, function(b, c) {
            a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
        }));
    }
    function Qd(a) {
        var b = qd(a);
        if ("undefined" == typeof b) throw Error("Keys are undefined");
        var c = new Dd(null, void 0);
        a = pd(a);
        for(var d = 0; d < b.length; d++){
            var e = b[d], f = a[d];
            oa(f) ? Rd(c, e, f) : c.add(e, f);
        }
        return c;
    }
    k = Dd.prototype;
    k.add = function(a, b) {
        Pd(this);
        this.c = null;
        a = Sd(this, a);
        var c = this.a.get(a);
        c || this.a.set(a, c = []);
        c.push(b);
        this.b += 1;
        return this;
    };
    function Td(a, b) {
        Pd(a);
        b = Sd(a, b);
        ud(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, ud(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && td(a)));
    }
    k.clear = function() {
        this.a = this.c = null;
        this.b = 0;
    };
    function Ud(a, b) {
        Pd(a);
        b = Sd(a, b);
        return ud(a.a.b, b);
    }
    k.forEach = function(a, b) {
        Pd(this);
        this.a.forEach(function(c, d) {
            x(c, function(e) {
                a.call(b, e, d, this);
            }, this);
        }, this);
    };
    k.X = function() {
        Pd(this);
        for(var a = this.a.U(), b = this.a.X(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
        return c;
    };
    k.U = function(a) {
        Pd(this);
        var b = [];
        if (n(a)) Ud(this, a) && (b = Ra(b, this.a.get(Sd(this, a))));
        else {
            a = this.a.U();
            for(var c = 0; c < a.length; c++)b = Ra(b, a[c]);
        }
        return b;
    };
    k.set = function(a, b) {
        Pd(this);
        this.c = null;
        a = Sd(this, a);
        Ud(this, a) && (this.b -= this.a.get(a).length);
        this.a.set(a, [
            b
        ]);
        this.b += 1;
        return this;
    };
    k.get = function(a, b) {
        if (!a) return b;
        a = this.U(a);
        return 0 < a.length ? String(a[0]) : b;
    };
    function Rd(a, b, c) {
        Td(a, b);
        0 < c.length && (a.c = null, a.a.set(Sd(a, b), Sa(c)), a.b += c.length);
    }
    k.toString = function() {
        if (this.c) return this.c;
        if (!this.a) return "";
        for(var a = [], b = this.a.X(), c = 0; c < b.length; c++){
            var d = b[c], e = encodeURIComponent(String(d));
            d = this.U(d);
            for(var f = 0; f < d.length; f++){
                var g = e;
                "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
                a.push(g);
            }
        }
        return this.c = a.join("&");
    };
    function Bd(a) {
        var b = new Dd;
        b.c = a.c;
        a.a && (b.a = new sd(a.a), b.b = a.b);
        return b;
    }
    function Sd(a, b) {
        b = String(b);
        a.f && (b = b.toLowerCase());
        return b;
    }
    function Jd(a, b) {
        b && !a.f && (Pd(a), a.c = null, a.a.forEach(function(c, d) {
            var e = d.toLowerCase();
            d != e && (Td(this, d), Rd(this, e, c));
        }, a));
        a.f = b;
    }
    var Vd = !vc || 9 <= Number(Gc);
    function Wd(a) {
        var b = document;
        return n(a) ? b.getElementById(a) : a;
    }
    function Xd(a, b) {
        Ta(b, function(c, d) {
            c && "object" == typeof c && c.qa && (c = c.pa());
            "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : Yd.hasOwnProperty(d) ? a.setAttribute(Yd[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
        });
    }
    var Yd = {
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        colspan: "colSpan",
        frameborder: "frameBorder",
        height: "height",
        maxlength: "maxLength",
        nonce: "nonce",
        role: "role",
        rowspan: "rowSpan",
        type: "type",
        usemap: "useMap",
        valign: "vAlign",
        width: "width"
    };
    function Zd(a, b, c) {
        var d = arguments, e = document, f = String(d[0]), g = d[1];
        if (!Vd && g && (g.name || g.type)) {
            f = [
                "<",
                f
            ];
            g.name && f.push(' name="', Jb(g.name), '"');
            if (g.type) {
                f.push(' type="', Jb(g.type), '"');
                var h = {
                };
                Xa(h, g);
                delete h.type;
                g = h;
            }
            f.push(">");
            f = f.join("");
        }
        f = e.createElement(f);
        g && (n(g) ? f.className = g : oa(g) ? f.className = g.join(" ") : Xd(f, g));
        2 < d.length && $d(e, f, d);
        return f;
    }
    function $d(a, b, c) {
        function d(g) {
            g && b.appendChild(n(g) ? a.createTextNode(g) : g);
        }
        for(var e = 2; e < c.length; e++){
            var f = c[e];
            !pa(f) || r(f) && 0 < f.nodeType ? d(f) : x(ae(f) ? Sa(f) : f, d);
        }
    }
    function ae(a) {
        if (a && "number" == typeof a.length) {
            if (r(a)) return "function" == typeof a.item || "string" == typeof a.item;
            if (q(a)) return "function" == typeof a.item;
        }
        return !1;
    }
    function be(a) {
        var b = [];
        ce(new de, a, b);
        return b.join("");
    }
    function de() {
    }
    function ce(a, b, c) {
        if (null == b) c.push("null");
        else {
            if ("object" == typeof b) {
                if (oa(b)) {
                    var d = b;
                    b = d.length;
                    c.push("[");
                    for(var e = "", f = 0; f < b; f++)c.push(e), ce(a, d[f], c), e = ",";
                    c.push("]");
                    return;
                }
                if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();
                else {
                    c.push("{");
                    e = "";
                    for(d in b)Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ee(d, c), c.push(":"), ce(a, f, c), e = ","));
                    c.push("}");
                    return;
                }
            }
            switch(typeof b){
                case "string":
                    ee(b, c);
                    break;
                case "number":
                    c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
                    break;
                case "boolean":
                    c.push(String(b));
                    break;
                case "function":
                    c.push("null");
                    break;
                default:
                    throw Error("Unknown type: " + typeof b);
            }
        }
    }
    var fe = {
        '"': '\\"',
        "\\": "\\\\",
        "/": "\\/",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "\t": "\\t",
        "\x0B": "\\u000b"
    }, ge = /\uffff/.test("\uffff") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;
    function ee(a, b) {
        b.push('"', a.replace(ge, function(c) {
            var d = fe[c];
            d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), fe[c] = d);
            return d;
        }), '"');
    }
    function he() {
        var a = I();
        return vc && !!Gc && 11 == Gc || /Edge\/\d+/.test(a);
    }
    function ie() {
        return l.window && l.window.location.href || self && self.location && self.location.href || "";
    }
    function je(a, b) {
        b = b || l.window;
        var c = "about:blank";
        a && (c = ub(wb(a)).toString());
        b.location.href = c;
    }
    function ke(a, b) {
        var c = [], d;
        for(d in a)d in b ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < ke(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);
        for(d in b)d in a || c.push(d);
        return c;
    }
    function le() {
        var a = I();
        a = me(a) != ne ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
        return a && 30 > a ? !1 : !vc || !Gc || 9 < Gc;
    }
    function oe(a) {
        a = (a || I()).toLowerCase();
        return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
    }
    function pe(a) {
        a = a || l.window;
        try {
            a.close();
        } catch (b) {
        }
    }
    function qe(a, b, c) {
        var d = Math.floor(1000000000 * Math.random()).toString();
        b = b || 500;
        c = c || 600;
        var e = (window.screen.availHeight - c) / 2, f = (window.screen.availWidth - b) / 2;
        b = {
            width: b,
            height: c,
            top: 0 < e ? e : 0,
            left: 0 < f ? f : 0,
            location: !0,
            resizable: !0,
            statusbar: !0,
            toolbar: !1
        };
        c = I().toLowerCase();
        d && (b.target = d, y(c, "crios/") && (b.target = "_blank"));
        me(I()) == re && (a = a || "http://localhost", b.scrollbars = !0);
        c = a || "";
        (a = b) || (a = {
        });
        d = window;
        b = c instanceof sb ? c : wb("undefined" != typeof c.href ? c.href : String(c));
        c = a.target || c.target;
        e = [];
        for(g in a)switch(g){
            case "width":
            case "height":
            case "top":
            case "left":
                e.push(g + "=" + a[g]);
                break;
            case "target":
            case "noopener":
            case "noreferrer":
                break;
            default:
                e.push(g + "=" + (a[g] ? 1 : 0));
        }
        var g = e.join(",");
        (z("iPhone") && !z("iPod") && !z("iPad") || z("iPad") || z("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c ? (g = d.document.createElement("A"), Ha(g, "HTMLAnchorElement"), b instanceof sb || b instanceof sb || (b = "object" == typeof b && b.qa ? b.pa() : String(b), vb.test(b) || (b = "about:invalid#zClosurez"), b = xb(b)), g.href = ub(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), g.dispatchEvent(a), g = {
        }) : a.noreferrer ? (g = d.open("", c, g), a = ub(b).toString(), g && (xc && y(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), g.opener = null, a = Eb('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + Jb(a) + '">'), g.document.write(Db(a)), g.document.close())) : (g = d.open(ub(b).toString(), c, g)) && a.noopener && (g.opener = null);
        if (g) try {
            g.focus();
        } catch (h) {
        }
        return g;
    }
    function se(a) {
        return new B(function(b) {
            function c() {
                od(2000).then(function() {
                    if (!a || a.closed) b();
                    else return c();
                });
            }
            return c();
        });
    }
    var te = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, ue = /^[^@]+@[^@]+$/;
    function ve() {
        var a = null;
        return new B(function(b) {
            "complete" == l.document.readyState ? b() : (a = function() {
                b();
            }, Yc(window, "load", a));
        }).s(function(b) {
            gd(window, "load", a);
            throw b;
        });
    }
    function we() {
        return xe(void 0) ? ve().then(function() {
            return new B(function(a, b) {
                var c = l.document, d = setTimeout(function() {
                    b(Error("Cordova framework is not ready."));
                }, 1000);
                c.addEventListener("deviceready", function() {
                    clearTimeout(d);
                    a();
                }, !1);
            });
        }) : E(Error("Cordova must run in an Android or iOS file scheme."));
    }
    function xe(a) {
        a = a || I();
        return !("file:" !== ye() && "ionic:" !== ye() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
    }
    function ze() {
        var a = l.window;
        try {
            return !(!a || a == a.top);
        } catch (b) {
            return !1;
        }
    }
    function Ae() {
        return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;
    }
    function Be() {
        return _appDefault.default.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : _appDefault.default.INTERNAL.hasOwnProperty("node") ? "Node" : Ae() ? "Worker" : "Browser";
    }
    function Ce() {
        var a = Be();
        return "ReactNative" === a || "Node" === a;
    }
    function De() {
        for(var a = 50, b = []; 0 < a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
        return b.join("");
    }
    var re = "Firefox", ne = "Chrome";
    function me(a) {
        var b = a.toLowerCase();
        if (y(b, "opera/") || y(b, "opr/") || y(b, "opios/")) return "Opera";
        if (y(b, "iemobile")) return "IEMobile";
        if (y(b, "msie") || y(b, "trident/")) return "IE";
        if (y(b, "edge/")) return "Edge";
        if (y(b, "firefox/")) return re;
        if (y(b, "silk/")) return "Silk";
        if (y(b, "blackberry")) return "Blackberry";
        if (y(b, "webos")) return "Webos";
        if (!y(b, "safari/") || y(b, "chrome/") || y(b, "crios/") || y(b, "android")) {
            if (!y(b, "chrome/") && !y(b, "crios/") || y(b, "edge/")) {
                if (y(b, "android")) return "Android";
                if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
            } else return ne;
        } else return "Safari";
        return "Other";
    }
    var Ee = {
        Wc: "FirebaseCore-web",
        Yc: "FirebaseUI-web"
    };
    function Fe(a, b) {
        b = b || [];
        var c = [], d = {
        }, e;
        for(e in Ee)d[Ee[e]] = !0;
        for(e = 0; e < b.length; e++)"undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));
        c.sort();
        b = c;
        b.length || (b = [
            "FirebaseCore-web"
        ]);
        c = Be();
        "Browser" === c ? (d = I(), c = me(d)) : "Worker" === c && (d = I(), c = me(d) + "-" + c);
        return c + "/JsCore/" + a + "/" + b.join(",");
    }
    function I() {
        return l.navigator && l.navigator.userAgent || "";
    }
    function J(a, b) {
        a = a.split(".");
        b = b || l;
        for(var c = 0; c < a.length && "object" == typeof b && null != b; c++)b = b[a[c]];
        c != a.length && (b = void 0);
        return b;
    }
    function Ge() {
        try {
            var a = l.localStorage, b = He();
            if (a) return a.setItem(b, "1"), a.removeItem(b), he() ? !!l.indexedDB : !0;
        } catch (c) {
            return Ae() && !!l.indexedDB;
        }
        return !1;
    }
    function Ie() {
        return (Je() || "chrome-extension:" === ye() || xe()) && !Ce() && Ge() && !Ae();
    }
    function Je() {
        return "http:" === ye() || "https:" === ye();
    }
    function ye() {
        return l.location && l.location.protocol || null;
    }
    function Ke(a) {
        a = a || I();
        return oe(a) || me(a) == re ? !1 : !0;
    }
    function Le(a) {
        return "undefined" === typeof a ? null : be(a);
    }
    function Me(a) {
        var b = {
        }, c;
        for(c in a)a.hasOwnProperty(c) && null !== a[c] && (void 0) !== a[c] && (b[c] = a[c]);
        return b;
    }
    function Ne(a) {
        if (null !== a) return JSON.parse(a);
    }
    function He(a) {
        return a ? a : Math.floor(1000000000 * Math.random()).toString();
    }
    function Oe(a) {
        a = a || I();
        return "Safari" == me(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
    }
    function Pe() {
        var a = l.___jsl;
        if (a && a.H) for(var b in a.H)if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for(var c = 0; c < a.CP.length; c++)a.CP[c] = null;
    }
    function Qe(a, b) {
        if (a > b) throw Error("Short delay should be less than long delay!");
        this.a = a;
        this.c = b;
        a = I();
        b = Be();
        this.b = oe(a) || "ReactNative" === b;
    }
    Qe.prototype.get = function() {
        var a = l.navigator;
        return (a && "boolean" === typeof a.onLine && (Je() || "chrome-extension:" === ye() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5000, this.a);
    };
    function Re() {
        var a = l.document;
        return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
    }
    function Se() {
        var a = l.document, b = null;
        return Re() || !a ? D() : new B(function(c) {
            b = function() {
                Re() && (a.removeEventListener("visibilitychange", b, !1), c());
            };
            a.addEventListener("visibilitychange", b, !1);
        }).s(function(c) {
            a.removeEventListener("visibilitychange", b, !1);
            throw c;
        });
    }
    function Te(a) {
        try {
            var b = new Date(parseInt(a, 10));
            if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();
        } catch (c) {
        }
        return null;
    }
    function Ue() {
        return !(!J("fireauth.oauthhelper", l) && !J("fireauth.iframe", l));
    }
    function Ve() {
        var a = l.navigator;
        return a && a.serviceWorker && a.serviceWorker.controller || null;
    }
    function We() {
        var a = l.navigator;
        return a && a.serviceWorker ? D().then(function() {
            return a.serviceWorker.ready;
        }).then(function(b) {
            return b.active || null;
        }).s(function() {
            return null;
        }) : D(null);
    }
    var Xe = {
    };
    function Ye(a) {
        Xe[a] || (Xe[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
    }
    var Ze;
    try {
        var $e = {
        };
        Object.defineProperty($e, "abcd", {
            configurable: !0,
            enumerable: !0,
            value: 1
        });
        Object.defineProperty($e, "abcd", {
            configurable: !0,
            enumerable: !0,
            value: 2
        });
        Ze = 2 == $e.abcd;
    } catch (a) {
        Ze = !1;
    }
    function K(a, b, c) {
        Ze ? Object.defineProperty(a, b, {
            configurable: !0,
            enumerable: !0,
            value: c
        }) : a[b] = c;
    }
    function L(a, b) {
        if (b) for(var c in b)b.hasOwnProperty(c) && K(a, c, b[c]);
    }
    function af(a) {
        var b = {
        };
        L(b, a);
        return b;
    }
    function bf(a) {
        var b = {
        }, c;
        for(c in a)a.hasOwnProperty(c) && (b[c] = a[c]);
        return b;
    }
    function cf(a, b) {
        if (!b || !b.length) return !0;
        if (!a) return !1;
        for(var c = 0; c < b.length; c++){
            var d = a[b[c]];
            if ((void 0) === d || null === d || "" === d) return !1;
        }
        return !0;
    }
    function df(a) {
        var b = a;
        if ("object" == typeof a && null != a) {
            b = "length" in a ? [] : {
            };
            for(var c in a)K(b, c, df(a[c]));
        }
        return b;
    }
    function ef(a) {
        var b = {
        }, c = a[ff], d = a[gf];
        a = a[hf];
        if (!a || a != jf && !c) throw Error("Invalid provider user info!");
        b[kf] = d || null;
        b[lf] = c || null;
        K(this, mf, a);
        K(this, nf, df(b));
    }
    var jf = "EMAIL_SIGNIN", ff = "email", gf = "newEmail", hf = "requestType", lf = "email", kf = "fromEmail", nf = "data", mf = "operation";
    function M(a, b) {
        this.code = of + a;
        this.message = b || pf[a] || "";
    }
    v(M, Error);
    M.prototype.A = function() {
        return {
            code: this.code,
            message: this.message
        };
    };
    M.prototype.toJSON = function() {
        return this.A();
    };
    function qf(a) {
        var b = a && a.code;
        return b ? new M(b.substring(of.length), a.message) : null;
    }
    var of = "auth/", pf = {
        "admin-restricted-operation": "This operation is restricted to administrators only.",
        "argument-error": "",
        "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
        "cordova-not-ready": "Cordova framework is not ready.",
        "cors-unsupported": "This browser is not supported.",
        "credential-already-in-use": "This credential is already associated with a different user account.",
        "custom-token-mismatch": "The custom token corresponds to a different audience.",
        "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        "email-already-in-use": "The email address is already in use by another account.",
        "expired-action-code": "The action code has expired. ",
        "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
        "internal-error": "An internal error has occurred.",
        "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        "invalid-app-id": "The mobile app identifier is not registed for the current project.",
        "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        "invalid-auth-event": "An internal error has occurred.",
        "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
        "invalid-continue-uri": "The continue URL provided in the request is invalid.",
        "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
        "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
        "invalid-email": "The email address is badly formatted.",
        "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
        "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
        "invalid-credential": "The supplied auth credential is malformed or has expired.",
        "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
        "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        "wrong-password": "The password is invalid or the user does not have a password.",
        "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
        "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        "invalid-provider-id": "The specified provider ID is invalid.",
        "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
        "invalid-tenant-id": "The Auth instance's tenant ID is invalid.",
        "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
        "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
        "missing-continue-uri": "A continue URL must be provided in the request.",
        "missing-iframe-start": "An internal error has occurred.",
        "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
        "missing-or-invalid-nonce": "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
        "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
        "app-deleted": "This instance of FirebaseApp has been deleted.",
        "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
        "no-auth-event": "An internal error has occurred.",
        "no-such-provider": "User was not linked to an account with the given provider.",
        "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
        "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
        "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
        "provider-already-linked": "User can only be linked to one identity for the given provider.",
        "quota-exceeded": "The project's quota for this operation has been exceeded.",
        "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
        "redirect-operation-pending": "A redirect sign-in operation is already pending.",
        "rejected-credential": "The request contains malformed or mismatching credentials.",
        "tenant-id-mismatch": "The provided tenant ID does not match the Auth instance's tenant ID",
        timeout: "The operation has timed out.",
        "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
        "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
        "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
        "unsupported-tenant-operation": "This operation is not supported in a multi-tenant context.",
        "user-cancelled": "The user did not grant your application the permissions it requested.",
        "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
        "user-disabled": "The user account has been disabled by an administrator.",
        "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
        "user-signed-out": "",
        "weak-password": "The password must be 6 characters long or more.",
        "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
    };
    function rf(a) {
        a = Md(a);
        var b = Ld(a, sf) || null, c = Ld(a, tf) || null, d = Ld(a, uf) || null;
        d = d ? vf[d] || null : null;
        if (!b || !c || !d) throw new M("argument-error", sf + ", " + tf + "and " + uf + " are required in a valid action code URL.");
        L(this, {
            apiKey: b,
            operation: d,
            code: c,
            continueUrl: Ld(a, wf) || null,
            languageCode: Ld(a, xf) || null,
            tenantId: Ld(a, yf) || null
        });
    }
    var sf = "apiKey", tf = "oobCode", wf = "continueUrl", xf = "languageCode", uf = "mode", yf = "tenantId", vf = {
        recoverEmail: "RECOVER_EMAIL",
        resetPassword: "PASSWORD_RESET",
        signIn: jf,
        verifyEmail: "VERIFY_EMAIL"
    };
    function zf(a) {
        try {
            return new rf(a);
        } catch (b) {
            return null;
        }
    }
    function Af(a) {
        var b = a[Bf];
        if ("undefined" === typeof b) throw new M("missing-continue-uri");
        if ("string" !== typeof b || "string" === typeof b && !b.length) throw new M("invalid-continue-uri");
        this.h = b;
        this.b = this.a = null;
        this.g = !1;
        var c = a[Cf];
        if (c && "object" === typeof c) {
            b = c[Df];
            var d = c[Ef];
            c = c[Ff];
            if ("string" === typeof b && b.length) {
                this.a = b;
                if ("undefined" !== typeof d && "boolean" !== typeof d) throw new M("argument-error", Ef + " property must be a boolean when specified.");
                this.g = !!d;
                if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new M("argument-error", Ff + " property must be a non empty string when specified.");
                this.b = c || null;
            } else {
                if ("undefined" !== typeof b) throw new M("argument-error", Df + " property must be a non empty string when specified.");
                if ("undefined" !== typeof d || "undefined" !== typeof c) throw new M("missing-android-pkg-name");
            }
        } else if ("undefined" !== typeof c) throw new M("argument-error", Cf + " property must be a non null object when specified.");
        this.f = null;
        if ((b = a[Gf]) && "object" === typeof b) {
            if (b = b[Hf], "string" === typeof b && b.length) this.f = b;
            else {
                if ("undefined" !== typeof b) throw new M("argument-error", Hf + " property must be a non empty string when specified.");
            }
        } else if ("undefined" !== typeof b) throw new M("argument-error", Gf + " property must be a non null object when specified.");
        b = a[If];
        if ("undefined" !== typeof b && "boolean" !== typeof b) throw new M("argument-error", If + " property must be a boolean when specified.");
        this.c = !!b;
        a = a[Jf];
        if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new M("argument-error", Jf + " property must be a non empty string when specified.");
        this.i = a || null;
    }
    var Cf = "android", Jf = "dynamicLinkDomain", If = "handleCodeInApp", Gf = "iOS", Bf = "url", Ef = "installApp", Ff = "minimumVersion", Df = "packageName", Hf = "bundleId";
    function Kf(a) {
        var b = {
        };
        b.continueUrl = a.h;
        b.canHandleCodeInApp = a.c;
        if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
        b.iOSBundleId = a.f;
        b.dynamicLinkDomain = a.i;
        for(var c in b)null === b[c] && delete b[c];
        return b;
    }
    function Lf(a) {
        return Ka(a, function(b) {
            b = b.toString(16);
            return 1 < b.length ? b : "0" + b;
        }).join("");
    }
    var Mf = null, Nf = null;
    function Of(a) {
        var b = "";
        Pf(a, function(c) {
            b += String.fromCharCode(c);
        });
        return b;
    }
    function Pf(a, b) {
        function c(m) {
            for(; d < a.length;){
                var p = a.charAt(d++), u = Nf[p];
                if (null != u) return u;
                if (!/^[\s\xa0]*$/.test(p)) throw Error("Unknown base64 encoding at char: " + p);
            }
            return m;
        }
        Qf();
        for(var d = 0;;){
            var e = c(-1), f = c(0), g = c(64), h = c(64);
            if (64 === h && -1 === e) break;
            b(e << 2 | f >> 4);
            64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
        }
    }
    function Qf() {
        if (!Mf) {
            Mf = {
            };
            Nf = {
            };
            for(var a = 0; 65 > a; a++)Mf[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), Nf[Mf[a]] = a, 62 <= a && (Nf["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
        }
    }
    function Rf(a) {
        this.f = a.sub;
        va();
        this.a = a.provider_id || a.firebase && a.firebase.sign_in_provider || null;
        this.c = a.firebase && a.firebase.tenant || null;
        this.b = !!a.is_anonymous || "anonymous" == this.a;
    }
    Rf.prototype.R = function() {
        return this.c;
    };
    Rf.prototype.g = function() {
        return this.b;
    };
    function Sf(a) {
        return (a = Tf(a)) && a.sub && a.iss && a.aud && a.exp ? new Rf(a) : null;
    }
    function Tf(a) {
        if (!a) return null;
        a = a.split(".");
        if (3 != a.length) return null;
        a = a[1];
        for(var b = (4 - a.length % 4) % 4, c = 0; c < b; c++)a += ".";
        try {
            return JSON.parse(Of(a));
        } catch (d) {
        }
        return null;
    }
    var Uf = {
        bd: {
            cb: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
            ib: "https://securetoken.googleapis.com/v1/token",
            id: "p"
        },
        dd: {
            cb: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
            ib: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
            id: "s"
        },
        ed: {
            cb: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
            ib: "https://test-securetoken.sandbox.googleapis.com/v1/token",
            id: "t"
        }
    };
    function Vf(a) {
        for(var b in Uf)if (Uf[b].id === a) return a = Uf[b], {
            firebaseEndpoint: a.cb,
            secureTokenEndpoint: a.ib
        };
        return null;
    }
    var Wf;
    Wf = Vf("__EID__") ? "__EID__" : void 0;
    var Xf = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "), Yf = [
        "client_id",
        "response_type",
        "scope",
        "redirect_uri",
        "state"
    ], Zf = {
        Xc: {
            Ea: "locale",
            sa: 700,
            ra: 600,
            Fa: "facebook.com",
            Qa: Yf
        },
        Zc: {
            Ea: null,
            sa: 500,
            ra: 750,
            Fa: "github.com",
            Qa: Yf
        },
        $c: {
            Ea: "hl",
            sa: 515,
            ra: 680,
            Fa: "google.com",
            Qa: Yf
        },
        fd: {
            Ea: "lang",
            sa: 485,
            ra: 705,
            Fa: "twitter.com",
            Qa: Xf
        },
        Vc: {
            Ea: "locale",
            sa: 600,
            ra: 600,
            Fa: "apple.com",
            Qa: []
        }
    };
    function $f(a) {
        for(var b in Zf)if (Zf[b].Fa == a) return Zf[b];
        return null;
    }
    function ag(a) {
        var b = {
        };
        b["facebook.com"] = bg;
        b["google.com"] = cg;
        b["github.com"] = dg;
        b["twitter.com"] = eg;
        var c = a && a[fg];
        try {
            if (c) return b[c] ? new b[c](a) : new gg(a);
            if ("undefined" !== typeof a[hg]) return new ig(a);
        } catch (d) {
        }
        return null;
    }
    var hg = "idToken", fg = "providerId";
    function ig(a) {
        var b = a[fg];
        if (!b && a[hg]) {
            var c = Sf(a[hg]);
            c && c.a && (b = c.a);
        }
        if (!b) throw Error("Invalid additional user info!");
        if ("anonymous" == b || "custom" == b) b = null;
        c = !1;
        "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);
        K(this, "providerId", b);
        K(this, "isNewUser", c);
    }
    function gg(a) {
        ig.call(this, a);
        a = Ne(a.rawUserInfo || "{}");
        K(this, "profile", df(a || {
        }));
    }
    v(gg, ig);
    function bg(a) {
        gg.call(this, a);
        if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
    }
    v(bg, gg);
    function dg(a) {
        gg.call(this, a);
        if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
        K(this, "username", this.profile && this.profile.login || null);
    }
    v(dg, gg);
    function cg(a) {
        gg.call(this, a);
        if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
    }
    v(cg, gg);
    function eg(a) {
        gg.call(this, a);
        if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
        K(this, "username", a.screenName || null);
    }
    v(eg, gg);
    function jg(a) {
        var b = Md(a), c = Ld(b, "link"), d = Ld(Md(c), "link");
        b = Ld(b, "deep_link_id");
        return Ld(Md(b), "link") || b || d || c || a;
    }
    function kg() {
    }
    function lg(a, b) {
        return a.then(function(c) {
            if (c[mg]) {
                var d = Sf(c[mg]);
                if (!d || b != d.f) throw new M("user-mismatch");
                return c;
            }
            throw new M("user-mismatch");
        }).s(function(c) {
            throw c && c.code && c.code == of + "user-not-found" ? new M("user-mismatch") : c;
        });
    }
    function ng(a, b) {
        if (b) this.a = b;
        else throw new M("internal-error", "failed to construct a credential");
        K(this, "providerId", a);
        K(this, "signInMethod", a);
    }
    ng.prototype.na = function(a) {
        return og(a, pg(this));
    };
    ng.prototype.b = function(a, b) {
        var c = pg(this);
        c.idToken = b;
        return qg(a, c);
    };
    ng.prototype.f = function(a, b) {
        return lg(rg(a, pg(this)), b);
    };
    function pg(a) {
        return {
            pendingToken: a.a,
            requestUri: "http://localhost"
        };
    }
    ng.prototype.A = function() {
        return {
            providerId: this.providerId,
            signInMethod: this.signInMethod,
            pendingToken: this.a
        };
    };
    function sg(a) {
        if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken) try {
            return new ng(a.providerId, a.pendingToken);
        } catch (b) {
        }
        return null;
    }
    function tg(a, b, c) {
        this.a = null;
        if (b.idToken || b.accessToken) b.idToken && K(this, "idToken", b.idToken), b.accessToken && K(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && K(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);
        else if (b.oauthToken && b.oauthTokenSecret) K(this, "accessToken", b.oauthToken), K(this, "secret", b.oauthTokenSecret);
        else throw new M("internal-error", "failed to construct a credential");
        K(this, "providerId", a);
        K(this, "signInMethod", c);
    }
    tg.prototype.na = function(a) {
        return og(a, ug(this));
    };
    tg.prototype.b = function(a, b) {
        var c = ug(this);
        c.idToken = b;
        return qg(a, c);
    };
    tg.prototype.f = function(a, b) {
        var c = ug(this);
        return lg(rg(a, c), b);
    };
    function ug(a) {
        var b = {
        };
        a.idToken && (b.id_token = a.idToken);
        a.accessToken && (b.access_token = a.accessToken);
        a.secret && (b.oauth_token_secret = a.secret);
        b.providerId = a.providerId;
        a.nonce && !a.a && (b.nonce = a.nonce);
        b = {
            postBody: Qd(b).toString(),
            requestUri: "http://localhost"
        };
        a.a && (delete b.postBody, b.pendingToken = a.a);
        return b;
    }
    tg.prototype.A = function() {
        var a = {
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
        this.idToken && (a.oauthIdToken = this.idToken);
        this.accessToken && (a.oauthAccessToken = this.accessToken);
        this.secret && (a.oauthTokenSecret = this.secret);
        this.nonce && (a.nonce = this.nonce);
        this.a && (a.pendingToken = this.a);
        return a;
    };
    function vg(a) {
        if (a && a.providerId && a.signInMethod) {
            var b = {
                idToken: a.oauthIdToken,
                accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken,
                oauthTokenSecret: a.oauthTokenSecret,
                oauthToken: a.oauthTokenSecret && a.oauthAccessToken,
                nonce: a.nonce,
                pendingToken: a.pendingToken
            };
            try {
                return new tg(a.providerId, b, a.signInMethod);
            } catch (c) {
            }
        }
        return null;
    }
    function wg(a, b) {
        this.Fc = b || [];
        L(this, {
            providerId: a,
            isOAuthProvider: !0
        });
        this.zb = {
        };
        this.eb = ($f(a) || {
        }).Ea || null;
        this.bb = null;
    }
    wg.prototype.Ga = function(a) {
        this.zb = Va(a);
        return this;
    };
    function xg(a) {
        if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new M("argument-error", 'SAML provider IDs must be prefixed with "saml."');
        wg.call(this, a, []);
    }
    v(xg, wg);
    function O(a) {
        wg.call(this, a, Yf);
        this.a = [];
    }
    v(O, wg);
    O.prototype.ya = function(a) {
        Oa(this.a, a) || this.a.push(a);
        return this;
    };
    O.prototype.Hb = function() {
        return Sa(this.a);
    };
    O.prototype.credential = function(a, b) {
        var c;
        r(a) ? c = {
            idToken: a.idToken || null,
            accessToken: a.accessToken || null,
            nonce: a.rawNonce || null
        } : c = {
            idToken: a || null,
            accessToken: b || null
        };
        if (!c.idToken && !c.accessToken) throw new M("argument-error", "credential failed: must provide the ID token and/or the access token.");
        return new tg(this.providerId, c, this.providerId);
    };
    function yg() {
        O.call(this, "facebook.com");
    }
    v(yg, O);
    K(yg, "PROVIDER_ID", "facebook.com");
    K(yg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");
    function zg(a) {
        if (!a) throw new M("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
        var b = a;
        r(a) && (b = a.accessToken);
        return (new yg).credential({
            accessToken: b
        });
    }
    function Ag() {
        O.call(this, "github.com");
    }
    v(Ag, O);
    K(Ag, "PROVIDER_ID", "github.com");
    K(Ag, "GITHUB_SIGN_IN_METHOD", "github.com");
    function Bg(a) {
        if (!a) throw new M("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
        var b = a;
        r(a) && (b = a.accessToken);
        return (new Ag).credential({
            accessToken: b
        });
    }
    function Cg() {
        O.call(this, "google.com");
        this.ya("profile");
    }
    v(Cg, O);
    K(Cg, "PROVIDER_ID", "google.com");
    K(Cg, "GOOGLE_SIGN_IN_METHOD", "google.com");
    function Dg(a, b) {
        var c = a;
        r(a) && (c = a.idToken, b = a.accessToken);
        return (new Cg).credential({
            idToken: c,
            accessToken: b
        });
    }
    function Eg() {
        wg.call(this, "twitter.com", Xf);
    }
    v(Eg, wg);
    K(Eg, "PROVIDER_ID", "twitter.com");
    K(Eg, "TWITTER_SIGN_IN_METHOD", "twitter.com");
    function Fg(a, b) {
        var c = a;
        r(c) || (c = {
            oauthToken: a,
            oauthTokenSecret: b
        });
        if (!c.oauthToken || !c.oauthTokenSecret) throw new M("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
        return new tg("twitter.com", c, "twitter.com");
    }
    function Gg(a, b, c) {
        this.a = a;
        this.c = b;
        K(this, "providerId", "password");
        K(this, "signInMethod", c === Hg.EMAIL_LINK_SIGN_IN_METHOD ? Hg.EMAIL_LINK_SIGN_IN_METHOD : Hg.EMAIL_PASSWORD_SIGN_IN_METHOD);
    }
    Gg.prototype.na = function(a) {
        return this.signInMethod == Hg.EMAIL_LINK_SIGN_IN_METHOD ? P(a, Ig, {
            email: this.a,
            oobCode: this.c
        }) : P(a, Jg, {
            email: this.a,
            password: this.c
        });
    };
    Gg.prototype.b = function(a, b) {
        return this.signInMethod == Hg.EMAIL_LINK_SIGN_IN_METHOD ? P(a, Kg, {
            idToken: b,
            email: this.a,
            oobCode: this.c
        }) : P(a, Lg, {
            idToken: b,
            email: this.a,
            password: this.c
        });
    };
    Gg.prototype.f = function(a, b) {
        return lg(this.na(a), b);
    };
    Gg.prototype.A = function() {
        return {
            email: this.a,
            password: this.c,
            signInMethod: this.signInMethod
        };
    };
    function Mg(a) {
        return a && a.email && a.password ? new Gg(a.email, a.password, a.signInMethod) : null;
    }
    function Hg() {
        L(this, {
            providerId: "password",
            isOAuthProvider: !1
        });
    }
    function Ng(a, b) {
        b = Og(b);
        if (!b) throw new M("argument-error", "Invalid email link!");
        return new Gg(a, b.code, Hg.EMAIL_LINK_SIGN_IN_METHOD);
    }
    function Og(a) {
        a = jg(a);
        return (a = zf(a)) && a.operation === jf ? a : null;
    }
    L(Hg, {
        PROVIDER_ID: "password"
    });
    L(Hg, {
        EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
    });
    L(Hg, {
        EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
    });
    function Pg(a) {
        if (!(a.Va && a.Ua || a.Ha && a.ba)) throw new M("internal-error");
        this.a = a;
        K(this, "providerId", "phone");
        K(this, "signInMethod", "phone");
    }
    Pg.prototype.na = function(a) {
        return a.Wa(Qg(this));
    };
    Pg.prototype.b = function(a, b) {
        var c = Qg(this);
        c.idToken = b;
        return P(a, Rg, c);
    };
    Pg.prototype.f = function(a, b) {
        var c = Qg(this);
        c.operation = "REAUTH";
        a = P(a, Sg, c);
        return lg(a, b);
    };
    Pg.prototype.A = function() {
        var a = {
            providerId: "phone"
        };
        this.a.Va && (a.verificationId = this.a.Va);
        this.a.Ua && (a.verificationCode = this.a.Ua);
        this.a.Ha && (a.temporaryProof = this.a.Ha);
        this.a.ba && (a.phoneNumber = this.a.ba);
        return a;
    };
    function Tg(a) {
        if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {
            var b = {
            };
            x([
                "verificationId",
                "verificationCode",
                "temporaryProof",
                "phoneNumber"
            ], function(c) {
                a[c] && (b[c] = a[c]);
            });
            return new Pg(b);
        }
        return null;
    }
    function Qg(a) {
        return a.a.Ha && a.a.ba ? {
            temporaryProof: a.a.Ha,
            phoneNumber: a.a.ba
        } : {
            sessionInfo: a.a.Va,
            code: a.a.Ua
        };
    }
    function Ug(a) {
        try {
            this.a = a || _appDefault.default.auth();
        } catch (b) {
            throw new M("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
        }
        L(this, {
            providerId: "phone",
            isOAuthProvider: !1
        });
    }
    Ug.prototype.Wa = function(a, b) {
        var c = this.a.b;
        return D(b.verify()).then(function(d) {
            if (!n(d)) throw new M("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");
            switch(b.type){
                case "recaptcha":
                    return Vg(c, {
                        phoneNumber: a,
                        recaptchaToken: d
                    }).then(function(e) {
                        "function" === typeof b.reset && b.reset();
                        return e;
                    }, function(e) {
                        "function" === typeof b.reset && b.reset();
                        throw e;
                    });
                default:
                    throw new M("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
            }
        });
    };
    function Wg(a, b) {
        if (!a) throw new M("missing-verification-id");
        if (!b) throw new M("missing-verification-code");
        return new Pg({
            Va: a,
            Ua: b
        });
    }
    L(Ug, {
        PROVIDER_ID: "phone"
    });
    L(Ug, {
        PHONE_SIGN_IN_METHOD: "phone"
    });
    function Xg(a) {
        if (a.temporaryProof && a.phoneNumber) return new Pg({
            Ha: a.temporaryProof,
            ba: a.phoneNumber
        });
        var b = a && a.providerId;
        if (!b || "password" === b) return null;
        var c = a && a.oauthAccessToken, d = a && a.oauthTokenSecret, e = a && a.nonce, f = a && a.oauthIdToken, g = a && a.pendingToken;
        try {
            switch(b){
                case "google.com":
                    return Dg(f, c);
                case "facebook.com":
                    return zg(c);
                case "github.com":
                    return Bg(c);
                case "twitter.com":
                    return Fg(c, d);
                default:
                    return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new ng(b, g) : new tg(b, {
                        pendingToken: g,
                        idToken: a.oauthIdToken,
                        accessToken: a.oauthAccessToken
                    }, b) : new O(b).credential({
                        idToken: f,
                        accessToken: c,
                        rawNonce: e
                    }) : null;
            }
        } catch (h) {
            return null;
        }
    }
    function Yg(a) {
        if (!a.isOAuthProvider) throw new M("invalid-oauth-provider");
    }
    function Zg(a, b, c, d, e, f, g) {
        this.c = a;
        this.b = b || null;
        this.g = c || null;
        this.f = d || null;
        this.i = f || null;
        this.h = g || null;
        this.a = e || null;
        if (this.g || this.a) {
            if (this.g && this.a) throw new M("invalid-auth-event");
            if (this.g && !this.f) throw new M("invalid-auth-event");
        } else throw new M("invalid-auth-event");
    }
    Zg.prototype.getUid = function() {
        var a = [];
        a.push(this.c);
        this.b && a.push(this.b);
        this.f && a.push(this.f);
        this.h && a.push(this.h);
        return a.join("-");
    };
    Zg.prototype.R = function() {
        return this.h;
    };
    Zg.prototype.A = function() {
        return {
            type: this.c,
            eventId: this.b,
            urlResponse: this.g,
            sessionId: this.f,
            postBody: this.i,
            tenantId: this.h,
            error: this.a && this.a.A()
        };
    };
    function $g(a) {
        a = a || {
        };
        return a.type ? new Zg(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && qf(a.error), a.postBody, a.tenantId) : null;
    }
    function ah() {
        this.b = null;
        this.a = [];
    }
    var bh = null;
    function ch(a) {
        var b = bh;
        b.a.push(a);
        b.b || (b.b = function(c) {
            for(var d = 0; d < b.a.length; d++)b.a[d](c);
        }, a = J("universalLinks.subscribe", l), "function" === typeof a && a(null, b.b));
    }
    function dh(a) {
        var b = "unauthorized-domain", c = void 0, d = Md(a);
        a = d.b;
        d = d.f;
        "chrome-extension" == d ? c = Ib("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Ib("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
        M.call(this, b, c);
    }
    v(dh, M);
    function eh(a, b, c) {
        M.call(this, a, c);
        a = b || {
        };
        a.Ab && K(this, "email", a.Ab);
        a.ba && K(this, "phoneNumber", a.ba);
        a.credential && K(this, "credential", a.credential);
        a.Qb && K(this, "tenantId", a.Qb);
    }
    v(eh, M);
    eh.prototype.A = function() {
        var a = {
            code: this.code,
            message: this.message
        };
        this.email && (a.email = this.email);
        this.phoneNumber && (a.phoneNumber = this.phoneNumber);
        this.tenantId && (a.tenantId = this.tenantId);
        var b = this.credential && this.credential.A();
        b && Xa(a, b);
        return a;
    };
    eh.prototype.toJSON = function() {
        return this.A();
    };
    function fh(a) {
        if (a.code) {
            var b = a.code || "";
            0 == b.indexOf(of) && (b = b.substring(of.length));
            var c = {
                credential: Xg(a),
                Qb: a.tenantId
            };
            if (a.email) c.Ab = a.email;
            else if (a.phoneNumber) c.ba = a.phoneNumber;
            else if (!c.credential) return new M(b, a.message || void 0);
            return new eh(b, c, a.message);
        }
        return null;
    }
    function gh() {
    }
    gh.prototype.c = null;
    function hh(a) {
        return a.c || (a.c = a.b());
    }
    var ih;
    function jh() {
    }
    v(jh, gh);
    jh.prototype.a = function() {
        var a = kh(this);
        return a ? new ActiveXObject(a) : new XMLHttpRequest;
    };
    jh.prototype.b = function() {
        var a = {
        };
        kh(this) && (a[0] = !0, a[1] = !0);
        return a;
    };
    function kh(a) {
        if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
            for(var b = [
                "MSXML2.XMLHTTP.6.0",
                "MSXML2.XMLHTTP.3.0",
                "MSXML2.XMLHTTP",
                "Microsoft.XMLHTTP"
            ], c = 0; c < b.length; c++){
                var d = b[c];
                try {
                    return new ActiveXObject(d), a.f = d;
                } catch (e) {
                }
            }
            throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
        }
        return a.f;
    }
    ih = new jh;
    function lh() {
    }
    v(lh, gh);
    lh.prototype.a = function() {
        var a = new XMLHttpRequest;
        if ("withCredentials" in a) return a;
        if ("undefined" != typeof XDomainRequest) return new mh;
        throw Error("Unsupported browser");
    };
    lh.prototype.b = function() {
        return {
        };
    };
    function mh() {
        this.a = new XDomainRequest;
        this.readyState = 0;
        this.onreadystatechange = null;
        this.responseType = this.responseText = this.response = "";
        this.status = -1;
        this.statusText = "";
        this.a.onload = t(this.fc, this);
        this.a.onerror = t(this.Ib, this);
        this.a.onprogress = t(this.gc, this);
        this.a.ontimeout = t(this.kc, this);
    }
    k = mh.prototype;
    k.open = function(a, b, c) {
        if (null != c && !c) throw Error("Only async requests are supported.");
        this.a.open(a, b);
    };
    k.send = function(a) {
        if (a) {
            if ("string" == typeof a) this.a.send(a);
            else throw Error("Only string data is supported");
        } else this.a.send();
    };
    k.abort = function() {
        this.a.abort();
    };
    k.setRequestHeader = function() {
    };
    k.getResponseHeader = function(a) {
        return "content-type" == a.toLowerCase() ? this.a.contentType : "";
    };
    k.fc = function() {
        this.status = 200;
        this.response = this.responseText = this.a.responseText;
        nh(this, 4);
    };
    k.Ib = function() {
        this.status = 500;
        this.response = this.responseText = "";
        nh(this, 4);
    };
    k.kc = function() {
        this.Ib();
    };
    k.gc = function() {
        this.status = 200;
        nh(this, 1);
    };
    function nh(a, b) {
        a.readyState = b;
        if (a.onreadystatechange) a.onreadystatechange();
    }
    k.getAllResponseHeaders = function() {
        return "content-type: " + this.a.contentType;
    };
    function oh(a, b, c) {
        this.reset(a, b, c, void 0, void 0);
    }
    oh.prototype.a = null;
    var ph = 0;
    oh.prototype.reset = function(a, b, c, d, e) {
        "number" == typeof e || ph++;
        d || va();
        delete this.a;
    };
    function qh(a) {
        this.f = a;
        this.b = this.c = this.a = null;
    }
    function rh(a, b) {
        this.name = a;
        this.value = b;
    }
    rh.prototype.toString = function() {
        return this.name;
    };
    var sh = new rh("SEVERE", 1000), th = new rh("WARNING", 900), uh = new rh("CONFIG", 700), vh = new rh("FINE", 500);
    function wh(a) {
        if (a.c) return a.c;
        if (a.a) return wh(a.a);
        za("Root logger has no level set.");
        return null;
    }
    qh.prototype.log = function(a, b, c) {
        if (a.value >= wh(this).value) for(q(b) && (b = b()), a = new oh(a, String(b), this.f), c && (a.a = c), c = this; c;)c = c.a;
    };
    var xh = {
    }, yh = null;
    function zh(a) {
        yh || (yh = new qh(""), xh[""] = yh, yh.c = uh);
        var b;
        if (!(b = xh[a])) {
            b = new qh(a);
            var c = a.lastIndexOf("."), d = a.substr(c + 1);
            c = zh(a.substr(0, c));
            c.b || (c.b = {
            });
            c.b[d] = b;
            b.a = c;
            xh[a] = b;
        }
        return b;
    }
    function Ah(a, b) {
        a && a.log(vh, b, void 0);
    }
    function Bh(a) {
        this.f = a;
    }
    v(Bh, gh);
    Bh.prototype.a = function() {
        return new Ch(this.f);
    };
    Bh.prototype.b = (function(a) {
        return function() {
            return a;
        };
    })({
    });
    function Ch(a) {
        G.call(this);
        this.o = a;
        this.readyState = Dh;
        this.status = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.i = new Headers;
        this.b = null;
        this.m = "GET";
        this.g = "";
        this.a = !1;
        this.h = zh("goog.net.FetchXmlHttp");
        this.l = this.c = this.f = null;
    }
    v(Ch, G);
    var Dh = 0;
    k = Ch.prototype;
    k.open = function(a, b) {
        if (this.readyState != Dh) throw this.abort(), Error("Error reopening a connection");
        this.m = a;
        this.g = b;
        this.readyState = 1;
        Eh(this);
    };
    k.send = function(a) {
        if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
        this.a = !0;
        var b = {
            headers: this.i,
            method: this.m,
            credentials: void 0,
            cache: void 0
        };
        a && (b.body = a);
        this.o.fetch(new Request(this.g, b)).then(this.jc.bind(this), this.Oa.bind(this));
    };
    k.abort = function() {
        this.response = this.responseText = "";
        this.i = new Headers;
        this.status = 0;
        this.c && this.c.cancel("Request was aborted.");
        1 <= this.readyState && this.a && 4 != this.readyState && (this.a = !1, Fh(this, !1));
        this.readyState = Dh;
    };
    k.jc = function(a) {
        this.a && (this.f = a, this.b || (this.b = a.headers, this.readyState = 2, Eh(this)), this.a && (this.readyState = 3, Eh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.hc.bind(this), this.Oa.bind(this)) : "undefined" !== typeof l.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.l = new TextDecoder, Gh(this)) : a.text().then(this.ic.bind(this), this.Oa.bind(this)))));
    };
    function Gh(a) {
        a.c.read().then(a.ec.bind(a)).catch(a.Oa.bind(a));
    }
    k.ec = function(a) {
        if (this.a) {
            var b = this.l.decode(a.value ? a.value : new Uint8Array(0), {
                stream: !a.done
            });
            b && (this.response = this.responseText += b);
            a.done ? Fh(this, !0) : Eh(this);
            3 == this.readyState && Gh(this);
        }
    };
    k.ic = function(a) {
        this.a && (this.response = this.responseText = a, Fh(this, !0));
    };
    k.hc = function(a) {
        this.a && (this.response = a, Fh(this, !0));
    };
    k.Oa = function(a) {
        var b = this.h;
        b && b.log(th, "Failed to fetch url " + this.g, a instanceof Error ? a : Error(a));
        this.a && Fh(this, !0);
    };
    function Fh(a, b) {
        b && a.f && (a.status = a.f.status, a.statusText = a.f.statusText);
        a.readyState = 4;
        a.f = null;
        a.c = null;
        a.l = null;
        Eh(a);
    }
    k.setRequestHeader = function(a, b) {
        this.i.append(a, b);
    };
    k.getResponseHeader = function(a) {
        return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.h) && a.log(th, "Attempting to get response header but no headers have been received for url: " + this.g, void 0), "");
    };
    k.getAllResponseHeaders = function() {
        if (!this.b) {
            var a = this.h;
            a && a.log(th, "Attempting to get all response headers but no headers have been received for url: " + this.g, void 0);
            return "";
        }
        a = [];
        for(var b = this.b.entries(), c = b.next(); !c.done;)c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
        return a.join("\r\n");
    };
    function Eh(a) {
        a.onreadystatechange && a.onreadystatechange.call(a);
    }
    function Hh(a) {
        G.call(this);
        this.headers = new sd;
        this.B = a || null;
        this.c = !1;
        this.w = this.a = null;
        this.h = this.O = this.l = "";
        this.f = this.J = this.i = this.I = !1;
        this.g = 0;
        this.o = null;
        this.m = Ih;
        this.v = this.P = !1;
    }
    v(Hh, G);
    var Ih = "";
    Hh.prototype.b = zh("goog.net.XhrIo");
    var Jh = /^https?$/i, Kh = [
        "POST",
        "PUT"
    ];
    function Lh(a, b, c, d, e) {
        if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
        c = c ? c.toUpperCase() : "GET";
        a.l = b;
        a.h = "";
        a.O = c;
        a.I = !1;
        a.c = !0;
        a.a = a.B ? a.B.a() : ih.a();
        a.w = a.B ? hh(a.B) : hh(ih);
        a.a.onreadystatechange = t(a.Lb, a);
        try {
            Ah(a.b, Mh(a, "Opening Xhr")), a.J = !0, a.a.open(c, String(b), !0), a.J = !1;
        } catch (g) {
            Ah(a.b, Mh(a, "Error opening Xhr: " + g.message));
            Nh(a, g);
            return;
        }
        b = d || "";
        var f = new sd(a.headers);
        e && rd(e, function(g, h) {
            f.set(h, g);
        });
        e = Ma(f.X());
        d = l.FormData && b instanceof l.FormData;
        !Oa(Kh, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        f.forEach(function(g, h) {
            this.a.setRequestHeader(h, g);
        }, a);
        a.m && (a.a.responseType = a.m);
        "withCredentials" in a.a && a.a.withCredentials !== a.P && (a.a.withCredentials = a.P);
        try {
            Oh(a), 0 < a.g && (a.v = Ph(a.a), Ah(a.b, Mh(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.v)), a.v ? (a.a.timeout = a.g, a.a.ontimeout = t(a.Ia, a)) : a.o = nd(a.Ia, a.g, a)), Ah(a.b, Mh(a, "Sending request")), a.i = !0, a.a.send(b), a.i = !1;
        } catch (g) {
            Ah(a.b, Mh(a, "Send error: " + g.message)), Nh(a, g);
        }
    }
    function Ph(a) {
        return vc && Fc(9) && "number" == typeof a.timeout && (void 0) !== a.ontimeout;
    }
    function Na(a) {
        return "content-type" == a.toLowerCase();
    }
    k = Hh.prototype;
    k.Ia = function() {
        "undefined" != typeof ha && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Ah(this.b, Mh(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
    };
    function Nh(a, b) {
        a.c = !1;
        a.a && (a.f = !0, a.a.abort(), a.f = !1);
        a.h = b;
        Qh(a);
        Rh(a);
    }
    function Qh(a) {
        a.I || (a.I = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
    }
    k.abort = function() {
        this.a && this.c && (Ah(this.b, Mh(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), Rh(this));
    };
    k.za = function() {
        this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), Rh(this, !0));
        Hh.qb.za.call(this);
    };
    k.Lb = function() {
        this.va || (this.J || this.i || this.f ? Sh(this) : this.yc());
    };
    k.yc = function() {
        Sh(this);
    };
    function Sh(a) {
        if (a.c && "undefined" != typeof ha) {
            if (a.w[1] && 4 == Th(a) && 2 == Uh(a)) Ah(a.b, Mh(a, "Local request error detected and ignored"));
            else if (a.i && 4 == Th(a)) nd(a.Lb, 0, a);
            else if (a.dispatchEvent("readystatechange"), 4 == Th(a)) {
                Ah(a.b, Mh(a, "Request complete"));
                a.c = !1;
                try {
                    var b = Uh(a);
                    a: switch(b){
                        case 200:
                        case 201:
                        case 202:
                        case 204:
                        case 206:
                        case 304:
                        case 1223:
                            var c = !0;
                            break a;
                        default:
                            c = !1;
                    }
                    var d;
                    if (!(d = c)) {
                        var e;
                        if (e = 0 === b) {
                            var f = String(a.l).match(vd)[1] || null;
                            if (!f && l.self && l.self.location) {
                                var g = l.self.location.protocol;
                                f = g.substr(0, g.length - 1);
                            }
                            e = !Jh.test(f ? f.toLowerCase() : "");
                        }
                        d = e;
                    }
                    if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");
                    else {
                        try {
                            var h = 2 < Th(a) ? a.a.statusText : "";
                        } catch (m) {
                            Ah(a.b, "Can not get status: " + m.message), h = "";
                        }
                        a.h = h + " [" + Uh(a) + "]";
                        Qh(a);
                    }
                } finally{
                    Rh(a);
                }
            }
        }
    }
    function Rh(a, b) {
        if (a.a) {
            Oh(a);
            var c = a.a, d = a.w[0] ? la : null;
            a.a = null;
            a.w = null;
            b || a.dispatchEvent("ready");
            try {
                c.onreadystatechange = d;
            } catch (e) {
                (a = a.b) && a.log(sh, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
            }
        }
    }
    function Oh(a) {
        a.a && a.v && (a.a.ontimeout = null);
        a.o && (l.clearTimeout(a.o), a.o = null);
    }
    function Th(a) {
        return a.a ? a.a.readyState : 0;
    }
    function Uh(a) {
        try {
            return 2 < Th(a) ? a.a.status : -1;
        } catch (b) {
            return -1;
        }
    }
    function Vh(a) {
        try {
            return a.a ? a.a.responseText : "";
        } catch (b) {
            return Ah(a.b, "Can not get responseText: " + b.message), "";
        }
    }
    k.getResponse = function() {
        try {
            if (!this.a) return null;
            if ("response" in this.a) return this.a.response;
            switch(this.m){
                case Ih:
                case "text":
                    return this.a.responseText;
                case "arraybuffer":
                    if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;
            }
            var a = this.b;
            a && a.log(sh, "Response type " + this.m + " is not supported on this browser", void 0);
            return null;
        } catch (b) {
            return Ah(this.b, "Can not get response: " + b.message), null;
        }
    };
    function Mh(a, b) {
        return b + " [" + a.O + " " + a.l + " " + Uh(a) + "]";
    }
    function Wh(a) {
        var b = Xh;
        this.g = [];
        this.v = b;
        this.o = a || null;
        this.f = this.a = !1;
        this.c = void 0;
        this.u = this.w = this.i = !1;
        this.h = 0;
        this.b = null;
        this.l = 0;
    }
    Wh.prototype.cancel = function(a) {
        if (this.a) this.c instanceof Wh && this.c.cancel();
        else {
            if (this.b) {
                var b = this.b;
                delete this.b;
                a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());
            }
            this.v ? this.v.call(this.o, this) : this.u = !0;
            this.a || (a = new Yh(this), Zh(this), $h(this, !1, a));
        }
    };
    Wh.prototype.m = function(a, b) {
        this.i = !1;
        $h(this, a, b);
    };
    function $h(a, b, c) {
        a.a = !0;
        a.c = c;
        a.f = !b;
        ai(a);
    }
    function Zh(a) {
        if (a.a) {
            if (!a.u) throw new bi(a);
            a.u = !1;
        }
    }
    function ci(a, b) {
        di(a, null, b, void 0);
    }
    function di(a, b, c, d) {
        a.g.push([
            b,
            c,
            d
        ]);
        a.a && ai(a);
    }
    Wh.prototype.then = function(a, b, c) {
        var d, e, f = new B(function(g, h) {
            d = g;
            e = h;
        });
        di(this, d, function(g) {
            g instanceof Yh ? f.cancel() : e(g);
        });
        return f.then(a, b, c);
    };
    Wh.prototype.$goog_Thenable = !0;
    function ei(a) {
        return La(a.g, function(b) {
            return q(b[1]);
        });
    }
    function ai(a) {
        if (a.h && a.a && ei(a)) {
            var b = a.h, c = fi[b];
            c && (l.clearTimeout(c.a), delete fi[b]);
            a.h = 0;
        }
        a.b && (a.b.l--, delete a.b);
        b = a.c;
        for(var d = c = !1; a.g.length && !a.i;){
            var e = a.g.shift(), f = e[0], g = e[1];
            e = e[2];
            if (f = a.f ? g : f) try {
                var h = f.call(e || a.o, b);
                (void 0) !== h && (a.f = a.f && (h == b || h instanceof Error), a.c = b = h);
                if (xa(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.i = !0;
            } catch (m) {
                b = m, a.f = !0, ei(a) || (c = !0);
            }
        }
        a.c = b;
        d && (h = t(a.m, a, !0), d = t(a.m, a, !1), b instanceof Wh ? (di(b, h, d), b.w = !0) : b.then(h, d));
        c && (b = new gi(b), fi[b.a] = b, a.h = b.a);
    }
    function bi() {
        w.call(this);
    }
    v(bi, w);
    bi.prototype.message = "Deferred has already fired";
    bi.prototype.name = "AlreadyCalledError";
    function Yh() {
        w.call(this);
    }
    v(Yh, w);
    Yh.prototype.message = "Deferred was canceled";
    Yh.prototype.name = "CanceledError";
    function gi(a) {
        this.a = l.setTimeout(t(this.c, this), 0);
        this.b = a;
    }
    gi.prototype.c = function() {
        delete fi[this.a];
        throw this.b;
    };
    var fi = {
    };
    function hi(a) {
        var b = {
        }, c = b.document || document, d = eb(a).toString(), e = document.createElement("SCRIPT"), f = {
            Nb: e,
            Ia: void 0
        }, g = new Wh(f), h = null, m = null != b.timeout ? b.timeout : 5000;
        0 < m && (h = window.setTimeout(function() {
            ii(e, !0);
            var p = new ji(ki, "Timeout reached for loading script " + d);
            Zh(g);
            $h(g, !1, p);
        }, m), f.Ia = h);
        e.onload = e.onreadystatechange = function() {
            e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (ii(e, b.gd || !1, h), Zh(g), $h(g, !0, null));
        };
        e.onerror = function() {
            ii(e, !0, h);
            var p = new ji(li, "Error while loading script " + d);
            Zh(g);
            $h(g, !1, p);
        };
        f = b.attributes || {
        };
        Xa(f, {
            type: "text/javascript",
            charset: "UTF-8"
        });
        Xd(e, f);
        Hb(e, a);
        mi(c).appendChild(e);
        return g;
    }
    function mi(a) {
        var b;
        return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
    }
    function Xh() {
        if (this && this.Nb) {
            var a = this.Nb;
            a && "SCRIPT" == a.tagName && ii(a, !0, this.Ia);
        }
    }
    function ii(a, b, c) {
        null != c && l.clearTimeout(c);
        a.onload = la;
        a.onerror = la;
        a.onreadystatechange = la;
        b && window.setTimeout(function() {
            a && a.parentNode && a.parentNode.removeChild(a);
        }, 0);
    }
    var li = 0, ki = 1;
    function ji(a, b) {
        var c = "Jsloader error (code #" + a + ")";
        b && (c += ": " + b);
        w.call(this, c);
        this.code = a;
    }
    v(ji, w);
    function ni(a) {
        this.f = a;
    }
    v(ni, gh);
    ni.prototype.a = function() {
        return new this.f;
    };
    ni.prototype.b = function() {
        return {
        };
    };
    function oi(a, b, c) {
        this.c = a;
        a = b || {
        };
        this.l = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
        this.u = a.secureTokenTimeout || pi;
        this.g = Va(a.secureTokenHeaders || qi);
        this.h = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
        this.i = a.firebaseTimeout || ri;
        this.a = Va(a.firebaseHeaders || si);
        c && (this.a["X-Client-Version"] = c, this.g["X-Client-Version"] = c);
        c = "Node" == Be();
        c = l.XMLHttpRequest || c && _appDefault.default.INTERNAL.node && _appDefault.default.INTERNAL.node.XMLHttpRequest;
        if (!c && !Ae()) throw new M("internal-error", "The XMLHttpRequest compatibility library was not found.");
        this.f = void 0;
        Ae() ? this.f = new Bh(self) : Ce() ? this.f = new ni(c) : this.f = new lh;
        this.b = null;
    }
    var ti, mg = "idToken", pi = new Qe(30000, 60000), qi = {
        "Content-Type": "application/x-www-form-urlencoded"
    }, ri = new Qe(30000, 60000), si = {
        "Content-Type": "application/json"
    };
    function ui(a, b) {
        b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
    }
    function vi(a, b) {
        b ? (a.a["X-Client-Version"] = b, a.g["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.g["X-Client-Version"]);
    }
    oi.prototype.R = function() {
        return this.b;
    };
    function wi(a, b, c, d, e, f, g) {
        le() || Ae() ? a = t(a.o, a) : (ti || (ti = new B(function(h, m) {
            xi(h, m);
        })), a = t(a.m, a));
        a(b, c, d, e, f, g);
    }
    oi.prototype.o = function(a, b, c, d, e, f) {
        if (Ae() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request)) throw new M("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
        var g = new Hh(this.f);
        if (f) {
            g.g = Math.max(0, f);
            var h = setTimeout(function() {
                g.dispatchEvent("timeout");
            }, f);
        }
        $c(g, "complete", function() {
            h && clearTimeout(h);
            var m = null;
            try {
                m = JSON.parse(Vh(this)) || null;
            } catch (p) {
                m = null;
            }
            b && b(m);
        });
        fd(g, "ready", function() {
            h && clearTimeout(h);
            qc(this);
        });
        fd(g, "timeout", function() {
            h && clearTimeout(h);
            qc(this);
            b && b(null);
        });
        Lh(g, a, c, d, e);
    };
    var yi = new Ya(Za, "https://apis.google.com/js/client.js?onload=%{onload}"), zi = "__fcb" + Math.floor(1000000 * Math.random()).toString();
    function xi(a, b) {
        if (((window.gapi || {
        }).client || {
        }).request) a();
        else {
            l[zi] = function() {
                ((window.gapi || {
                }).client || {
                }).request ? a() : b(Error("CORS_UNSUPPORTED"));
            };
            var c = fb(yi, {
                onload: zi
            });
            ci(hi(c), function() {
                b(Error("CORS_UNSUPPORTED"));
            });
        }
    }
    oi.prototype.m = function(a, b, c, d, e) {
        var f = this;
        ti.then(function() {
            window.gapi.client.setApiKey(f.c);
            var g = window.gapi.auth.getToken();
            window.gapi.auth.setToken(null);
            window.gapi.client.request({
                path: a,
                method: c,
                body: d,
                headers: e,
                authType: "none",
                callback: function(h) {
                    window.gapi.auth.setToken(g);
                    b && b(h);
                }
            });
        }).s(function(g) {
            b && b({
                error: {
                    message: g && g.message || "CORS_UNSUPPORTED"
                }
            });
        });
    };
    function Ai(a, b) {
        return new B(function(c, d) {
            "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? wi(a, a.l + "?key=" + encodeURIComponent(a.c), function(e) {
                e ? e.error ? d(Bi(e)) : e.access_token && e.refresh_token ? c(e) : d(new M("internal-error")) : d(new M("network-request-failed"));
            }, "POST", Qd(b).toString(), a.g, a.u.get()) : d(new M("internal-error"));
        });
    }
    function Ci(a, b, c, d, e, f) {
        var g = Md(a.h + b);
        H(g, "key", a.c);
        f && H(g, "cb", va().toString());
        var h = "GET" == c;
        if (h) for(var m in d)d.hasOwnProperty(m) && H(g, m, d[m]);
        return new B(function(p, u) {
            wi(a, g.toString(), function(A) {
                A ? A.error ? u(Bi(A, e || {
                })) : p(A) : u(new M("network-request-failed"));
            }, c, h ? void 0 : be(Me(d)), a.a, a.i.get());
        });
    }
    function Di(a) {
        a = a.email;
        if (!n(a) || !ue.test(a)) throw new M("invalid-email");
    }
    function Ei(a) {
        "email" in a && Di(a);
    }
    function Fi(a, b) {
        return P(a, Gi, {
            identifier: b,
            continueUri: Je() ? ie() : "http://localhost"
        }).then(function(c) {
            return c.signinMethods || [];
        });
    }
    function Hi(a) {
        return P(a, Ii, {
        }).then(function(b) {
            return b.authorizedDomains || [];
        });
    }
    function Ji(a) {
        if (!a[mg]) throw new M("internal-error");
    }
    function Ki(a) {
        if (a.phoneNumber || a.temporaryProof) {
            if (!a.phoneNumber || !a.temporaryProof) throw new M("internal-error");
        } else {
            if (!a.sessionInfo) throw new M("missing-verification-id");
            if (!a.code) throw new M("missing-verification-code");
        }
    }
    oi.prototype.ob = function() {
        return P(this, Li, {
        });
    };
    oi.prototype.rb = function(a, b) {
        return P(this, Mi, {
            idToken: a,
            email: b
        });
    };
    oi.prototype.sb = function(a, b) {
        return P(this, Lg, {
            idToken: a,
            password: b
        });
    };
    var Ni = {
        displayName: "DISPLAY_NAME",
        photoUrl: "PHOTO_URL"
    };
    k = oi.prototype;
    k.tb = function(a, b) {
        var c = {
            idToken: a
        }, d = [];
        Ta(Ni, function(e, f) {
            var g = b[f];
            null === g ? d.push(e) : f in b && (c[f] = g);
        });
        d.length && (c.deleteAttribute = d);
        return P(this, Mi, c);
    };
    k.kb = function(a, b) {
        a = {
            requestType: "PASSWORD_RESET",
            email: a
        };
        Xa(a, b);
        return P(this, Oi, a);
    };
    k.lb = function(a, b) {
        a = {
            requestType: "EMAIL_SIGNIN",
            email: a
        };
        Xa(a, b);
        return P(this, Pi, a);
    };
    k.jb = function(a, b) {
        a = {
            requestType: "VERIFY_EMAIL",
            idToken: a
        };
        Xa(a, b);
        return P(this, Qi, a);
    };
    function Vg(a, b) {
        return P(a, Ri, b);
    }
    k.Wa = function(a) {
        return P(this, Si, a);
    };
    function Ti(a, b, c) {
        return P(a, Ui, {
            idToken: b,
            deleteProvider: c
        });
    }
    function Vi(a) {
        if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new M("internal-error");
    }
    function Wi(a, b) {
        b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Dd(a.postBody), Ud(a, "nonce") && (b.nonce = a.get("nonce"))));
        return b;
    }
    function Xi(a) {
        var b = null;
        a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = fh(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = fh(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = fh(a)) : a.errorMessage && (b = Yi(a.errorMessage));
        if (b) throw b;
        if (!a[mg]) throw new M("internal-error");
    }
    function og(a, b) {
        b.returnIdpCredential = !0;
        return P(a, Zi, b);
    }
    function qg(a, b) {
        b.returnIdpCredential = !0;
        return P(a, $i, b);
    }
    function rg(a, b) {
        b.returnIdpCredential = !0;
        b.autoCreate = !1;
        return P(a, aj, b);
    }
    function bj(a) {
        if (!a.oobCode) throw new M("invalid-action-code");
    }
    k.ab = function(a, b) {
        return P(this, cj, {
            oobCode: a,
            newPassword: b
        });
    };
    k.Ma = function(a) {
        return P(this, dj, {
            oobCode: a
        });
    };
    k.Ya = function(a) {
        return P(this, ej, {
            oobCode: a
        });
    };
    var ej = {
        endpoint: "setAccountInfo",
        D: bj,
        fa: "email",
        F: !0
    }, dj = {
        endpoint: "resetPassword",
        D: bj,
        K: function(a) {
            var b = a.requestType;
            if (!b || !a.email && "EMAIL_SIGNIN" != b) throw new M("internal-error");
        },
        F: !0
    }, fj = {
        endpoint: "signupNewUser",
        D: function(a) {
            Di(a);
            if (!a.password) throw new M("weak-password");
        },
        K: Ji,
        T: !0,
        F: !0
    }, Gi = {
        endpoint: "createAuthUri",
        F: !0
    }, gj = {
        endpoint: "deleteAccount",
        V: [
            "idToken"
        ]
    }, Ui = {
        endpoint: "setAccountInfo",
        V: [
            "idToken",
            "deleteProvider"
        ],
        D: function(a) {
            if (!oa(a.deleteProvider)) throw new M("internal-error");
        }
    }, Ig = {
        endpoint: "emailLinkSignin",
        V: [
            "email",
            "oobCode"
        ],
        D: Di,
        K: Ji,
        T: !0,
        F: !0
    }, Kg = {
        endpoint: "emailLinkSignin",
        V: [
            "idToken",
            "email",
            "oobCode"
        ],
        D: Di,
        K: Ji,
        T: !0
    }, hj = {
        endpoint: "getAccountInfo"
    }, Pi = {
        endpoint: "getOobConfirmationCode",
        V: [
            "requestType"
        ],
        D: function(a) {
            if ("EMAIL_SIGNIN" != a.requestType) throw new M("internal-error");
            Di(a);
        },
        fa: "email",
        F: !0
    }, Qi = {
        endpoint: "getOobConfirmationCode",
        V: [
            "idToken",
            "requestType"
        ],
        D: function(a) {
            if ("VERIFY_EMAIL" != a.requestType) throw new M("internal-error");
        },
        fa: "email",
        F: !0
    }, Oi = {
        endpoint: "getOobConfirmationCode",
        V: [
            "requestType"
        ],
        D: function(a) {
            if ("PASSWORD_RESET" != a.requestType) throw new M("internal-error");
            Di(a);
        },
        fa: "email",
        F: !0
    }, Ii = {
        wb: !0,
        endpoint: "getProjectConfig",
        Kb: "GET"
    }, ij = {
        wb: !0,
        endpoint: "getRecaptchaParam",
        Kb: "GET",
        K: function(a) {
            if (!a.recaptchaSiteKey) throw new M("internal-error");
        }
    }, cj = {
        endpoint: "resetPassword",
        D: bj,
        fa: "email",
        F: !0
    }, Ri = {
        endpoint: "sendVerificationCode",
        V: [
            "phoneNumber",
            "recaptchaToken"
        ],
        fa: "sessionInfo",
        F: !0
    }, Mi = {
        endpoint: "setAccountInfo",
        V: [
            "idToken"
        ],
        D: Ei,
        T: !0
    }, Lg = {
        endpoint: "setAccountInfo",
        V: [
            "idToken"
        ],
        D: function(a) {
            Ei(a);
            if (!a.password) throw new M("weak-password");
        },
        K: Ji,
        T: !0
    }, Li = {
        endpoint: "signupNewUser",
        K: Ji,
        T: !0,
        F: !0
    }, Zi = {
        endpoint: "verifyAssertion",
        D: Vi,
        Ra: Wi,
        K: Xi,
        T: !0,
        F: !0
    }, aj = {
        endpoint: "verifyAssertion",
        D: Vi,
        Ra: Wi,
        K: function(a) {
            if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new M("user-not-found");
            if (a.errorMessage) throw Yi(a.errorMessage);
            if (!a[mg]) throw new M("internal-error");
        },
        T: !0,
        F: !0
    }, $i = {
        endpoint: "verifyAssertion",
        D: function(a) {
            Vi(a);
            if (!a.idToken) throw new M("internal-error");
        },
        Ra: Wi,
        K: Xi,
        T: !0
    }, jj = {
        endpoint: "verifyCustomToken",
        D: function(a) {
            if (!a.token) throw new M("invalid-custom-token");
        },
        K: Ji,
        T: !0,
        F: !0
    }, Jg = {
        endpoint: "verifyPassword",
        D: function(a) {
            Di(a);
            if (!a.password) throw new M("wrong-password");
        },
        K: Ji,
        T: !0,
        F: !0
    }, Si = {
        endpoint: "verifyPhoneNumber",
        D: Ki,
        K: Ji,
        F: !0
    }, Rg = {
        endpoint: "verifyPhoneNumber",
        D: function(a) {
            if (!a.idToken) throw new M("internal-error");
            Ki(a);
        },
        K: function(a) {
            if (a.temporaryProof) throw a.code = "credential-already-in-use", fh(a);
            Ji(a);
        }
    }, Sg = {
        Yb: {
            USER_NOT_FOUND: "user-not-found"
        },
        endpoint: "verifyPhoneNumber",
        D: Ki,
        K: Ji,
        F: !0
    };
    function P(a, b, c) {
        if (!cf(c, b.V)) return E(new M("internal-error"));
        var d = b.Kb || "POST", e;
        return D(c).then(b.D).then(function() {
            b.T && (c.returnSecureToken = !0);
            b.F && a.b && "undefined" === typeof c.tenantId && (c.tenantId = a.b);
            return Ci(a, b.endpoint, d, c, b.Yb, b.wb || !1);
        }).then(function(f) {
            e = f;
            return b.Ra ? b.Ra(c, e) : e;
        }).then(b.K).then(function() {
            if (!b.fa) return e;
            if (!(b.fa in e)) throw new M("internal-error");
            return e[b.fa];
        });
    }
    function Yi(a) {
        return Bi({
            error: {
                errors: [
                    {
                        message: a
                    }
                ],
                code: 400,
                message: a
            }
        });
    }
    function Bi(a, b) {
        var c = (a.error && a.error.errors && a.error.errors[0] || {
        }).reason || "";
        var d = {
            keyInvalid: "invalid-api-key",
            ipRefererBlocked: "app-not-authorized"
        };
        if (c = d[c] ? new M(d[c]) : null) return c;
        c = a.error && a.error.message || "";
        d = {
            INVALID_CUSTOM_TOKEN: "invalid-custom-token",
            CREDENTIAL_MISMATCH: "custom-token-mismatch",
            MISSING_CUSTOM_TOKEN: "internal-error",
            INVALID_IDENTIFIER: "invalid-email",
            MISSING_CONTINUE_URI: "internal-error",
            INVALID_EMAIL: "invalid-email",
            INVALID_PASSWORD: "wrong-password",
            USER_DISABLED: "user-disabled",
            MISSING_PASSWORD: "internal-error",
            EMAIL_EXISTS: "email-already-in-use",
            PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
            INVALID_IDP_RESPONSE: "invalid-credential",
            INVALID_PENDING_TOKEN: "invalid-credential",
            FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
            MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
            INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
            INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
            INVALID_SENDER: "invalid-sender",
            EMAIL_NOT_FOUND: "user-not-found",
            RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
            EXPIRED_OOB_CODE: "expired-action-code",
            INVALID_OOB_CODE: "invalid-action-code",
            MISSING_OOB_CODE: "internal-error",
            INVALID_PROVIDER_ID: "invalid-provider-id",
            CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
            INVALID_ID_TOKEN: "invalid-user-token",
            TOKEN_EXPIRED: "user-token-expired",
            USER_NOT_FOUND: "user-token-expired",
            CORS_UNSUPPORTED: "cors-unsupported",
            DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
            INVALID_APP_ID: "invalid-app-id",
            TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
            WEAK_PASSWORD: "weak-password",
            OPERATION_NOT_ALLOWED: "operation-not-allowed",
            USER_CANCELLED: "user-cancelled",
            CAPTCHA_CHECK_FAILED: "captcha-check-failed",
            INVALID_APP_CREDENTIAL: "invalid-app-credential",
            INVALID_CODE: "invalid-verification-code",
            INVALID_PHONE_NUMBER: "invalid-phone-number",
            INVALID_SESSION_INFO: "invalid-verification-id",
            INVALID_TEMPORARY_PROOF: "invalid-credential",
            MISSING_APP_CREDENTIAL: "missing-app-credential",
            MISSING_CODE: "missing-verification-code",
            MISSING_PHONE_NUMBER: "missing-phone-number",
            MISSING_SESSION_INFO: "missing-verification-id",
            QUOTA_EXCEEDED: "quota-exceeded",
            SESSION_EXPIRED: "code-expired",
            REJECTED_CREDENTIAL: "rejected-credential",
            INVALID_CONTINUE_URI: "invalid-continue-uri",
            MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
            MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
            UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
            INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
            INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
            INVALID_CERT_HASH: "invalid-cert-hash",
            UNSUPPORTED_TENANT_OPERATION: "unsupported-tenant-operation",
            INVALID_TENANT_ID: "invalid-tenant-id",
            TENANT_ID_MISMATCH: "tenant-id-mismatch",
            ADMIN_ONLY_OPERATION: "admin-restricted-operation"
        };
        Xa(d, b || {
        });
        b = (b = c.match(/^[^\s]+\s*:\s*([\s\S]*)$/)) && 1 < b.length ? b[1] : void 0;
        for(var e in d)if (0 === c.indexOf(e)) return new M(d[e], b);
        !b && a && (b = Le(a));
        return new M("internal-error", b);
    }
    function kj(a) {
        this.b = a;
        this.a = null;
        this.gb = lj(this);
    }
    function lj(a) {
        return mj().then(function() {
            return new B(function(b, c) {
                J("gapi.iframes.getContext")().open({
                    where: document.body,
                    url: a.b,
                    messageHandlersFilter: J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
                    attributes: {
                        style: {
                            position: "absolute",
                            top: "-100px",
                            width: "1px",
                            height: "1px"
                        }
                    },
                    dontclear: !0
                }, function(d) {
                    function e() {
                        clearTimeout(f);
                        b();
                    }
                    a.a = d;
                    a.a.restyle({
                        setHideOnLeave: !1
                    });
                    var f = setTimeout(function() {
                        c(Error("Network Error"));
                    }, nj.get());
                    d.ping(e).then(e, function() {
                        c(Error("Network Error"));
                    });
                });
            });
        });
    }
    function oj(a, b) {
        return a.gb.then(function() {
            return new B(function(c) {
                a.a.send(b.type, b, c, J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
            });
        });
    }
    function pj(a, b) {
        a.gb.then(function() {
            a.a.register("authEvent", b, J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
        });
    }
    var qj = new Ya(Za, "https://apis.google.com/js/api.js?onload=%{onload}"), rj = new Qe(30000, 60000), nj = new Qe(5000, 15000), sj = null;
    function mj() {
        return sj ? sj : sj = new B(function(a, b) {
            function c() {
                Pe();
                J("gapi.load")("gapi.iframes", {
                    callback: a,
                    ontimeout: function() {
                        Pe();
                        b(Error("Network Error"));
                    },
                    timeout: rj.get()
                });
            }
            if (J("gapi.iframes.Iframe")) a();
            else if (J("gapi.load")) c();
            else {
                var d = "__iframefcb" + Math.floor(1000000 * Math.random()).toString();
                l[d] = function() {
                    J("gapi.load") ? c() : b(Error("Network Error"));
                };
                d = fb(qj, {
                    onload: d
                });
                D(hi(d)).s(function() {
                    b(Error("Network Error"));
                });
            }
        }).s(function(a) {
            sj = null;
            throw a;
        });
    }
    function tj(a, b, c) {
        this.i = a;
        this.g = b;
        this.h = c;
        this.f = null;
        this.a = Nd(this.i, "/__/auth/iframe");
        H(this.a, "apiKey", this.g);
        H(this.a, "appName", this.h);
        this.b = null;
        this.c = [];
    }
    tj.prototype.toString = function() {
        this.f ? H(this.a, "v", this.f) : Td(this.a.a, "v");
        this.b ? H(this.a, "eid", this.b) : Td(this.a.a, "eid");
        this.c.length ? H(this.a, "fw", this.c.join(",")) : Td(this.a.a, "fw");
        return this.a.toString();
    };
    function uj(a, b, c, d, e) {
        this.o = a;
        this.m = b;
        this.c = c;
        this.u = d;
        this.i = this.g = this.l = null;
        this.a = e;
        this.h = this.f = null;
    }
    uj.prototype.nb = function(a) {
        this.h = a;
        return this;
    };
    uj.prototype.toString = function() {
        var a = Nd(this.o, "/__/auth/handler");
        H(a, "apiKey", this.m);
        H(a, "appName", this.c);
        H(a, "authType", this.u);
        if (this.a.isOAuthProvider) {
            var b = this.a;
            try {
                var c = _appDefault.default.app(this.c).auth().ha();
            } catch (h) {
                c = null;
            }
            b.bb = c;
            H(a, "providerId", this.a.providerId);
            b = this.a;
            c = Me(b.zb);
            for(var d in c)c[d] = c[d].toString();
            d = b.Fc;
            c = Va(c);
            for(var e = 0; e < d.length; e++){
                var f = d[e];
                f in c && delete c[f];
            }
            b.eb && b.bb && !c[b.eb] && (c[b.eb] = b.bb);
            Ua(c) || H(a, "customParameters", Le(c));
        }
        "function" === typeof this.a.Hb && (b = this.a.Hb(), b.length && H(a, "scopes", b.join(",")));
        this.l ? H(a, "redirectUrl", this.l) : Td(a.a, "redirectUrl");
        this.g ? H(a, "eventId", this.g) : Td(a.a, "eventId");
        this.i ? H(a, "v", this.i) : Td(a.a, "v");
        if (this.b) for(var g in this.b)this.b.hasOwnProperty(g) && !Ld(a, g) && H(a, g, this.b[g]);
        this.h ? H(a, "tid", this.h) : Td(a.a, "tid");
        this.f ? H(a, "eid", this.f) : Td(a.a, "eid");
        g = vj(this.c);
        g.length && H(a, "fw", g.join(","));
        return a.toString();
    };
    function vj(a) {
        try {
            return _appDefault.default.app(a).auth().Ca();
        } catch (b) {
            return [];
        }
    }
    function wj(a, b, c, d, e) {
        this.u = a;
        this.f = b;
        this.b = c;
        this.c = d || null;
        this.h = e || null;
        this.m = this.o = this.v = null;
        this.g = [];
        this.l = this.a = null;
    }
    function xj(a) {
        var b = ie();
        return Hi(a).then(function(c) {
            a: {
                var d = Md(b), e = d.f;
                d = d.b;
                for(var f = 0; f < c.length; f++){
                    var g = c[f];
                    var h = d;
                    var m = e;
                    0 == g.indexOf("chrome-extension://") ? h = Md(g).b == h && "chrome-extension" == m : "http" != m && "https" != m ? h = !1 : te.test(g) ? h = h == g : (g = g.split(".").join("\\."), h = new RegExp("^(.+\\." + g + "|" + g + ")$", "i").test(h));
                    if (h) {
                        c = !0;
                        break a;
                    }
                }
                c = !1;
            }
            if (!c) throw new dh(ie());
        });
    }
    function yj(a) {
        if (a.l) return a.l;
        a.l = ve().then(function() {
            if (!a.o) {
                var b = a.c, c = a.h, d = vj(a.b), e = new tj(a.u, a.f, a.b);
                e.f = b;
                e.b = c;
                e.c = Sa(d || []);
                a.o = e.toString();
            }
            a.i = new kj(a.o);
            zj(a);
        });
        return a.l;
    }
    k = wj.prototype;
    k.Fb = function(a, b, c) {
        var d = new M("popup-closed-by-user"), e = new M("web-storage-unsupported"), f = this, g = !1;
        return this.ia().then(function() {
            Aj(f).then(function(h) {
                h || (a && pe(a), b(e), g = !0);
            });
        }).s(function() {
        }).then(function() {
            if (!g) return se(a);
        }).then(function() {
            if (!g) return od(c).then(function() {
                b(d);
            });
        });
    };
    k.Ob = function() {
        var a = I();
        return !Ke(a) && !Oe(a);
    };
    k.Jb = function() {
        return !1;
    };
    k.Db = function(a, b, c, d, e, f, g, h) {
        if (!a) return E(new M("popup-blocked"));
        if (g && !Ke()) return this.ia().s(function(p) {
            pe(a);
            e(p);
        }), d(), D();
        this.a || (this.a = xj(Bj(this)));
        var m = this;
        return this.a.then(function() {
            var p = m.ia().s(function(u) {
                pe(a);
                e(u);
                throw u;
            });
            d();
            return p;
        }).then(function() {
            Yg(c);
            if (!g) {
                var p = Cj(m.u, m.f, m.b, b, c, null, f, m.c, void 0, m.h, h);
                je(p, a);
            }
        }).s(function(p) {
            "auth/network-request-failed" == p.code && (m.a = null);
            throw p;
        });
    };
    function Bj(a) {
        a.m || (a.v = a.c ? Fe(a.c, vj(a.b)) : null, a.m = new oi(a.f, Vf(a.h), a.v));
        return a.m;
    }
    k.Eb = function(a, b, c, d) {
        this.a || (this.a = xj(Bj(this)));
        var e = this;
        return this.a.then(function() {
            Yg(b);
            var f = Cj(e.u, e.f, e.b, a, b, ie(), c, e.c, void 0, e.h, d);
            je(f);
        }).s(function(f) {
            "auth/network-request-failed" == f.code && (e.a = null);
            throw f;
        });
    };
    k.ia = function() {
        var a = this;
        return yj(this).then(function() {
            return a.i.gb;
        }).s(function() {
            a.a = null;
            throw new M("network-request-failed");
        });
    };
    k.Rb = function() {
        return !0;
    };
    function Cj(a, b, c, d, e, f, g, h, m, p, u) {
        a = new uj(a, b, c, d, e);
        a.l = f;
        a.g = g;
        a.i = h;
        a.b = Va(m || null);
        a.f = p;
        return a.nb(u).toString();
    }
    function zj(a) {
        if (!a.i) throw Error("IfcHandler must be initialized!");
        pj(a.i, function(b) {
            var c = {
            };
            if (b && b.authEvent) {
                var d = !1;
                b = $g(b.authEvent);
                for(c = 0; c < a.g.length; c++)d = a.g[c](b) || d;
                c = {
                };
                c.status = d ? "ACK" : "ERROR";
                return D(c);
            }
            c.status = "ERROR";
            return D(c);
        });
    }
    function Aj(a) {
        var b = {
            type: "webStorageSupport"
        };
        return yj(a).then(function() {
            return oj(a.i, b);
        }).then(function(c) {
            if (c && c.length && "undefined" !== typeof c[0].webStorageSupport) return c[0].webStorageSupport;
            throw Error();
        });
    }
    k.Aa = function(a) {
        this.g.push(a);
    };
    k.Na = function(a) {
        Qa(this.g, function(b) {
            return b == a;
        });
    };
    function Dj(a) {
        this.a = a || _appDefault.default.INTERNAL.reactNative && _appDefault.default.INTERNAL.reactNative.AsyncStorage;
        if (!this.a) throw new M("internal-error", "The React Native compatibility library was not found.");
        this.type = "asyncStorage";
    }
    k = Dj.prototype;
    k.get = function(a) {
        return D(this.a.getItem(a)).then(function(b) {
            return b && Ne(b);
        });
    };
    k.set = function(a, b) {
        return D(this.a.setItem(a, Le(b)));
    };
    k.S = function(a) {
        return D(this.a.removeItem(a));
    };
    k.$ = function() {
    };
    k.ea = function() {
    };
    function Ej(a) {
        this.b = a;
        this.a = {
        };
        this.f = t(this.c, this);
    }
    var Fj = [];
    function Gj() {
        var a = Ae() ? self : null;
        x(Fj, function(c) {
            c.b == a && (b = c);
        });
        if (!b) {
            var b = new Ej(a);
            Fj.push(b);
        }
        return b;
    }
    Ej.prototype.c = function(a) {
        var b = a.data.eventType, c = a.data.eventId, d = this.a[b];
        if (d && 0 < d.length) {
            a.ports[0].postMessage({
                status: "ack",
                eventId: c,
                eventType: b,
                response: null
            });
            var e = [];
            x(d, function(f) {
                e.push(D().then(function() {
                    return f(a.origin, a.data.data);
                }));
            });
            cc(e).then(function(f) {
                var g = [];
                x(f, function(h) {
                    g.push({
                        fulfilled: h.Gb,
                        value: h.value,
                        reason: h.reason ? h.reason.message : void 0
                    });
                });
                x(g, function(h) {
                    for(var m in h)"undefined" === typeof h[m] && delete h[m];
                });
                a.ports[0].postMessage({
                    status: "done",
                    eventId: c,
                    eventType: b,
                    response: g
                });
            });
        }
    };
    function Hj(a, b, c) {
        Ua(a.a) && a.b.addEventListener("message", a.f);
        "undefined" === typeof a.a[b] && (a.a[b] = []);
        a.a[b].push(c);
    }
    function Ij(a) {
        this.a = a;
    }
    Ij.prototype.postMessage = function(a, b) {
        this.a.postMessage(a, b);
    };
    function Jj(a) {
        this.c = a;
        this.b = !1;
        this.a = [];
    }
    function Kj(a, b, c, d) {
        var e, f = c || {
        }, g, h, m, p = null;
        if (a.b) return E(Error("connection_unavailable"));
        var u = d ? 800 : 50, A = "undefined" !== typeof MessageChannel ? new MessageChannel : null;
        return new B(function(C, N) {
            A ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), A.port1.start(), h = setTimeout(function() {
                N(Error("unsupported_event"));
            }, u), g = function(wa) {
                wa.data.eventId === e && ("ack" === wa.data.status ? (clearTimeout(h), m = setTimeout(function() {
                    N(Error("timeout"));
                }, 3000)) : "done" === wa.data.status ? (clearTimeout(m), "undefined" !== typeof wa.data.response ? C(wa.data.response) : N(Error("unknown_error"))) : (clearTimeout(h), clearTimeout(m), N(Error("invalid_response"))));
            }, p = {
                messageChannel: A,
                onMessage: g
            }, a.a.push(p), A.port1.addEventListener("message", g), a.c.postMessage({
                eventType: b,
                eventId: e,
                data: f
            }, [
                A.port2
            ])) : N(Error("connection_unavailable"));
        }).then(function(C) {
            Lj(a, p);
            return C;
        }).s(function(C) {
            Lj(a, p);
            throw C;
        });
    }
    function Lj(a, b) {
        if (b) {
            var c = b.messageChannel, d = b.onMessage;
            c && (c.port1.removeEventListener("message", d), c.port1.close());
            Qa(a.a, function(e) {
                return e == b;
            });
        }
    }
    Jj.prototype.close = function() {
        for(; 0 < this.a.length;)Lj(this, this.a[0]);
        this.b = !0;
    };
    function Mj() {
        if (!Nj()) throw new M("web-storage-unsupported");
        this.c = {
        };
        this.a = [];
        this.b = 0;
        this.u = l.indexedDB;
        this.type = "indexedDB";
        this.g = this.l = this.f = this.i = null;
        this.o = !1;
        this.h = null;
        var a = this;
        Ae() && self ? (this.l = Gj(), Hj(this.l, "keyChanged", function(b, c) {
            return Oj(a).then(function(d) {
                0 < d.length && x(a.a, function(e) {
                    e(d);
                });
                return {
                    keyProcessed: Oa(d, c.key)
                };
            });
        }), Hj(this.l, "ping", function() {
            return D([
                "keyChanged"
            ]);
        })) : We().then(function(b) {
            if (a.h = b) a.g = new Jj(new Ij(b)), Kj(a.g, "ping", null, !0).then(function(c) {
                c[0].fulfilled && Oa(c[0].value, "keyChanged") && (a.o = !0);
            }).s(function() {
            });
        });
    }
    var Pj;
    function Qj(a) {
        return new B(function(b, c) {
            var d = a.u.deleteDatabase("firebaseLocalStorageDb");
            d.onsuccess = function() {
                b();
            };
            d.onerror = function(e) {
                c(Error(e.target.error));
            };
        });
    }
    function Rj(a) {
        return new B(function(b, c) {
            var d = a.u.open("firebaseLocalStorageDb", 1);
            d.onerror = function(e) {
                try {
                    e.preventDefault();
                } catch (f) {
                }
                c(Error(e.target.error));
            };
            d.onupgradeneeded = function(e) {
                e = e.target.result;
                try {
                    e.createObjectStore("firebaseLocalStorage", {
                        keyPath: "fbase_key"
                    });
                } catch (f) {
                    c(f);
                }
            };
            d.onsuccess = function(e) {
                e = e.target.result;
                e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : Qj(a).then(function() {
                    return Rj(a);
                }).then(function(f) {
                    b(f);
                }).s(function(f) {
                    c(f);
                });
            };
        });
    }
    function Sj(a) {
        a.m || (a.m = Rj(a));
        return a.m;
    }
    function Nj() {
        try {
            return !!l.indexedDB;
        } catch (a) {
            return !1;
        }
    }
    function Tj(a) {
        return a.objectStore("firebaseLocalStorage");
    }
    function Uj(a, b) {
        return a.transaction([
            "firebaseLocalStorage"
        ], b ? "readwrite" : "readonly");
    }
    function Vj(a) {
        return new B(function(b, c) {
            a.onsuccess = function(d) {
                d && d.target ? b(d.target.result) : b();
            };
            a.onerror = function(d) {
                c(d.target.error);
            };
        });
    }
    k = Mj.prototype;
    k.set = function(a, b) {
        var c = !1, d, e = this;
        return Sj(this).then(function(f) {
            d = f;
            f = Tj(Uj(d, !0));
            return Vj(f.get(a));
        }).then(function(f) {
            var g = Tj(Uj(d, !0));
            if (f) return f.value = b, Vj(g.put(f));
            e.b++;
            c = !0;
            f = {
            };
            f.fbase_key = a;
            f.value = b;
            return Vj(g.add(f));
        }).then(function() {
            e.c[a] = b;
            return Wj(e, a);
        }).ka(function() {
            c && e.b--;
        });
    };
    function Wj(a, b) {
        return a.g && a.h && Ve() === a.h ? Kj(a.g, "keyChanged", {
            key: b
        }, a.o).then(function() {
        }).s(function() {
        }) : D();
    }
    k.get = function(a) {
        return Sj(this).then(function(b) {
            return Vj(Tj(Uj(b, !1)).get(a));
        }).then(function(b) {
            return b && b.value;
        });
    };
    k.S = function(a) {
        var b = !1, c = this;
        return Sj(this).then(function(d) {
            b = !0;
            c.b++;
            return Vj(Tj(Uj(d, !0))["delete"](a));
        }).then(function() {
            delete c.c[a];
            return Wj(c, a);
        }).ka(function() {
            b && c.b--;
        });
    };
    function Oj(a) {
        return Sj(a).then(function(b) {
            var c = Tj(Uj(b, !1));
            return c.getAll ? Vj(c.getAll()) : new B(function(d, e) {
                var f = [], g = c.openCursor();
                g.onsuccess = function(h) {
                    (h = h.target.result) ? (f.push(h.value), h["continue"]()) : d(f);
                };
                g.onerror = function(h) {
                    e(h.target.error);
                };
            });
        }).then(function(b) {
            var c = {
            }, d = [];
            if (0 == a.b) {
                for(d = 0; d < b.length; d++)c[b[d].fbase_key] = b[d].value;
                d = ke(a.c, c);
                a.c = c;
            }
            return d;
        });
    }
    k.$ = function(a) {
        0 == this.a.length && Xj(this);
        this.a.push(a);
    };
    k.ea = function(a) {
        Qa(this.a, function(b) {
            return b == a;
        });
        0 == this.a.length && Yj(this);
    };
    function Xj(a) {
        function b() {
            a.f = setTimeout(function() {
                a.i = Oj(a).then(function(c) {
                    0 < c.length && x(a.a, function(d) {
                        d(c);
                    });
                }).then(function() {
                    b();
                }).s(function(c) {
                    "STOP_EVENT" != c.message && b();
                });
            }, 800);
        }
        Yj(a);
        b();
    }
    function Yj(a) {
        a.i && a.i.cancel("STOP_EVENT");
        a.f && (clearTimeout(a.f), a.f = null);
    }
    function Zj(a) {
        var b = this, c = null;
        this.a = [];
        this.type = "indexedDB";
        this.c = a;
        this.b = D().then(function() {
            if (Nj()) {
                var d = He(), e = "__sak" + d;
                Pj || (Pj = new Mj);
                c = Pj;
                return c.set(e, d).then(function() {
                    return c.get(e);
                }).then(function(f) {
                    if (f !== d) throw Error("indexedDB not supported!");
                    return c.S(e);
                }).then(function() {
                    return c;
                }).s(function() {
                    return b.c;
                });
            }
            return b.c;
        }).then(function(d) {
            b.type = d.type;
            d.$(function(e) {
                x(b.a, function(f) {
                    f(e);
                });
            });
            return d;
        });
    }
    k = Zj.prototype;
    k.get = function(a) {
        return this.b.then(function(b) {
            return b.get(a);
        });
    };
    k.set = function(a, b) {
        return this.b.then(function(c) {
            return c.set(a, b);
        });
    };
    k.S = function(a) {
        return this.b.then(function(b) {
            return b.S(a);
        });
    };
    k.$ = function(a) {
        this.a.push(a);
    };
    k.ea = function(a) {
        Qa(this.a, function(b) {
            return b == a;
        });
    };
    function ak() {
        this.a = {
        };
        this.type = "inMemory";
    }
    k = ak.prototype;
    k.get = function(a) {
        return D(this.a[a]);
    };
    k.set = function(a, b) {
        this.a[a] = b;
        return D();
    };
    k.S = function(a) {
        delete this.a[a];
        return D();
    };
    k.$ = function() {
    };
    k.ea = function() {
    };
    function bk() {
        if (!ck()) {
            if ("Node" == Be()) throw new M("internal-error", "The LocalStorage compatibility library was not found.");
            throw new M("web-storage-unsupported");
        }
        this.a = dk() || _appDefault.default.INTERNAL.node.localStorage;
        this.type = "localStorage";
    }
    function dk() {
        try {
            var a = l.localStorage, b = He();
            a && (a.setItem(b, "1"), a.removeItem(b));
            return a;
        } catch (c) {
            return null;
        }
    }
    function ck() {
        var a = "Node" == Be();
        a = dk() || a && _appDefault.default.INTERNAL.node && _appDefault.default.INTERNAL.node.localStorage;
        if (!a) return !1;
        try {
            return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
        } catch (b) {
            return !1;
        }
    }
    k = bk.prototype;
    k.get = function(a) {
        var b = this;
        return D().then(function() {
            var c = b.a.getItem(a);
            return Ne(c);
        });
    };
    k.set = function(a, b) {
        var c = this;
        return D().then(function() {
            var d = Le(b);
            null === d ? c.S(a) : c.a.setItem(a, d);
        });
    };
    k.S = function(a) {
        var b = this;
        return D().then(function() {
            b.a.removeItem(a);
        });
    };
    k.$ = function(a) {
        l.window && Xc(l.window, "storage", a);
    };
    k.ea = function(a) {
        l.window && gd(l.window, "storage", a);
    };
    function ek() {
        this.type = "nullStorage";
    }
    k = ek.prototype;
    k.get = function() {
        return D(null);
    };
    k.set = function() {
        return D();
    };
    k.S = function() {
        return D();
    };
    k.$ = function() {
    };
    k.ea = function() {
    };
    function fk() {
        if (!gk()) {
            if ("Node" == Be()) throw new M("internal-error", "The SessionStorage compatibility library was not found.");
            throw new M("web-storage-unsupported");
        }
        this.a = hk() || _appDefault.default.INTERNAL.node.sessionStorage;
        this.type = "sessionStorage";
    }
    function hk() {
        try {
            var a = l.sessionStorage, b = He();
            a && (a.setItem(b, "1"), a.removeItem(b));
            return a;
        } catch (c) {
            return null;
        }
    }
    function gk() {
        var a = "Node" == Be();
        a = hk() || a && _appDefault.default.INTERNAL.node && _appDefault.default.INTERNAL.node.sessionStorage;
        if (!a) return !1;
        try {
            return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
        } catch (b) {
            return !1;
        }
    }
    k = fk.prototype;
    k.get = function(a) {
        var b = this;
        return D().then(function() {
            var c = b.a.getItem(a);
            return Ne(c);
        });
    };
    k.set = function(a, b) {
        var c = this;
        return D().then(function() {
            var d = Le(b);
            null === d ? c.S(a) : c.a.setItem(a, d);
        });
    };
    k.S = function(a) {
        var b = this;
        return D().then(function() {
            b.a.removeItem(a);
        });
    };
    k.$ = function() {
    };
    k.ea = function() {
    };
    function ik() {
        var a = {
        };
        a.Browser = jk;
        a.Node = kk;
        a.ReactNative = lk;
        a.Worker = mk;
        this.a = a[Be()];
    }
    var nk, jk = {
        C: bk,
        Ta: fk
    }, kk = {
        C: bk,
        Ta: fk
    }, lk = {
        C: Dj,
        Ta: ek
    }, mk = {
        C: bk,
        Ta: ek
    };
    var ok = {
        ad: "local",
        NONE: "none",
        cd: "session"
    };
    function pk(a) {
        var b = new M("invalid-persistence-type"), c = new M("unsupported-persistence-type");
        a: {
            for(d in ok)if (ok[d] == a) {
                var d = !0;
                break a;
            }
            d = !1;
        }
        if (!d || "string" !== typeof a) throw b;
        switch(Be()){
            case "ReactNative":
                if ("session" === a) throw c;
                break;
            case "Node":
                if ("none" !== a) throw c;
                break;
            default:
                if (!Ge() && "none" !== a) throw c;
        }
    }
    function qk() {
        var a = !Oe(I()) && ze() ? !0 : !1, b = Ke(), c = Ge();
        this.m = a;
        this.h = b;
        this.l = c;
        this.a = {
        };
        nk || (nk = new ik);
        a = nk;
        try {
            this.g = !he() && Ue() || !l.indexedDB ? new a.a.C : new Zj(Ae() ? new ak : new a.a.C);
        } catch (d) {
            this.g = new ak, this.h = !0;
        }
        try {
            this.i = new a.a.Ta;
        } catch (d) {
            this.i = new ak;
        }
        this.u = new ak;
        this.f = t(this.Pb, this);
        this.b = {
        };
    }
    var rk;
    function sk() {
        rk || (rk = new qk);
        return rk;
    }
    function tk(a, b) {
        switch(b){
            case "session":
                return a.i;
            case "none":
                return a.u;
            default:
                return a.g;
        }
    }
    function uk(a, b) {
        return "firebase:" + a.name + (b ? ":" + b : "");
    }
    function vk(a, b, c) {
        var d = uk(b, c), e = tk(a, b.C);
        return a.get(b, c).then(function(f) {
            var g = null;
            try {
                g = Ne(l.localStorage.getItem(d));
            } catch (h) {
            }
            if (g && !f) return l.localStorage.removeItem(d), a.set(b, g, c);
            g && f && "localStorage" != e.type && l.localStorage.removeItem(d);
        });
    }
    k = qk.prototype;
    k.get = function(a, b) {
        return tk(this, a.C).get(uk(a, b));
    };
    function wk(a, b, c) {
        c = uk(b, c);
        "local" == b.C && (a.b[c] = null);
        return tk(a, b.C).S(c);
    }
    k.set = function(a, b, c) {
        var d = uk(a, c), e = this, f = tk(this, a.C);
        return f.set(d, b).then(function() {
            return f.get(d);
        }).then(function(g) {
            "local" == a.C && (e.b[d] = g);
        });
    };
    k.addListener = function(a, b, c) {
        a = uk(a, b);
        this.l && (this.b[a] = l.localStorage.getItem(a));
        Ua(this.a) && (tk(this, "local").$(this.f), this.h || (he() || !Ue()) && l.indexedDB || !this.l || xk(this));
        this.a[a] || (this.a[a] = []);
        this.a[a].push(c);
    };
    k.removeListener = function(a, b, c) {
        a = uk(a, b);
        this.a[a] && (Qa(this.a[a], function(d) {
            return d == c;
        }), 0 == this.a[a].length && delete this.a[a]);
        Ua(this.a) && (tk(this, "local").ea(this.f), yk(this));
    };
    function xk(a) {
        yk(a);
        a.c = setInterval(function() {
            for(var b in a.a){
                var c = l.localStorage.getItem(b), d = a.b[b];
                c != d && (a.b[b] = c, c = new Lc({
                    type: "storage",
                    key: b,
                    target: window,
                    oldValue: d,
                    newValue: c,
                    a: !0
                }), a.Pb(c));
            }
        }, 1000);
    }
    function yk(a) {
        a.c && (clearInterval(a.c), a.c = null);
    }
    k.Pb = function(a) {
        if (a && a.f) {
            var b = a.a.key;
            if (null == b) for(var c in this.a){
                var d = this.b[c];
                "undefined" === typeof d && (d = null);
                var e = l.localStorage.getItem(c);
                e !== d && (this.b[c] = e, this.$a(c));
            }
            else if (0 == b.indexOf("firebase:") && this.a[b]) {
                "undefined" !== typeof a.a.a ? tk(this, "local").ea(this.f) : yk(this);
                if (this.m) {
                    if (c = l.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b);
                    else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
                }
                var f = this;
                c = function() {
                    if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b)) f.b[b] = l.localStorage.getItem(b), f.$a(b);
                };
                vc && Gc && 10 == Gc && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
            }
        } else x(a, t(this.$a, this));
    };
    k.$a = function(a) {
        this.a[a] && x(this.a[a], function(b) {
            b();
        });
    };
    function zk(a) {
        this.a = a;
        this.b = sk();
    }
    var Ak = {
        name: "authEvent",
        C: "local"
    };
    function Bk(a) {
        return a.b.get(Ak, a.a).then(function(b) {
            return $g(b);
        });
    }
    function Ck() {
        this.a = sk();
    }
    function Dk() {
        this.b = -1;
    }
    function Ek(a, b) {
        this.b = Fk;
        this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
        this.g = this.c = 0;
        this.a = [];
        this.i = a;
        this.h = b;
        this.l = l.Int32Array ? new Int32Array(64) : Array(64);
        (void 0) !== Gk || (l.Int32Array ? Gk = new Int32Array(Hk) : Gk = Hk);
        this.reset();
    }
    var Gk;
    v(Ek, Dk);
    for(var Fk = 64, Ik = Fk - 1, Jk = [], Kk = 0; Kk < Ik; Kk++)Jk[Kk] = 0;
    var Lk = Ra(128, Jk);
    Ek.prototype.reset = function() {
        this.g = this.c = 0;
        this.a = l.Int32Array ? new Int32Array(this.h) : Sa(this.h);
    };
    function Mk(a) {
        for(var b = a.f, c = a.l, d = 0, e = 0; e < b.length;)c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;
        for(b = 16; 64 > b; b++){
            e = c[b - 15] | 0;
            d = c[b - 2] | 0;
            var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0, g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
            c[b] = f + g | 0;
        }
        d = a.a[0] | 0;
        e = a.a[1] | 0;
        var h = a.a[2] | 0, m = a.a[3] | 0, p = a.a[4] | 0, u = a.a[5] | 0, A = a.a[6] | 0;
        f = a.a[7] | 0;
        for(b = 0; 64 > b; b++){
            var C = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h ^ e & h) | 0;
            g = p & u ^ ~p & A;
            f = f + ((p >>> 6 | p << 26) ^ (p >>> 11 | p << 21) ^ (p >>> 25 | p << 7)) | 0;
            g = g + (Gk[b] | 0) | 0;
            g = f + (g + (c[b] | 0) | 0) | 0;
            f = A;
            A = u;
            u = p;
            p = m + g | 0;
            m = h;
            h = e;
            e = d;
            d = g + C | 0;
        }
        a.a[0] = a.a[0] + d | 0;
        a.a[1] = a.a[1] + e | 0;
        a.a[2] = a.a[2] + h | 0;
        a.a[3] = a.a[3] + m | 0;
        a.a[4] = a.a[4] + p | 0;
        a.a[5] = a.a[5] + u | 0;
        a.a[6] = a.a[6] + A | 0;
        a.a[7] = a.a[7] + f | 0;
    }
    function Nk(a, b, c) {
        (void 0) === c && (c = b.length);
        var d = 0, e = a.c;
        if (n(b)) for(; d < c;)a.f[e++] = b.charCodeAt(d++), e == a.b && (Mk(a), e = 0);
        else if (pa(b)) for(; d < c;){
            var f = b[d++];
            if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
            a.f[e++] = f;
            e == a.b && (Mk(a), e = 0);
        }
        else throw Error("message must be string or array");
        a.c = e;
        a.g += c;
    }
    var Hk = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
    ];
    function Ok() {
        Ek.call(this, 8, Pk);
    }
    v(Ok, Ek);
    var Pk = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    function Qk(a, b, c, d, e) {
        this.u = a;
        this.i = b;
        this.l = c;
        this.m = d || null;
        this.o = e || null;
        this.h = b + ":" + c;
        this.v = new Ck;
        this.g = new zk(this.h);
        this.f = null;
        this.b = [];
        this.a = this.c = null;
    }
    function Rk(a) {
        return new M("invalid-cordova-configuration", a);
    }
    k = Qk.prototype;
    k.ia = function() {
        return this.Da ? this.Da : this.Da = we().then(function() {
            if ("function" !== typeof J("universalLinks.subscribe", l)) throw Rk("cordova-universal-links-plugin-fix is not installed");
            if ("undefined" === typeof J("BuildInfo.packageName", l)) throw Rk("cordova-plugin-buildinfo is not installed");
            if ("function" !== typeof J("cordova.plugins.browsertab.openUrl", l)) throw Rk("cordova-plugin-browsertab is not installed");
            if ("function" !== typeof J("cordova.InAppBrowser.open", l)) throw Rk("cordova-plugin-inappbrowser is not installed");
        }, function() {
            throw new M("cordova-not-ready");
        });
    };
    function Sk() {
        for(var a = 20, b = []; 0 < a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
        return b.join("");
    }
    function Tk(a) {
        var b = new Ok;
        Nk(b, a);
        a = [];
        var c = 8 * b.g;
        56 > b.c ? Nk(b, Lk, 56 - b.c) : Nk(b, Lk, b.b - (b.c - 56));
        for(var d = 63; 56 <= d; d--)b.f[d] = c & 255, c /= 256;
        Mk(b);
        for(d = c = 0; d < b.i; d++)for(var e = 24; 0 <= e; e -= 8)a[c++] = b.a[d] >> e & 255;
        return Lf(a);
    }
    k.Fb = function(a, b) {
        b(new M("operation-not-supported-in-this-environment"));
        return D();
    };
    k.Db = function() {
        return E(new M("operation-not-supported-in-this-environment"));
    };
    k.Rb = function() {
        return !1;
    };
    k.Ob = function() {
        return !0;
    };
    k.Jb = function() {
        return !0;
    };
    k.Eb = function(a, b, c, d) {
        if (this.c) return E(new M("redirect-operation-pending"));
        var e = this, f = l.document, g = null, h = null, m = null, p = null;
        return this.c = D().then(function() {
            Yg(b);
            return Uk(e);
        }).then(function() {
            return Vk(e, a, b, c, d);
        }).then(function() {
            return new B(function(u, A) {
                h = function() {
                    var C = J("cordova.plugins.browsertab.close", l);
                    u();
                    "function" === typeof C && C();
                    e.a && "function" === typeof e.a.close && (e.a.close(), e.a = null);
                    return !1;
                };
                e.Aa(h);
                m = function() {
                    g || (g = od(2000).then(function() {
                        A(new M("redirect-cancelled-by-user"));
                    }));
                };
                p = function() {
                    Re() && m();
                };
                f.addEventListener("resume", m, !1);
                I().toLowerCase().match(/android/) || f.addEventListener("visibilitychange", p, !1);
            }).s(function(u) {
                return Wk(e).then(function() {
                    throw u;
                });
            });
        }).ka(function() {
            m && f.removeEventListener("resume", m, !1);
            p && f.removeEventListener("visibilitychange", p, !1);
            g && g.cancel();
            h && e.Na(h);
            e.c = null;
        });
    };
    function Vk(a, b, c, d, e) {
        var f = Sk(), g = new Zg(b, d, null, f, new M("no-auth-event"), null, e), h = J("BuildInfo.packageName", l);
        if ("string" !== typeof h) throw new M("invalid-cordova-configuration");
        var m = J("BuildInfo.displayName", l), p = {
        };
        if (I().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h;
        else if (I().toLowerCase().match(/android/)) p.apn = h;
        else return E(new M("operation-not-supported-in-this-environment"));
        m && (p.appDisplayName = m);
        f = Tk(f);
        p.sessionId = f;
        var u = Cj(a.u, a.i, a.l, b, c, null, d, a.m, p, a.o, e);
        return a.ia().then(function() {
            var A = a.h;
            return a.v.a.set(Ak, g.A(), A);
        }).then(function() {
            var A = J("cordova.plugins.browsertab.isAvailable", l);
            if ("function" !== typeof A) throw new M("invalid-cordova-configuration");
            var C = null;
            A(function(N) {
                if (N) {
                    C = J("cordova.plugins.browsertab.openUrl", l);
                    if ("function" !== typeof C) throw new M("invalid-cordova-configuration");
                    C(u);
                } else {
                    C = J("cordova.InAppBrowser.open", l);
                    if ("function" !== typeof C) throw new M("invalid-cordova-configuration");
                    N = I();
                    a.a = C(u, N.match(/(iPad|iPhone|iPod).*OS 7_\d/i) || N.match(/(iPad|iPhone|iPod).*OS 8_\d/i) ? "_blank" : "_system", "location=yes");
                }
            });
        });
    }
    function Xk(a, b) {
        for(var c = 0; c < a.b.length; c++)try {
            a.b[c](b);
        } catch (d) {
        }
    }
    function Uk(a) {
        a.f || (a.f = a.ia().then(function() {
            return new B(function(b) {
                function c(d) {
                    b(d);
                    a.Na(c);
                    return !1;
                }
                a.Aa(c);
                Yk(a);
            });
        }));
        return a.f;
    }
    function Wk(a) {
        var b = null;
        return Bk(a.g).then(function(c) {
            b = c;
            c = a.g;
            return wk(c.b, Ak, c.a);
        }).then(function() {
            return b;
        });
    }
    function Yk(a) {
        function b(g) {
            d = !0;
            e && e.cancel();
            Wk(a).then(function(h) {
                var m = c;
                if (h && g && g.url) {
                    var p = null;
                    m = jg(g.url);
                    -1 != m.indexOf("/__/auth/callback") && (p = Md(m), p = Ne(Ld(p, "firebaseError") || null), p = (p = "object" === typeof p ? qf(p) : null) ? new Zg(h.c, h.b, null, null, p, null, h.R()) : new Zg(h.c, h.b, m, h.f, null, null, h.R()));
                    m = p || c;
                }
                Xk(a, m);
            });
        }
        var c = new Zg("unknown", null, null, null, new M("no-auth-event")), d = !1, e = od(500).then(function() {
            return Wk(a).then(function() {
                d || Xk(a, c);
            });
        }), f = l.handleOpenURL;
        l.handleOpenURL = function(g) {
            0 == g.toLowerCase().indexOf(J("BuildInfo.packageName", l).toLowerCase() + "://") && b({
                url: g
            });
            if ("function" === typeof f) try {
                f(g);
            } catch (h) {
                console.error(h);
            }
        };
        bh || (bh = new ah);
        ch(b);
    }
    k.Aa = function(a) {
        this.b.push(a);
        Uk(this).s(function(b) {
            "auth/invalid-cordova-configuration" === b.code && (b = new Zg("unknown", null, null, null, new M("no-auth-event")), a(b));
        });
    };
    k.Na = function(a) {
        Qa(this.b, function(b) {
            return b == a;
        });
    };
    function Zk(a) {
        this.a = a;
        this.b = sk();
    }
    var $k = {
        name: "pendingRedirect",
        C: "session"
    };
    function al(a) {
        return a.b.set($k, "pending", a.a);
    }
    function bl(a) {
        return wk(a.b, $k, a.a);
    }
    function cl(a) {
        return a.b.get($k, a.a).then(function(b) {
            return "pending" == b;
        });
    }
    function dl(a, b, c) {
        this.i = {
        };
        this.v = 0;
        this.B = a;
        this.u = b;
        this.m = c;
        this.h = [];
        this.f = !1;
        this.l = t(this.o, this);
        this.b = new el;
        this.w = new fl;
        this.g = new Zk(this.u + ":" + this.m);
        this.c = {
        };
        this.c.unknown = this.b;
        this.c.signInViaRedirect = this.b;
        this.c.linkViaRedirect = this.b;
        this.c.reauthViaRedirect = this.b;
        this.c.signInViaPopup = this.w;
        this.c.linkViaPopup = this.w;
        this.c.reauthViaPopup = this.w;
        this.a = gl(this.B, this.u, this.m, Wf);
    }
    function gl(a, b, c, d) {
        var e = _appDefault.default.SDK_VERSION || null;
        return xe() ? new Qk(a, b, c, e, d) : new wj(a, b, c, e, d);
    }
    dl.prototype.reset = function() {
        this.f = !1;
        this.a.Na(this.l);
        this.a = gl(this.B, this.u, this.m);
        this.i = {
        };
    };
    function hl(a) {
        a.f || (a.f = !0, a.a.Aa(a.l));
        var b = a.a;
        return a.a.ia().s(function(c) {
            a.a == b && a.reset();
            throw c;
        });
    }
    function il(a) {
        a.a.Ob() && hl(a).s(function(b) {
            var c = new Zg("unknown", null, null, null, new M("operation-not-supported-in-this-environment"));
            jl(b) && a.o(c);
        });
        a.a.Jb() || kl(a.b);
    }
    function ll(a, b) {
        Oa(a.h, b) || a.h.push(b);
        a.f || cl(a.g).then(function(c) {
            c ? bl(a.g).then(function() {
                hl(a).s(function(d) {
                    var e = new Zg("unknown", null, null, null, new M("operation-not-supported-in-this-environment"));
                    jl(d) && a.o(e);
                });
            }) : il(a);
        }).s(function() {
            il(a);
        });
    }
    function ml(a, b) {
        Qa(a.h, function(c) {
            return c == b;
        });
    }
    dl.prototype.o = function(a) {
        if (!a) throw new M("invalid-auth-event");
        600000 <= va() - this.v && (this.i = {
        }, this.v = 0);
        if (a && a.getUid() && this.i.hasOwnProperty(a.getUid())) return !1;
        for(var b = !1, c = 0; c < this.h.length; c++){
            var d = this.h[c];
            if (d.xb(a.c, a.b)) {
                if (b = this.c[a.c]) b.h(a, d), a && (a.f || a.b) && (this.i[a.getUid()] = !0, this.v = va());
                b = !0;
                break;
            }
        }
        kl(this.b);
        return b;
    };
    var nl = new Qe(2000, 10000), ol = new Qe(30000, 60000);
    dl.prototype.oa = function() {
        return this.b.oa();
    };
    function pl(a, b, c, d, e, f, g) {
        return a.a.Db(b, c, d, function() {
            a.f || (a.f = !0, a.a.Aa(a.l));
        }, function() {
            a.reset();
        }, e, f, g);
    }
    function jl(a) {
        return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
    }
    function ql(a, b, c, d, e) {
        var f;
        return al(a.g).then(function() {
            return a.a.Eb(b, c, d, e).s(function(g) {
                if (jl(g)) throw new M("operation-not-supported-in-this-environment");
                f = g;
                return bl(a.g).then(function() {
                    throw f;
                });
            }).then(function() {
                return a.a.Rb() ? new B(function() {
                }) : bl(a.g).then(function() {
                    return a.oa();
                }).then(function() {
                }).s(function() {
                });
            });
        });
    }
    function rl(a, b, c, d, e) {
        return a.a.Fb(d, function(f) {
            b.ja(c, null, f, e);
        }, nl.get());
    }
    var sl = {
    };
    function tl(a, b, c) {
        var d = b + ":" + c;
        sl[d] || (sl[d] = new dl(a, b, c));
        return sl[d];
    }
    function el() {
        this.b = null;
        this.f = [];
        this.c = [];
        this.a = null;
        this.i = this.g = !1;
    }
    el.prototype.reset = function() {
        this.b = null;
        this.a && (this.a.cancel(), this.a = null);
    };
    el.prototype.h = function(a, b) {
        if (a) {
            this.reset();
            this.g = !0;
            var c = a.c, d = a.b, e = a.a && "auth/web-storage-unsupported" == a.a.code, f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
            this.i = !(!e && !f);
            "unknown" != c || e || f ? a.a ? (ul(this, !0, null, a.a), D()) : b.Ba(c, d) ? vl(this, a, b) : E(new M("invalid-auth-event")) : (ul(this, !1, null, null), D());
        } else E(new M("invalid-auth-event"));
    };
    function kl(a) {
        a.g || (a.g = !0, ul(a, !1, null, null));
    }
    function wl(a) {
        a.g && !a.i && ul(a, !1, null, null);
    }
    function vl(a, b, c) {
        c = c.Ba(b.c, b.b);
        var d = b.g, e = b.f, f = b.i, g = b.R(), h = !!b.c.match(/Redirect$/);
        c(d, e, g, f).then(function(m) {
            ul(a, h, m, null);
        }).s(function(m) {
            ul(a, h, null, m);
        });
    }
    function xl(a, b) {
        a.b = function() {
            return E(b);
        };
        if (a.c.length) for(var c = 0; c < a.c.length; c++)a.c[c](b);
    }
    function yl(a, b) {
        a.b = function() {
            return D(b);
        };
        if (a.f.length) for(var c = 0; c < a.f.length; c++)a.f[c](b);
    }
    function ul(a, b, c, d) {
        b ? d ? xl(a, d) : yl(a, c) : yl(a, {
            user: null
        });
        a.f = [];
        a.c = [];
    }
    el.prototype.oa = function() {
        var a = this;
        return new B(function(b, c) {
            a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), zl(a));
        });
    };
    function zl(a) {
        var b = new M("timeout");
        a.a && a.a.cancel();
        a.a = od(ol.get()).then(function() {
            a.b || (a.g = !0, ul(a, !0, null, b));
        });
    }
    function fl() {
    }
    fl.prototype.h = function(a, b) {
        if (a) {
            var c = a.c, d = a.b;
            a.a ? (b.ja(a.c, null, a.a, a.b), D()) : b.Ba(c, d) ? Al(a, b) : E(new M("invalid-auth-event"));
        } else E(new M("invalid-auth-event"));
    };
    function Al(a, b) {
        var c = a.b, d = a.c;
        b.Ba(d, c)(a.g, a.f, a.R(), a.i).then(function(e) {
            b.ja(d, e, null, c);
        }).s(function(e) {
            b.ja(d, null, e, c);
        });
    }
    function Bl() {
        this.vb = !1;
        Object.defineProperty(this, "appVerificationDisabled", {
            get: function() {
                return this.vb;
            },
            set: function(a) {
                this.vb = a;
            },
            enumerable: !1
        });
    }
    function Cl(a, b) {
        this.a = b;
        K(this, "verificationId", a);
    }
    Cl.prototype.confirm = function(a) {
        a = Wg(this.verificationId, a);
        return this.a(a);
    };
    function Dl(a, b, c, d) {
        return new Ug(a).Wa(b, c).then(function(e) {
            return new Cl(e, d);
        });
    }
    function El(a) {
        var b = Tf(a);
        if (!(b && b.exp && b.auth_time && b.iat)) throw new M("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
        L(this, {
            token: a,
            expirationTime: Te(1000 * b.exp),
            authTime: Te(1000 * b.auth_time),
            issuedAtTime: Te(1000 * b.iat),
            signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,
            claims: b
        });
    }
    function Fl(a, b, c) {
        this.h = a;
        this.i = b;
        this.g = c;
        this.c = 30000;
        this.f = 960000;
        this.b = null;
        this.a = this.c;
        if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
    }
    Fl.prototype.start = function() {
        this.a = this.c;
        Gl(this, !0);
    };
    function Hl(a, b) {
        if (b) return a.a = a.c, a.g();
        b = a.a;
        a.a *= 2;
        a.a > a.f && (a.a = a.f);
        return b;
    }
    function Gl(a, b) {
        a.stop();
        a.b = od(Hl(a, b)).then(function() {
            return Se();
        }).then(function() {
            return a.h();
        }).then(function() {
            Gl(a, !0);
        }).s(function(c) {
            a.i(c) && Gl(a, !1);
        });
    }
    Fl.prototype.stop = function() {
        this.b && (this.b.cancel(), this.b = null);
    };
    function Il(a) {
        this.f = a;
        this.b = this.a = null;
        this.c = 0;
    }
    Il.prototype.A = function() {
        return {
            apiKey: this.f.c,
            refreshToken: this.a,
            accessToken: this.b,
            expirationTime: this.c
        };
    };
    function Jl(a, b) {
        var c = b[mg], d = b.refreshToken;
        b = Kl(b.expiresIn);
        a.b = c;
        a.c = b;
        a.a = d;
    }
    function Ll(a, b) {
        a.b = b.b;
        a.a = b.a;
        a.c = b.c;
    }
    function Kl(a) {
        return va() + 1000 * parseInt(a, 10);
    }
    function Ml(a, b) {
        return Ai(a.f, b).then(function(c) {
            a.b = c.access_token;
            a.c = Kl(c.expires_in);
            a.a = c.refresh_token;
            return {
                accessToken: a.b,
                expirationTime: a.c,
                refreshToken: a.a
            };
        }).s(function(c) {
            "auth/user-token-expired" == c.code && (a.a = null);
            throw c;
        });
    }
    Il.prototype.getToken = function(a) {
        a = !!a;
        return this.b && !this.a ? E(new M("user-token-expired")) : a || !this.b || va() > this.c - 30000 ? this.a ? Ml(this, {
            grant_type: "refresh_token",
            refresh_token: this.a
        }) : D(null) : D({
            accessToken: this.b,
            expirationTime: this.c,
            refreshToken: this.a
        });
    };
    function Nl(a, b) {
        this.a = a || null;
        this.b = b || null;
        L(this, {
            lastSignInTime: Te(b || null),
            creationTime: Te(a || null)
        });
    }
    function Ol(a) {
        return new Nl(a.a, a.b);
    }
    Nl.prototype.A = function() {
        return {
            lastLoginAt: this.b,
            createdAt: this.a
        };
    };
    function Pl(a, b, c, d, e, f) {
        L(this, {
            uid: a,
            displayName: d || null,
            photoURL: e || null,
            email: c || null,
            phoneNumber: f || null,
            providerId: b
        });
    }
    function Ql(a, b) {
        F.call(this, a);
        for(var c in b)this[c] = b[c];
    }
    v(Ql, F);
    function Q(a, b, c) {
        this.I = [];
        this.l = a.apiKey;
        this.m = a.appName;
        this.o = a.authDomain || null;
        a = _appDefault.default.SDK_VERSION ? Fe(_appDefault.default.SDK_VERSION) : null;
        this.a = new oi(this.l, Vf(Wf), a);
        this.b = new Il(this.a);
        Rl(this, b[mg]);
        Jl(this.b, b);
        K(this, "refreshToken", this.b.a);
        Sl(this, c || {
        });
        G.call(this);
        this.J = !1;
        this.o && Ie() && (this.i = tl(this.o, this.l, this.m));
        this.O = [];
        this.h = null;
        this.w = Tl(this);
        this.W = t(this.Ja, this);
        var d = this;
        this.ga = null;
        this.xa = function(e) {
            d.ua(e.g);
        };
        this.Z = null;
        this.P = [];
        this.wa = function(e) {
            Ul(d, e.c);
        };
        this.Y = null;
    }
    v(Q, G);
    Q.prototype.ua = function(a) {
        this.ga = a;
        ui(this.a, a);
    };
    Q.prototype.ha = function() {
        return this.ga;
    };
    function Vl(a, b) {
        a.Z && gd(a.Z, "languageCodeChanged", a.xa);
        (a.Z = b) && Xc(b, "languageCodeChanged", a.xa);
    }
    function Ul(a, b) {
        a.P = b;
        vi(a.a, _appDefault.default.SDK_VERSION ? Fe(_appDefault.default.SDK_VERSION, a.P) : null);
    }
    Q.prototype.Ca = function() {
        return Sa(this.P);
    };
    function Wl(a, b) {
        a.Y && gd(a.Y, "frameworkChanged", a.wa);
        (a.Y = b) && Xc(b, "frameworkChanged", a.wa);
    }
    Q.prototype.Ja = function() {
        this.w.b && (this.w.stop(), this.w.start());
    };
    function Xl(a) {
        try {
            return _appDefault.default.app(a.m).auth();
        } catch (b) {
            throw new M("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.m + "'!");
        }
    }
    function Tl(a) {
        return new Fl(function() {
            return a.G(!0);
        }, function(b) {
            return b && "auth/network-request-failed" == b.code ? !0 : !1;
        }, function() {
            var b = a.b.c - va() - 300000;
            return 0 < b ? b : 0;
        });
    }
    function Yl(a) {
        a.B || a.w.b || (a.w.start(), gd(a, "tokenChanged", a.W), Xc(a, "tokenChanged", a.W));
    }
    function Zl(a) {
        gd(a, "tokenChanged", a.W);
        a.w.stop();
    }
    function Rl(a, b) {
        a.ma = b;
        K(a, "_lat", b);
    }
    function $l(a, b) {
        Qa(a.O, function(c) {
            return c == b;
        });
    }
    function am(a) {
        for(var b = [], c = 0; c < a.O.length; c++)b.push(a.O[c](a));
        return cc(b).then(function() {
            return a;
        });
    }
    function bm(a) {
        a.i && !a.J && (a.J = !0, ll(a.i, a));
    }
    function Sl(a, b) {
        L(a, {
            uid: b.uid,
            displayName: b.displayName || null,
            photoURL: b.photoURL || null,
            email: b.email || null,
            emailVerified: b.emailVerified || !1,
            phoneNumber: b.phoneNumber || null,
            isAnonymous: b.isAnonymous || !1,
            tenantId: b.tenantId || null,
            metadata: new Nl(b.createdAt, b.lastLoginAt),
            providerData: []
        });
        a.a.b = a.tenantId;
    }
    K(Q.prototype, "providerId", "firebase");
    function cm() {
    }
    function dm(a) {
        return D().then(function() {
            if (a.B) throw new M("app-deleted");
        });
    }
    function em(a) {
        return Ka(a.providerData, function(b) {
            return b.providerId;
        });
    }
    function fm(a, b) {
        b && (gm(a, b.providerId), a.providerData.push(b));
    }
    function gm(a, b) {
        Qa(a.providerData, function(c) {
            return c.providerId == b;
        });
    }
    function hm(a, b, c) {
        ("uid" != b || c) && a.hasOwnProperty(b) && K(a, b, c);
    }
    function im(a, b) {
        a != b && (L(a, {
            uid: b.uid,
            displayName: b.displayName,
            photoURL: b.photoURL,
            email: b.email,
            emailVerified: b.emailVerified,
            phoneNumber: b.phoneNumber,
            isAnonymous: b.isAnonymous,
            tenantId: b.tenantId,
            providerData: []
        }), b.metadata ? K(a, "metadata", Ol(b.metadata)) : K(a, "metadata", new Nl), x(b.providerData, function(c) {
            fm(a, c);
        }), Ll(a.b, b.b), K(a, "refreshToken", a.b.a));
    }
    k = Q.prototype;
    k.reload = function() {
        var a = this;
        return R(this, dm(this).then(function() {
            return jm(a).then(function() {
                return am(a);
            }).then(cm);
        }));
    };
    function jm(a) {
        return a.G().then(function(b) {
            var c = a.isAnonymous;
            return km(a, b).then(function() {
                c || hm(a, "isAnonymous", !1);
                return b;
            });
        });
    }
    k.dc = function(a) {
        return this.G(a).then(function(b) {
            return new El(b);
        });
    };
    k.G = function(a) {
        var b = this;
        return R(this, dm(this).then(function() {
            return b.b.getToken(a);
        }).then(function(c) {
            if (!c) throw new M("internal-error");
            c.accessToken != b.ma && (Rl(b, c.accessToken), b.dispatchEvent(new Ql("tokenChanged")));
            hm(b, "refreshToken", c.refreshToken);
            return c.accessToken;
        }));
    };
    function lm(a, b) {
        b[mg] && a.ma != b[mg] && (Jl(a.b, b), a.dispatchEvent(new Ql("tokenChanged")), Rl(a, b[mg]), hm(a, "refreshToken", a.b.a));
    }
    function km(a, b) {
        return P(a.a, hj, {
            idToken: b
        }).then(t(a.zc, a));
    }
    k.zc = function(a) {
        a = a.users;
        if (!a || !a.length) throw new M("internal-error");
        a = a[0];
        Sl(this, {
            uid: a.localId,
            displayName: a.displayName,
            photoURL: a.photoUrl,
            email: a.email,
            emailVerified: !!a.emailVerified,
            phoneNumber: a.phoneNumber,
            lastLoginAt: a.lastLoginAt,
            createdAt: a.createdAt,
            tenantId: a.tenantId
        });
        for(var b = mm(a), c = 0; c < b.length; c++)fm(this, b[c]);
        hm(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
    };
    function mm(a) {
        return (a = a.providerUserInfo) && a.length ? Ka(a, function(b) {
            return new Pl(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);
        }) : [];
    }
    k.Ac = function(a) {
        Ye("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");
        return this.hb(a);
    };
    k.hb = function(a) {
        var b = this, c = null;
        return R(this, a.f(this.a, this.uid).then(function(d) {
            lm(b, d);
            c = nm(b, d, "reauthenticate");
            b.h = null;
            return b.reload();
        }).then(function() {
            return c;
        }), !0);
    };
    function om(a, b) {
        return jm(a).then(function() {
            if (Oa(em(a), b)) return am(a).then(function() {
                throw new M("provider-already-linked");
            });
        });
    }
    k.rc = function(a) {
        Ye("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");
        return this.fb(a);
    };
    k.fb = function(a) {
        var b = this, c = null;
        return R(this, om(this, a.providerId).then(function() {
            return b.G();
        }).then(function(d) {
            return a.b(b.a, d);
        }).then(function(d) {
            c = nm(b, d, "link");
            return pm(b, d);
        }).then(function() {
            return c;
        }));
    };
    k.sc = function(a, b) {
        var c = this;
        return R(this, om(this, "phone").then(function() {
            return Dl(Xl(c), a, b, t(c.fb, c));
        }));
    };
    k.Bc = function(a, b) {
        var c = this;
        return R(this, D().then(function() {
            return Dl(Xl(c), a, b, t(c.hb, c));
        }), !0);
    };
    function nm(a, b, c) {
        var d = Xg(b);
        b = ag(b);
        return af({
            user: a,
            credential: d,
            additionalUserInfo: b,
            operationType: c
        });
    }
    function pm(a, b) {
        lm(a, b);
        return a.reload().then(function() {
            return a;
        });
    }
    k.rb = function(a) {
        var b = this;
        return R(this, this.G().then(function(c) {
            return b.a.rb(c, a);
        }).then(function(c) {
            lm(b, c);
            return b.reload();
        }));
    };
    k.Sc = function(a) {
        var b = this;
        return R(this, this.G().then(function(c) {
            return a.b(b.a, c);
        }).then(function(c) {
            lm(b, c);
            return b.reload();
        }));
    };
    k.sb = function(a) {
        var b = this;
        return R(this, this.G().then(function(c) {
            return b.a.sb(c, a);
        }).then(function(c) {
            lm(b, c);
            return b.reload();
        }));
    };
    k.tb = function(a) {
        if ((void 0) === a.displayName && (void 0) === a.photoURL) return dm(this);
        var b = this;
        return R(this, this.G().then(function(c) {
            return b.a.tb(c, {
                displayName: a.displayName,
                photoUrl: a.photoURL
            });
        }).then(function(c) {
            lm(b, c);
            hm(b, "displayName", c.displayName || null);
            hm(b, "photoURL", c.photoUrl || null);
            x(b.providerData, function(d) {
                "password" === d.providerId && (K(d, "displayName", b.displayName), K(d, "photoURL", b.photoURL));
            });
            return am(b);
        }).then(cm));
    };
    k.Qc = function(a) {
        var b = this;
        return R(this, jm(this).then(function(c) {
            return Oa(em(b), a) ? Ti(b.a, c, [
                a
            ]).then(function(d) {
                var e = {
                };
                x(d.providerUserInfo || [], function(f) {
                    e[f.providerId] = !0;
                });
                x(em(b), function(f) {
                    e[f] || gm(b, f);
                });
                e[Ug.PROVIDER_ID] || K(b, "phoneNumber", null);
                return am(b);
            }) : am(b).then(function() {
                throw new M("no-such-provider");
            });
        }));
    };
    k.delete = function() {
        var a = this;
        return R(this, this.G().then(function(b) {
            return P(a.a, gj, {
                idToken: b
            });
        }).then(function() {
            a.dispatchEvent(new Ql("userDeleted"));
        })).then(function() {
            for(var b = 0; b < a.I.length; b++)a.I[b].cancel("app-deleted");
            Vl(a, null);
            Wl(a, null);
            a.I = [];
            a.B = !0;
            Zl(a);
            K(a, "refreshToken", null);
            a.i && ml(a.i, a);
        });
    };
    k.xb = function(a, b) {
        return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.ca || null) == b || "reauthViaRedirect" == a && (this.ca || null) == b ? !0 : !1;
    };
    k.ja = function(a, b, c, d) {
        "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.v);
    };
    k.Ba = function(a, b) {
        return "linkViaPopup" == a && b == (this.g || null) ? t(this.Bb, this) : "reauthViaPopup" == a && b == (this.g || null) ? t(this.Cb, this) : "linkViaRedirect" == a && (this.ca || null) == b ? t(this.Bb, this) : "reauthViaRedirect" == a && (this.ca || null) == b ? t(this.Cb, this) : null;
    };
    k.tc = function(a) {
        var b = this;
        return qm(this, "linkViaPopup", a, function() {
            return om(b, a.providerId).then(function() {
                return am(b);
            });
        }, !1);
    };
    k.Cc = function(a) {
        return qm(this, "reauthViaPopup", a, function() {
            return D();
        }, !0);
    };
    function qm(a, b, c, d, e) {
        if (!Ie()) return E(new M("operation-not-supported-in-this-environment"));
        if (a.h && !e) return E(a.h);
        var f = $f(c.providerId), g = He(a.uid + ":::"), h = null;
        (!Ke() || ze()) && a.o && c.isOAuthProvider && (h = Cj(a.o, a.l, a.m, b, c, null, g, _appDefault.default.SDK_VERSION || null, null, null, a.tenantId));
        var m = qe(h, f && f.sa, f && f.ra);
        d = d().then(function() {
            rm(a);
            if (!e) return a.G().then(function() {
            });
        }).then(function() {
            return pl(a.i, m, b, c, g, !!h, a.tenantId);
        }).then(function() {
            return new B(function(p, u) {
                a.ja(b, null, new M("cancelled-popup-request"), a.g || null);
                a.f = p;
                a.v = u;
                a.g = g;
                a.c = rl(a.i, a, b, m, g);
            });
        }).then(function(p) {
            m && pe(m);
            return p ? af(p) : null;
        }).s(function(p) {
            m && pe(m);
            throw p;
        });
        return R(a, d, e);
    }
    k.uc = function(a) {
        var b = this;
        return sm(this, "linkViaRedirect", a, function() {
            return om(b, a.providerId);
        }, !1);
    };
    k.Dc = function(a) {
        return sm(this, "reauthViaRedirect", a, function() {
            return D();
        }, !0);
    };
    function sm(a, b, c, d, e) {
        if (!Ie()) return E(new M("operation-not-supported-in-this-environment"));
        if (a.h && !e) return E(a.h);
        var f = null, g = He(a.uid + ":::");
        d = d().then(function() {
            rm(a);
            if (!e) return a.G().then(function() {
            });
        }).then(function() {
            a.ca = g;
            return am(a);
        }).then(function(h) {
            a.da && (h = a.da, h = h.b.set(tm, a.A(), h.a));
            return h;
        }).then(function() {
            return ql(a.i, b, c, g, a.tenantId);
        }).s(function(h) {
            f = h;
            if (a.da) return um(a.da);
            throw f;
        }).then(function() {
            if (f) throw f;
        });
        return R(a, d, e);
    }
    function rm(a) {
        if (!a.i || !a.J) {
            if (a.i && !a.J) throw new M("internal-error");
            throw new M("auth-domain-config-required");
        }
    }
    k.Bb = function(a, b, c, d) {
        var e = this;
        this.c && (this.c.cancel(), this.c = null);
        var f = null;
        c = this.G().then(function(g) {
            return qg(e.a, {
                requestUri: a,
                postBody: d,
                sessionId: b,
                idToken: g
            });
        }).then(function(g) {
            f = nm(e, g, "link");
            return pm(e, g);
        }).then(function() {
            return f;
        });
        return R(this, c);
    };
    k.Cb = function(a, b, c, d) {
        var e = this;
        this.c && (this.c.cancel(), this.c = null);
        var f = null, g = D().then(function() {
            return lg(rg(e.a, {
                requestUri: a,
                sessionId: b,
                postBody: d,
                tenantId: c
            }), e.uid);
        }).then(function(h) {
            f = nm(e, h, "reauthenticate");
            lm(e, h);
            e.h = null;
            return e.reload();
        }).then(function() {
            return f;
        });
        return R(this, g, !0);
    };
    k.jb = function(a) {
        var b = this, c = null;
        return R(this, this.G().then(function(d) {
            c = d;
            return "undefined" === typeof a || Ua(a) ? {
            } : Kf(new Af(a));
        }).then(function(d) {
            return b.a.jb(c, d);
        }).then(function(d) {
            if (b.email != d) return b.reload();
        }).then(function() {
        }));
    };
    function R(a, b, c) {
        var d = vm(a, b, c);
        a.I.push(d);
        d.ka(function() {
            Pa(a.I, d);
        });
        return d;
    }
    function vm(a, b, c) {
        return a.h && !c ? (b.cancel(), E(a.h)) : b.s(function(d) {
            !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.h || a.dispatchEvent(new Ql("userInvalidated")), a.h = d);
            throw d;
        });
    }
    k.toJSON = function() {
        return this.A();
    };
    k.A = function() {
        var a = {
            uid: this.uid,
            displayName: this.displayName,
            photoURL: this.photoURL,
            email: this.email,
            emailVerified: this.emailVerified,
            phoneNumber: this.phoneNumber,
            isAnonymous: this.isAnonymous,
            tenantId: this.tenantId,
            providerData: [],
            apiKey: this.l,
            appName: this.m,
            authDomain: this.o,
            stsTokenManager: this.b.A(),
            redirectEventId: this.ca || null
        };
        this.metadata && Xa(a, this.metadata.A());
        x(this.providerData, function(b) {
            a.providerData.push(bf(b));
        });
        return a;
    };
    function wm(a) {
        if (!a.apiKey) return null;
        var b = {
            apiKey: a.apiKey,
            authDomain: a.authDomain,
            appName: a.appName
        }, c = {
        };
        if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c[mg] = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - va()) / 1000;
        else return null;
        var d = new Q(b, c, a);
        a.providerData && x(a.providerData, function(e) {
            e && fm(d, af(e));
        });
        a.redirectEventId && (d.ca = a.redirectEventId);
        return d;
    }
    function xm(a, b, c, d) {
        var e = new Q(a, b);
        c && (e.da = c);
        d && Ul(e, d);
        return e.reload().then(function() {
            return e;
        });
    }
    function ym(a, b, c, d) {
        b = b || {
            apiKey: a.l,
            authDomain: a.o,
            appName: a.m
        };
        var e = a.b, f = {
        };
        f[mg] = e.b;
        f.refreshToken = e.a;
        f.expiresIn = (e.c - va()) / 1000;
        b = new Q(b, f);
        c && (b.da = c);
        d && Ul(b, d);
        im(b, a);
        return b;
    }
    function zm(a) {
        this.a = a;
        this.b = sk();
    }
    var tm = {
        name: "redirectUser",
        C: "session"
    };
    function um(a) {
        return wk(a.b, tm, a.a);
    }
    function Am(a, b) {
        return a.b.get(tm, a.a).then(function(c) {
            c && b && (c.authDomain = b);
            return wm(c || {
            });
        });
    }
    function Bm(a) {
        this.a = a;
        this.b = sk();
        this.c = null;
        this.f = Cm(this);
        this.b.addListener(Dm("local"), this.a, t(this.g, this));
    }
    Bm.prototype.g = function() {
        var a = this, b = Dm("local");
        Em(this, function() {
            return D().then(function() {
                return a.c && "local" != a.c.C ? a.b.get(b, a.a) : null;
            }).then(function(c) {
                if (c) return Fm(a, "local").then(function() {
                    a.c = b;
                });
            });
        });
    };
    function Fm(a, b) {
        var c = [], d;
        for(d in ok)ok[d] !== b && c.push(wk(a.b, Dm(ok[d]), a.a));
        c.push(wk(a.b, Gm, a.a));
        return bc(c);
    }
    function Cm(a) {
        var b = Dm("local"), c = Dm("session"), d = Dm("none");
        return vk(a.b, b, a.a).then(function() {
            return a.b.get(c, a.a);
        }).then(function(e) {
            return e ? c : a.b.get(d, a.a).then(function(f) {
                return f ? d : a.b.get(b, a.a).then(function(g) {
                    return g ? b : a.b.get(Gm, a.a).then(function(h) {
                        return h ? Dm(h) : b;
                    });
                });
            });
        }).then(function(e) {
            a.c = e;
            return Fm(a, e.C);
        }).s(function() {
            a.c || (a.c = b);
        });
    }
    var Gm = {
        name: "persistence",
        C: "session"
    };
    function Dm(a) {
        return {
            name: "authUser",
            C: a
        };
    }
    Bm.prototype.mb = function(a) {
        var b = null, c = this;
        pk(a);
        return Em(this, function() {
            return a != c.c.C ? c.b.get(c.c, c.a).then(function(d) {
                b = d;
                return Fm(c, a);
            }).then(function() {
                c.c = Dm(a);
                if (b) return c.b.set(c.c, b, c.a);
            }) : D();
        });
    };
    function Hm(a) {
        return Em(a, function() {
            return a.b.set(Gm, a.c.C, a.a);
        });
    }
    function Im(a, b) {
        return Em(a, function() {
            return a.b.set(a.c, b.A(), a.a);
        });
    }
    function Jm(a) {
        return Em(a, function() {
            return wk(a.b, a.c, a.a);
        });
    }
    function Km(a, b) {
        return Em(a, function() {
            return a.b.get(a.c, a.a).then(function(c) {
                c && b && (c.authDomain = b);
                return wm(c || {
                });
            });
        });
    }
    function Em(a, b) {
        a.f = a.f.then(b, b);
        return a.f;
    }
    function Lm(a) {
        this.l = !1;
        K(this, "settings", new Bl);
        K(this, "app", a);
        if (S(this).options && S(this).options.apiKey) a = _appDefault.default.SDK_VERSION ? Fe(_appDefault.default.SDK_VERSION) : null, this.b = new oi(S(this).options && S(this).options.apiKey, Vf(Wf), a);
        else throw new M("invalid-api-key");
        this.O = [];
        this.m = [];
        this.J = [];
        this.Ub = _appDefault.default.INTERNAL.createSubscribe(t(this.oc, this));
        this.W = void 0;
        this.Vb = _appDefault.default.INTERNAL.createSubscribe(t(this.pc, this));
        Mm(this, null);
        this.h = new Bm(S(this).options.apiKey + ":" + S(this).name);
        this.w = new zm(S(this).options.apiKey + ":" + S(this).name);
        this.Y = T(this, Nm(this));
        this.i = T(this, Om(this));
        this.ga = !1;
        this.ma = t(this.Nc, this);
        this.ub = t(this.aa, this);
        this.wa = t(this.bc, this);
        this.xa = t(this.mc, this);
        this.Ja = t(this.nc, this);
        this.a = null;
        Pm(this);
        this.INTERNAL = {
        };
        this.INTERNAL["delete"] = t(this.delete, this);
        this.INTERNAL.logFramework = t(this.vc, this);
        this.o = 0;
        G.call(this);
        Qm(this);
        this.I = [];
    }
    v(Lm, G);
    function Rm(a) {
        F.call(this, "languageCodeChanged");
        this.g = a;
    }
    v(Rm, F);
    function Sm(a) {
        F.call(this, "frameworkChanged");
        this.c = a;
    }
    v(Sm, F);
    k = Lm.prototype;
    k.mb = function(a) {
        a = this.h.mb(a);
        return T(this, a);
    };
    k.ua = function(a) {
        this.Z === a || this.l || (this.Z = a, ui(this.b, this.Z), this.dispatchEvent(new Rm(this.ha())));
    };
    k.ha = function() {
        return this.Z;
    };
    k.Tc = function() {
        var a = l.navigator;
        this.ua(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
    };
    k.vc = function(a) {
        this.I.push(a);
        vi(this.b, _appDefault.default.SDK_VERSION ? Fe(_appDefault.default.SDK_VERSION, this.I) : null);
        this.dispatchEvent(new Sm(this.I));
    };
    k.Ca = function() {
        return Sa(this.I);
    };
    k.nb = function(a) {
        this.P === a || this.l || (this.P = a, this.b.b = this.P);
    };
    k.R = function() {
        return this.P;
    };
    function Qm(a) {
        Object.defineProperty(a, "lc", {
            get: function() {
                return this.ha();
            },
            set: function(b) {
                this.ua(b);
            },
            enumerable: !1
        });
        a.Z = null;
        Object.defineProperty(a, "ti", {
            get: function() {
                return this.R();
            },
            set: function(b) {
                this.nb(b);
            },
            enumerable: !1
        });
        a.P = null;
    }
    k.toJSON = function() {
        return {
            apiKey: S(this).options.apiKey,
            authDomain: S(this).options.authDomain,
            appName: S(this).name,
            currentUser: U(this) && U(this).A()
        };
    };
    function Tm(a) {
        return a.Tb || E(new M("auth-domain-config-required"));
    }
    function Pm(a) {
        var b = S(a).options.authDomain, c = S(a).options.apiKey;
        b && Ie() && (a.Tb = a.Y.then(function() {
            if (!a.l) {
                a.a = tl(b, c, S(a).name);
                ll(a.a, a);
                U(a) && bm(U(a));
                if (a.B) {
                    bm(a.B);
                    var d = a.B;
                    d.ua(a.ha());
                    Vl(d, a);
                    d = a.B;
                    Ul(d, a.I);
                    Wl(d, a);
                    a.B = null;
                }
                return a.a;
            }
        }));
    }
    k.xb = function(a, b) {
        switch(a){
            case "unknown":
            case "signInViaRedirect":
                return !0;
            case "signInViaPopup":
                return this.g == b && !!this.f;
            default:
                return !1;
        }
    };
    k.ja = function(a, b, c, d) {
        "signInViaPopup" == a && this.g == d && (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.v);
    };
    k.Ba = function(a, b) {
        return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? t(this.ac, this) : null;
    };
    k.ac = function(a, b, c, d) {
        var e = this;
        a = {
            requestUri: a,
            postBody: d,
            sessionId: b,
            tenantId: c
        };
        this.c && (this.c.cancel(), this.c = null);
        var f = null, g = null, h = og(e.b, a).then(function(m) {
            f = Xg(m);
            g = ag(m);
            return m;
        });
        a = e.Y.then(function() {
            return h;
        }).then(function(m) {
            return Um(e, m);
        }).then(function() {
            return af({
                user: U(e),
                credential: f,
                additionalUserInfo: g,
                operationType: "signIn"
            });
        });
        return T(this, a);
    };
    k.Lc = function(a) {
        if (!Ie()) return E(new M("operation-not-supported-in-this-environment"));
        var b = this, c = $f(a.providerId), d = He(), e = null;
        (!Ke() || ze()) && S(this).options.authDomain && a.isOAuthProvider && (e = Cj(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, _appDefault.default.SDK_VERSION || null, null, null, this.R()));
        var f = qe(e, c && c.sa, c && c.ra);
        c = Tm(this).then(function(g) {
            return pl(g, f, "signInViaPopup", a, d, !!e, b.R());
        }).then(function() {
            return new B(function(g, h) {
                b.ja("signInViaPopup", null, new M("cancelled-popup-request"), b.g);
                b.f = g;
                b.v = h;
                b.g = d;
                b.c = rl(b.a, b, "signInViaPopup", f, d);
            });
        }).then(function(g) {
            f && pe(f);
            return g ? af(g) : null;
        }).s(function(g) {
            f && pe(f);
            throw g;
        });
        return T(this, c);
    };
    k.Mc = function(a) {
        if (!Ie()) return E(new M("operation-not-supported-in-this-environment"));
        var b = this, c = Tm(this).then(function() {
            return Hm(b.h);
        }).then(function() {
            return ql(b.a, "signInViaRedirect", a, void 0, b.R());
        });
        return T(this, c);
    };
    function Vm(a) {
        if (!Ie()) return E(new M("operation-not-supported-in-this-environment"));
        var b = Tm(a).then(function() {
            return a.a.oa();
        }).then(function(c) {
            return c ? af(c) : null;
        });
        return T(a, b);
    }
    k.oa = function() {
        var a = this;
        return Vm(this).then(function(b) {
            a.a && wl(a.a.b);
            return b;
        }).s(function(b) {
            a.a && wl(a.a.b);
            throw b;
        });
    };
    k.Rc = function(a) {
        if (!a) return E(new M("null-user"));
        if (this.P != a.tenantId) return E(new M("tenant-id-mismatch"));
        var b = this, c = {
        };
        c.apiKey = S(this).options.apiKey;
        c.authDomain = S(this).options.authDomain;
        c.appName = S(this).name;
        var d = ym(a, c, b.w, b.Ca());
        return T(this, this.i.then(function() {
            if (S(b).options.apiKey != a.l) return d.reload();
        }).then(function() {
            if (U(b) && a.uid == U(b).uid) return im(U(b), a), b.aa(a);
            Mm(b, d);
            bm(d);
            return b.aa(d);
        }).then(function() {
            Wm(b);
        }));
    };
    function Um(a, b) {
        var c = {
        };
        c.apiKey = S(a).options.apiKey;
        c.authDomain = S(a).options.authDomain;
        c.appName = S(a).name;
        return a.Y.then(function() {
            return xm(c, b, a.w, a.Ca());
        }).then(function(d) {
            if (U(a) && d.uid == U(a).uid) return im(U(a), d), a.aa(d);
            Mm(a, d);
            bm(d);
            return a.aa(d);
        }).then(function() {
            Wm(a);
        });
    }
    function Mm(a, b) {
        U(a) && ($l(U(a), a.ub), gd(U(a), "tokenChanged", a.wa), gd(U(a), "userDeleted", a.xa), gd(U(a), "userInvalidated", a.Ja), Zl(U(a)));
        b && (b.O.push(a.ub), Xc(b, "tokenChanged", a.wa), Xc(b, "userDeleted", a.xa), Xc(b, "userInvalidated", a.Ja), 0 < a.o && Yl(b));
        K(a, "currentUser", b);
        b && (b.ua(a.ha()), Vl(b, a), Ul(b, a.I), Wl(b, a));
    }
    k.pb = function() {
        var a = this, b = this.i.then(function() {
            a.a && wl(a.a.b);
            if (!U(a)) return D();
            Mm(a, null);
            return Jm(a.h).then(function() {
                Wm(a);
            });
        });
        return T(this, b);
    };
    function Xm(a) {
        var b = Am(a.w, S(a).options.authDomain).then(function(c) {
            if (a.B = c) c.da = a.w;
            return um(a.w);
        });
        return T(a, b);
    }
    function Nm(a) {
        var b = S(a).options.authDomain, c = Xm(a).then(function() {
            return Km(a.h, b);
        }).then(function(d) {
            return d ? (d.da = a.w, a.B && (a.B.ca || null) == (d.ca || null) ? d : d.reload().then(function() {
                return Im(a.h, d).then(function() {
                    return d;
                });
            }).s(function(e) {
                return "auth/network-request-failed" == e.code ? d : Jm(a.h);
            })) : null;
        }).then(function(d) {
            Mm(a, d || null);
        });
        return T(a, c);
    }
    function Om(a) {
        return a.Y.then(function() {
            return Vm(a);
        }).s(function() {
        }).then(function() {
            if (!a.l) return a.ma();
        }).s(function() {
        }).then(function() {
            if (!a.l) {
                a.ga = !0;
                var b = a.h;
                b.b.addListener(Dm("local"), b.a, a.ma);
            }
        });
    }
    k.Nc = function() {
        var a = this;
        return Km(this.h, S(this).options.authDomain).then(function(b) {
            if (!a.l) {
                var c;
                if (c = U(a) && b) {
                    c = U(a).uid;
                    var d = b.uid;
                    c = (void 0) === c || null === c || "" === c || (void 0) === d || null === d || "" === d ? !1 : c == d;
                }
                if (c) return im(U(a), b), U(a).G();
                if (U(a) || b) Mm(a, b), b && (bm(b), b.da = a.w), a.a && ll(a.a, a), Wm(a);
            }
        });
    };
    k.aa = function(a) {
        return Im(this.h, a);
    };
    k.bc = function() {
        Wm(this);
        this.aa(U(this));
    };
    k.mc = function() {
        this.pb();
    };
    k.nc = function() {
        this.pb();
    };
    function Ym(a, b) {
        var c = null, d = null;
        return T(a, b.then(function(e) {
            c = Xg(e);
            d = ag(e);
            return Um(a, e);
        }).then(function() {
            return af({
                user: U(a),
                credential: c,
                additionalUserInfo: d,
                operationType: "signIn"
            });
        }));
    }
    k.oc = function(a) {
        var b = this;
        this.addAuthTokenListener(function() {
            a.next(U(b));
        });
    };
    k.pc = function(a) {
        var b = this;
        Zm(this, function() {
            a.next(U(b));
        });
    };
    k.xc = function(a, b, c) {
        var d = this;
        this.ga && Promise.resolve().then(function() {
            q(a) ? a(U(d)) : q(a.next) && a.next(U(d));
        });
        return this.Ub(a, b, c);
    };
    k.wc = function(a, b, c) {
        var d = this;
        this.ga && Promise.resolve().then(function() {
            d.W = d.getUid();
            q(a) ? a(U(d)) : q(a.next) && a.next(U(d));
        });
        return this.Vb(a, b, c);
    };
    k.cc = function(a) {
        var b = this, c = this.i.then(function() {
            return U(b) ? U(b).G(a).then(function(d) {
                return {
                    accessToken: d
                };
            }) : null;
        });
        return T(this, c);
    };
    k.Hc = function(a) {
        var b = this;
        return this.i.then(function() {
            return Ym(b, P(b.b, jj, {
                token: a
            }));
        }).then(function(c) {
            var d = c.user;
            hm(d, "isAnonymous", !1);
            b.aa(d);
            return c;
        });
    };
    k.Ic = function(a, b) {
        var c = this;
        return this.i.then(function() {
            return Ym(c, P(c.b, Jg, {
                email: a,
                password: b
            }));
        });
    };
    k.Xb = function(a, b) {
        var c = this;
        return this.i.then(function() {
            return Ym(c, P(c.b, fj, {
                email: a,
                password: b
            }));
        });
    };
    k.Sa = function(a) {
        var b = this;
        return this.i.then(function() {
            return Ym(b, a.na(b.b));
        });
    };
    k.Gc = function(a) {
        Ye("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");
        return this.Sa(a);
    };
    k.ob = function() {
        var a = this;
        return this.i.then(function() {
            var b = U(a);
            if (b && b.isAnonymous) {
                var c = af({
                    providerId: null,
                    isNewUser: !1
                });
                return af({
                    user: b,
                    credential: null,
                    additionalUserInfo: c,
                    operationType: "signIn"
                });
            }
            return Ym(a, a.b.ob()).then(function(d) {
                var e = d.user;
                hm(e, "isAnonymous", !0);
                a.aa(e);
                return d;
            });
        });
    };
    function S(a) {
        return a.app;
    }
    function U(a) {
        return a.currentUser;
    }
    k.getUid = function() {
        return U(this) && U(this).uid || null;
    };
    function $m(a) {
        return U(a) && U(a)._lat || null;
    }
    function Wm(a) {
        if (a.ga) {
            for(var b = 0; b < a.m.length; b++)if (a.m[b]) a.m[b]($m(a));
            if (a.W !== a.getUid() && a.J.length) for(a.W = a.getUid(), b = 0; b < a.J.length; b++)if (a.J[b]) a.J[b]($m(a));
        }
    }
    k.Wb = function(a) {
        this.addAuthTokenListener(a);
        this.o++;
        0 < this.o && U(this) && Yl(U(this));
    };
    k.Ec = function(a) {
        var b = this;
        x(this.m, function(c) {
            c == a && b.o--;
        });
        0 > this.o && (this.o = 0);
        0 == this.o && U(this) && Zl(U(this));
        this.removeAuthTokenListener(a);
    };
    k.addAuthTokenListener = function(a) {
        var b = this;
        this.m.push(a);
        T(this, this.i.then(function() {
            b.l || Oa(b.m, a) && a($m(b));
        }));
    };
    k.removeAuthTokenListener = function(a) {
        Qa(this.m, function(b) {
            return b == a;
        });
    };
    function Zm(a, b) {
        a.J.push(b);
        T(a, a.i.then(function() {
            !a.l && Oa(a.J, b) && a.W !== a.getUid() && (a.W = a.getUid(), b($m(a)));
        }));
    }
    k.delete = function() {
        this.l = !0;
        for(var a = 0; a < this.O.length; a++)this.O[a].cancel("app-deleted");
        this.O = [];
        this.h && (a = this.h, a.b.removeListener(Dm("local"), a.a, this.ma));
        this.a && (ml(this.a, this), wl(this.a.b));
        return Promise.resolve();
    };
    function T(a, b) {
        a.O.push(b);
        b.ka(function() {
            Pa(a.O, b);
        });
        return b;
    }
    k.$b = function(a) {
        return T(this, Fi(this.b, a));
    };
    k.qc = function(a) {
        return !!Og(a);
    };
    k.lb = function(a, b) {
        var c = this;
        return T(this, D().then(function() {
            var d = new Af(b);
            if (!d.c) throw new M("argument-error", If + " must be true when sending sign in link to email");
            return Kf(d);
        }).then(function(d) {
            return c.b.lb(a, d);
        }).then(function() {
        }));
    };
    k.Uc = function(a) {
        return this.Ma(a).then(function(b) {
            return b.data.email;
        });
    };
    k.ab = function(a, b) {
        return T(this, this.b.ab(a, b).then(function() {
        }));
    };
    k.Ma = function(a) {
        return T(this, this.b.Ma(a).then(function(b) {
            return new ef(b);
        }));
    };
    k.Ya = function(a) {
        return T(this, this.b.Ya(a).then(function() {
        }));
    };
    k.kb = function(a, b) {
        var c = this;
        return T(this, D().then(function() {
            return "undefined" === typeof b || Ua(b) ? {
            } : Kf(new Af(b));
        }).then(function(d) {
            return c.b.kb(a, d);
        }).then(function() {
        }));
    };
    k.Kc = function(a, b) {
        return T(this, Dl(this, a, b, t(this.Sa, this)));
    };
    k.Jc = function(a, b) {
        var c = this;
        return T(this, D().then(function() {
            var d = b || ie(), e = Ng(a, d);
            d = Og(d);
            if (!d) throw new M("argument-error", "Invalid email link!");
            if (d.tenantId !== c.R()) throw new M("tenant-id-mismatch");
            return c.Sa(e);
        }));
    };
    function an() {
    }
    an.prototype.render = function() {
    };
    an.prototype.reset = function() {
    };
    an.prototype.getResponse = function() {
    };
    an.prototype.execute = function() {
    };
    function bn() {
        this.a = {
        };
        this.b = 1000000000000;
    }
    var cn = null;
    bn.prototype.render = function(a, b) {
        this.a[this.b.toString()] = new dn(a, b);
        return this.b++;
    };
    bn.prototype.reset = function(a) {
        var b = en(this, a);
        a = fn(a);
        b && a && (b.delete(), delete this.a[a]);
    };
    bn.prototype.getResponse = function(a) {
        return (a = en(this, a)) ? a.getResponse() : null;
    };
    bn.prototype.execute = function(a) {
        (a = en(this, a)) && a.execute();
    };
    function en(a, b) {
        return (b = fn(b)) ? a.a[b] || null : null;
    }
    function fn(a) {
        return (a = "undefined" === typeof a ? 1000000000000 : a) ? a.toString() : null;
    }
    function dn(a, b) {
        this.g = !1;
        this.c = b;
        this.a = this.b = null;
        this.h = "invisible" !== this.c.size;
        this.f = Wd(a);
        var c = this;
        this.i = function() {
            c.execute();
        };
        this.h ? this.execute() : Xc(this.f, "click", this.i);
    }
    dn.prototype.getResponse = function() {
        gn(this);
        return this.b;
    };
    dn.prototype.execute = function() {
        gn(this);
        var a = this;
        this.a || (this.a = setTimeout(function() {
            a.b = De();
            var b = a.c.callback, c = a.c["expired-callback"];
            if (b) try {
                b(a.b);
            } catch (d) {
            }
            a.a = setTimeout(function() {
                a.a = null;
                a.b = null;
                if (c) try {
                    c();
                } catch (d) {
                }
                a.h && a.execute();
            }, 60000);
        }, 500));
    };
    dn.prototype.delete = function() {
        gn(this);
        this.g = !0;
        clearTimeout(this.a);
        this.a = null;
        gd(this.f, "click", this.i);
    };
    function gn(a) {
        if (a.g) throw Error("reCAPTCHA mock was already deleted!");
    }
    function hn() {
    }
    hn.prototype.g = function() {
        cn || (cn = new bn);
        return D(cn);
    };
    hn.prototype.c = function() {
    };
    var jn = null;
    function kn() {
        this.b = l.grecaptcha ? Infinity : 0;
        this.f = null;
        this.a = "__rcb" + Math.floor(1000000 * Math.random()).toString();
    }
    var ln = new Ya(Za, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"), mn = new Qe(30000, 60000);
    kn.prototype.g = function(a) {
        var b = this;
        return new B(function(c, d) {
            var e = setTimeout(function() {
                d(new M("network-request-failed"));
            }, mn.get());
            if (!l.grecaptcha || a !== b.f && !b.b) {
                l[b.a] = function() {
                    if (l.grecaptcha) {
                        b.f = a;
                        var g = l.grecaptcha.render;
                        l.grecaptcha.render = function(h, m) {
                            h = g(h, m);
                            b.b++;
                            return h;
                        };
                        clearTimeout(e);
                        c(l.grecaptcha);
                    } else clearTimeout(e), d(new M("internal-error"));
                    delete l[b.a];
                };
                var f = fb(ln, {
                    onload: b.a,
                    hl: a || ""
                });
                D(hi(f)).s(function() {
                    clearTimeout(e);
                    d(new M("internal-error", "Unable to load external reCAPTCHA dependencies!"));
                });
            } else clearTimeout(e), c(l.grecaptcha);
        });
    };
    kn.prototype.c = function() {
        this.b--;
    };
    var nn = null;
    function on(a, b, c, d, e, f, g) {
        K(this, "type", "recaptcha");
        this.c = this.f = null;
        this.B = !1;
        this.u = b;
        this.g = null;
        g ? (jn || (jn = new hn), g = jn) : (nn || (nn = new kn), g = nn);
        this.m = g;
        this.a = c || {
            theme: "light",
            type: "image"
        };
        this.h = [];
        if (this.a[pn]) throw new M("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
        this.i = "invisible" === this.a[qn];
        if (!l.document) throw new M("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
        if (!Wd(b) || !this.i && Wd(b).hasChildNodes()) throw new M("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
        this.o = new oi(a, f || null, e || null);
        this.v = d || function() {
            return null;
        };
        var h = this;
        this.l = [];
        var m = this.a[rn];
        this.a[rn] = function(u) {
            sn(h, u);
            if ("function" === typeof m) m(u);
            else if ("string" === typeof m) {
                var A = J(m, l);
                "function" === typeof A && A(u);
            }
        };
        var p = this.a[tn];
        this.a[tn] = function() {
            sn(h, null);
            if ("function" === typeof p) p();
            else if ("string" === typeof p) {
                var u = J(p, l);
                "function" === typeof u && u();
            }
        };
    }
    var rn = "callback", tn = "expired-callback", pn = "sitekey", qn = "size";
    function sn(a, b) {
        for(var c = 0; c < a.l.length; c++)try {
            a.l[c](b);
        } catch (d) {
        }
    }
    function un(a, b) {
        Qa(a.l, function(c) {
            return c == b;
        });
    }
    function vn(a, b) {
        a.h.push(b);
        b.ka(function() {
            Pa(a.h, b);
        });
        return b;
    }
    k = on.prototype;
    k.Da = function() {
        var a = this;
        return this.f ? this.f : this.f = vn(this, D().then(function() {
            if (Je() && !Ae()) return ve();
            throw new M("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
        }).then(function() {
            return a.m.g(a.v());
        }).then(function(b) {
            a.g = b;
            return P(a.o, ij, {
            });
        }).then(function(b) {
            a.a[pn] = b.recaptchaSiteKey;
        }).s(function(b) {
            a.f = null;
            throw b;
        }));
    };
    k.render = function() {
        wn(this);
        var a = this;
        return vn(this, this.Da().then(function() {
            if (null === a.c) {
                var b = a.u;
                if (!a.i) {
                    var c = Wd(b);
                    b = Zd("DIV");
                    c.appendChild(b);
                }
                a.c = a.g.render(b, a.a);
            }
            return a.c;
        }));
    };
    k.verify = function() {
        wn(this);
        var a = this;
        return vn(this, this.render().then(function(b) {
            return new B(function(c) {
                var d = a.g.getResponse(b);
                if (d) c(d);
                else {
                    var e = function(f) {
                        f && (un(a, e), c(f));
                    };
                    a.l.push(e);
                    a.i && a.g.execute(a.c);
                }
            });
        }));
    };
    k.reset = function() {
        wn(this);
        null !== this.c && this.g.reset(this.c);
    };
    function wn(a) {
        if (a.B) throw new M("internal-error", "RecaptchaVerifier instance has been destroyed.");
    }
    k.clear = function() {
        wn(this);
        this.B = !0;
        this.m.c();
        for(var a = 0; a < this.h.length; a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");
        if (!this.i) {
            a = Wd(this.u);
            for(var b; b = a.firstChild;)a.removeChild(b);
        }
    };
    function xn(a, b, c) {
        var d = !1;
        try {
            this.b = c || _appDefault.default.app();
        } catch (g) {
            throw new M("argument-error", "No firebase.app.App instance is currently initialized.");
        }
        if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey;
        else throw new M("invalid-api-key");
        var e = this, f = null;
        try {
            f = this.b.auth().Ca();
        } catch (g) {
        }
        try {
            d = this.b.auth().settings.appVerificationDisabledForTesting;
        } catch (g) {
        }
        f = _appDefault.default.SDK_VERSION ? Fe(_appDefault.default.SDK_VERSION, f) : null;
        on.call(this, c, a, b, function() {
            try {
                var g = e.b.auth().ha();
            } catch (h) {
                g = null;
            }
            return g;
        }, f, Vf(Wf), d);
    }
    v(xn, on);
    function yn(a, b, c, d) {
        a: {
            c = Array.prototype.slice.call(c);
            var e = 0;
            for(var f = !1, g = 0; g < b.length; g++)if (b[g].optional) f = !0;
            else {
                if (f) throw new M("internal-error", "Argument validator encountered a required argument after an optional argument.");
                e++;
            }
            f = b.length;
            if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";
            else {
                for(e = 0; e < c.length; e++)if (f = b[e].optional && (void 0) === c[e], !b[e].N(c[e]) && !f) {
                    b = b[e];
                    if (0 > e || e >= zn.length) throw new M("internal-error", "Argument validator received an unsupported number of arguments.");
                    c = zn[e];
                    d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.M + ".";
                    break a;
                }
                d = null;
            }
        }
        if (d) throw new M("argument-error", a + " failed: " + d);
    }
    var zn = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");
    function V(a, b) {
        return {
            name: a || "",
            M: "a valid string",
            optional: !!b,
            N: n
        };
    }
    function An(a, b) {
        return {
            name: a || "",
            M: "a boolean",
            optional: !!b,
            N: ia
        };
    }
    function W(a, b) {
        return {
            name: a || "",
            M: "a valid object",
            optional: !!b,
            N: r
        };
    }
    function Bn(a, b) {
        return {
            name: a || "",
            M: "a function",
            optional: !!b,
            N: q
        };
    }
    function Cn(a, b) {
        return {
            name: a || "",
            M: "null",
            optional: !!b,
            N: na
        };
    }
    function Dn() {
        return {
            name: "",
            M: "an HTML element",
            optional: !1,
            N: function(a) {
                return !!(a && a instanceof Element);
            }
        };
    }
    function En() {
        return {
            name: "auth",
            M: "an instance of Firebase Auth",
            optional: !0,
            N: function(a) {
                return !!(a && a instanceof Lm);
            }
        };
    }
    function Fn() {
        return {
            name: "app",
            M: "an instance of Firebase App",
            optional: !0,
            N: function(a) {
                return !!(a && a instanceof _appDefault.default.app.App);
            }
        };
    }
    function Gn(a) {
        return {
            name: a ? a + "Credential" : "credential",
            M: a ? "a valid " + a + " credential" : "a valid credential",
            optional: !1,
            N: function(b) {
                if (!b) return !1;
                var c = !a || b.providerId === a;
                return !(!b.na || !c);
            }
        };
    }
    function Hn() {
        return {
            name: "authProvider",
            M: "a valid Auth provider",
            optional: !1,
            N: function(a) {
                return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
            }
        };
    }
    function In() {
        return {
            name: "applicationVerifier",
            M: "an implementation of firebase.auth.ApplicationVerifier",
            optional: !1,
            N: function(a) {
                return !!(a && n(a.type) && q(a.verify));
            }
        };
    }
    function X(a, b, c, d) {
        return {
            name: c || "",
            M: a.M + " or " + b.M,
            optional: !!d,
            N: function(e) {
                return a.N(e) || b.N(e);
            }
        };
    }
    function Y(a, b) {
        for(var c in b){
            var d = b[c].name;
            a[d] = Jn(d, a[c], b[c].j);
        }
    }
    function Kn(a, b) {
        for(var c in b){
            var d = b[c].name;
            d !== c && Object.defineProperty(a, d, {
                get: ua(function(e) {
                    return this[e];
                }, c),
                set: ua(function(e, f, g, h) {
                    yn(e, [
                        g
                    ], [
                        h
                    ], !0);
                    this[f] = h;
                }, d, c, b[c].Za),
                enumerable: !0
            });
        }
    }
    function Z(a, b, c, d) {
        a[b] = Jn(b, c, d);
    }
    function Jn(a, b, c) {
        function d() {
            var g = Array.prototype.slice.call(arguments);
            yn(e, c, g);
            return b.apply(this, g);
        }
        if (!c) return b;
        var e = Ln(a), f;
        for(f in b)d[f] = b[f];
        for(f in b.prototype)d.prototype[f] = b.prototype[f];
        return d;
    }
    function Ln(a) {
        a = a.split(".");
        return a[a.length - 1];
    }
    Y(Lm.prototype, {
        Ya: {
            name: "applyActionCode",
            j: [
                V("code")
            ]
        },
        Ma: {
            name: "checkActionCode",
            j: [
                V("code")
            ]
        },
        ab: {
            name: "confirmPasswordReset",
            j: [
                V("code"),
                V("newPassword")
            ]
        },
        Xb: {
            name: "createUserWithEmailAndPassword",
            j: [
                V("email"),
                V("password")
            ]
        },
        $b: {
            name: "fetchSignInMethodsForEmail",
            j: [
                V("email")
            ]
        },
        oa: {
            name: "getRedirectResult",
            j: []
        },
        qc: {
            name: "isSignInWithEmailLink",
            j: [
                V("emailLink")
            ]
        },
        wc: {
            name: "onAuthStateChanged",
            j: [
                X(W(), Bn(), "nextOrObserver"),
                Bn("opt_error", !0),
                Bn("opt_completed", !0)
            ]
        },
        xc: {
            name: "onIdTokenChanged",
            j: [
                X(W(), Bn(), "nextOrObserver"),
                Bn("opt_error", !0),
                Bn("opt_completed", !0)
            ]
        },
        kb: {
            name: "sendPasswordResetEmail",
            j: [
                V("email"),
                X(W("opt_actionCodeSettings", !0), Cn(null, !0), "opt_actionCodeSettings", !0)
            ]
        },
        lb: {
            name: "sendSignInLinkToEmail",
            j: [
                V("email"),
                W("actionCodeSettings")
            ]
        },
        mb: {
            name: "setPersistence",
            j: [
                V("persistence")
            ]
        },
        Gc: {
            name: "signInAndRetrieveDataWithCredential",
            j: [
                Gn()
            ]
        },
        ob: {
            name: "signInAnonymously",
            j: []
        },
        Sa: {
            name: "signInWithCredential",
            j: [
                Gn()
            ]
        },
        Hc: {
            name: "signInWithCustomToken",
            j: [
                V("token")
            ]
        },
        Ic: {
            name: "signInWithEmailAndPassword",
            j: [
                V("email"),
                V("password")
            ]
        },
        Jc: {
            name: "signInWithEmailLink",
            j: [
                V("email"),
                V("emailLink", !0)
            ]
        },
        Kc: {
            name: "signInWithPhoneNumber",
            j: [
                V("phoneNumber"),
                In()
            ]
        },
        Lc: {
            name: "signInWithPopup",
            j: [
                Hn()
            ]
        },
        Mc: {
            name: "signInWithRedirect",
            j: [
                Hn()
            ]
        },
        Rc: {
            name: "updateCurrentUser",
            j: [
                X(function(a) {
                    return {
                        name: "user",
                        M: "an instance of Firebase User",
                        optional: !!a,
                        N: function(b) {
                            return !!(b && b instanceof Q);
                        }
                    };
                }(), Cn(), "user")
            ]
        },
        pb: {
            name: "signOut",
            j: []
        },
        toJSON: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        },
        Tc: {
            name: "useDeviceLanguage",
            j: []
        },
        Uc: {
            name: "verifyPasswordResetCode",
            j: [
                V("code")
            ]
        }
    });
    Kn(Lm.prototype, {
        lc: {
            name: "languageCode",
            Za: X(V(), Cn(), "languageCode")
        },
        ti: {
            name: "tenantId",
            Za: X(V(), Cn(), "tenantId")
        }
    });
    Lm.Persistence = ok;
    Lm.Persistence.LOCAL = "local";
    Lm.Persistence.SESSION = "session";
    Lm.Persistence.NONE = "none";
    Y(Q.prototype, {
        "delete": {
            name: "delete",
            j: []
        },
        dc: {
            name: "getIdTokenResult",
            j: [
                An("opt_forceRefresh", !0)
            ]
        },
        G: {
            name: "getIdToken",
            j: [
                An("opt_forceRefresh", !0)
            ]
        },
        rc: {
            name: "linkAndRetrieveDataWithCredential",
            j: [
                Gn()
            ]
        },
        fb: {
            name: "linkWithCredential",
            j: [
                Gn()
            ]
        },
        sc: {
            name: "linkWithPhoneNumber",
            j: [
                V("phoneNumber"),
                In()
            ]
        },
        tc: {
            name: "linkWithPopup",
            j: [
                Hn()
            ]
        },
        uc: {
            name: "linkWithRedirect",
            j: [
                Hn()
            ]
        },
        Ac: {
            name: "reauthenticateAndRetrieveDataWithCredential",
            j: [
                Gn()
            ]
        },
        hb: {
            name: "reauthenticateWithCredential",
            j: [
                Gn()
            ]
        },
        Bc: {
            name: "reauthenticateWithPhoneNumber",
            j: [
                V("phoneNumber"),
                In()
            ]
        },
        Cc: {
            name: "reauthenticateWithPopup",
            j: [
                Hn()
            ]
        },
        Dc: {
            name: "reauthenticateWithRedirect",
            j: [
                Hn()
            ]
        },
        reload: {
            name: "reload",
            j: []
        },
        jb: {
            name: "sendEmailVerification",
            j: [
                X(W("opt_actionCodeSettings", !0), Cn(null, !0), "opt_actionCodeSettings", !0)
            ]
        },
        toJSON: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        },
        Qc: {
            name: "unlink",
            j: [
                V("provider")
            ]
        },
        rb: {
            name: "updateEmail",
            j: [
                V("email")
            ]
        },
        sb: {
            name: "updatePassword",
            j: [
                V("password")
            ]
        },
        Sc: {
            name: "updatePhoneNumber",
            j: [
                Gn("phone")
            ]
        },
        tb: {
            name: "updateProfile",
            j: [
                W("profile")
            ]
        }
    });
    Y(bn.prototype, {
        execute: {
            name: "execute"
        },
        render: {
            name: "render"
        },
        reset: {
            name: "reset"
        },
        getResponse: {
            name: "getResponse"
        }
    });
    Y(an.prototype, {
        execute: {
            name: "execute"
        },
        render: {
            name: "render"
        },
        reset: {
            name: "reset"
        },
        getResponse: {
            name: "getResponse"
        }
    });
    Y(B.prototype, {
        ka: {
            name: "finally"
        },
        s: {
            name: "catch"
        },
        then: {
            name: "then"
        }
    });
    Kn(Bl.prototype, {
        appVerificationDisabled: {
            name: "appVerificationDisabledForTesting",
            Za: An("appVerificationDisabledForTesting")
        }
    });
    Y(Cl.prototype, {
        confirm: {
            name: "confirm",
            j: [
                V("verificationCode")
            ]
        }
    });
    Z(kg, "fromJSON", function(a) {
        a = n(a) ? JSON.parse(a) : a;
        for(var b, c = [
            vg,
            Mg,
            Tg,
            sg
        ], d = 0; d < c.length; d++)if (b = c[d](a)) return b;
        return null;
    }, [
        X(V(), W(), "json")
    ]);
    Z(Hg, "credential", function(a, b) {
        return new Gg(a, b);
    }, [
        V("email"),
        V("password")
    ]);
    Y(Gg.prototype, {
        A: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Y(yg.prototype, {
        ya: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        Ga: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(yg, "credential", zg, [
        X(V(), W(), "token")
    ]);
    Z(Hg, "credentialWithLink", Ng, [
        V("email"),
        V("emailLink")
    ]);
    Y(Ag.prototype, {
        ya: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        Ga: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Ag, "credential", Bg, [
        X(V(), W(), "token")
    ]);
    Y(Cg.prototype, {
        ya: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        Ga: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Cg, "credential", Dg, [
        X(V(), X(W(), Cn()), "idToken"),
        X(V(), Cn(), "accessToken", !0)
    ]);
    Y(Eg.prototype, {
        Ga: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Z(Eg, "credential", Fg, [
        X(V(), W(), "token"),
        V("secret", !0)
    ]);
    Y(O.prototype, {
        ya: {
            name: "addScope",
            j: [
                V("scope")
            ]
        },
        credential: {
            name: "credential",
            j: [
                X(V(), X(W(), Cn()), "optionsOrIdToken"),
                X(V(), Cn(), "accessToken", !0)
            ]
        },
        Ga: {
            name: "setCustomParameters",
            j: [
                W("customOAuthParameters")
            ]
        }
    });
    Y(tg.prototype, {
        A: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Y(ng.prototype, {
        A: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Z(Ug, "credential", Wg, [
        V("verificationId"),
        V("verificationCode")
    ]);
    Y(Ug.prototype, {
        Wa: {
            name: "verifyPhoneNumber",
            j: [
                V("phoneNumber"),
                In()
            ]
        }
    });
    Y(Pg.prototype, {
        A: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Y(M.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Y(eh.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Y(dh.prototype, {
        toJSON: {
            name: "toJSON",
            j: [
                V(null, !0)
            ]
        }
    });
    Y(xn.prototype, {
        clear: {
            name: "clear",
            j: []
        },
        render: {
            name: "render",
            j: []
        },
        verify: {
            name: "verify",
            j: []
        }
    });
    Z(rf, "parseLink", zf, [
        V("link")
    ]);
    (function() {
        if ("undefined" !== typeof _appDefault.default && _appDefault.default.INTERNAL && _appDefault.default.INTERNAL.registerComponent) {
            var a = {
                ActionCodeInfo: {
                    Operation: {
                        EMAIL_SIGNIN: jf,
                        PASSWORD_RESET: "PASSWORD_RESET",
                        RECOVER_EMAIL: "RECOVER_EMAIL",
                        VERIFY_EMAIL: "VERIFY_EMAIL"
                    }
                },
                Auth: Lm,
                AuthCredential: kg,
                Error: M
            };
            Z(a, "EmailAuthProvider", Hg, []);
            Z(a, "FacebookAuthProvider", yg, []);
            Z(a, "GithubAuthProvider", Ag, []);
            Z(a, "GoogleAuthProvider", Cg, []);
            Z(a, "TwitterAuthProvider", Eg, []);
            Z(a, "OAuthProvider", O, [
                V("providerId")
            ]);
            Z(a, "SAMLAuthProvider", xg, [
                V("providerId")
            ]);
            Z(a, "PhoneAuthProvider", Ug, [
                En()
            ]);
            Z(a, "RecaptchaVerifier", xn, [
                X(V(), Dn(), "recaptchaContainer"),
                W("recaptchaParameters", !0),
                Fn()
            ]);
            Z(a, "ActionCodeURL", rf, []);
            _appDefault.default.INTERNAL.registerComponent({
                name: "auth",
                instanceFactory: function(b) {
                    b = b.getProvider("app").getImmediate();
                    return new Lm(b);
                },
                multipleInstances: !1,
                serviceProps: a,
                instantiationMode: "LAZY",
                type: "PUBLIC"
            });
            _appDefault.default.INTERNAL.registerComponent({
                name: "auth-internal",
                instanceFactory: function(b) {
                    b = b.getProvider("auth").getImmediate();
                    return {
                        getUid: t(b.getUid, b),
                        getToken: t(b.cc, b),
                        addAuthTokenListener: t(b.Wb, b),
                        removeAuthTokenListener: t(b.Ec, b)
                    };
                },
                multipleInstances: !1,
                instantiationMode: "LAZY",
                type: "PRIVATE"
            });
            _appDefault.default.registerVersion("@firebase/auth", "0.13.5");
            _appDefault.default.INTERNAL.extendNamespace({
                User: Q
            });
        } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
    })();
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {
});

},{"@firebase/app":"78NCT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jyMAr":[function() {},{}],"cpyQW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryRouter", ()=>_reactRouter.MemoryRouter
);
parcelHelpers.export(exports, "Prompt", ()=>_reactRouter.Prompt
);
parcelHelpers.export(exports, "Redirect", ()=>_reactRouter.Redirect
);
parcelHelpers.export(exports, "Route", ()=>_reactRouter.Route
);
parcelHelpers.export(exports, "Router", ()=>_reactRouter.Router
);
parcelHelpers.export(exports, "StaticRouter", ()=>_reactRouter.StaticRouter
);
parcelHelpers.export(exports, "Switch", ()=>_reactRouter.Switch
);
parcelHelpers.export(exports, "generatePath", ()=>_reactRouter.generatePath
);
parcelHelpers.export(exports, "matchPath", ()=>_reactRouter.matchPath
);
parcelHelpers.export(exports, "useHistory", ()=>_reactRouter.useHistory
);
parcelHelpers.export(exports, "useLocation", ()=>_reactRouter.useLocation
);
parcelHelpers.export(exports, "useParams", ()=>_reactRouter.useParams
);
parcelHelpers.export(exports, "useRouteMatch", ()=>_reactRouter.useRouteMatch
);
parcelHelpers.export(exports, "withRouter", ()=>_reactRouter.withRouter
);
parcelHelpers.export(exports, "BrowserRouter", ()=>BrowserRouter1
);
parcelHelpers.export(exports, "HashRouter", ()=>HashRouter1
);
parcelHelpers.export(exports, "Link", ()=>Link
);
parcelHelpers.export(exports, "NavLink", ()=>NavLink
);
var _reactRouter = require("react-router");
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _history = require("history");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _tinyInvariant = require("tiny-invariant");
var _tinyInvariantDefault = parcelHelpers.interopDefault(_tinyInvariant);
/**
 * The public API for a <Router> that uses HTML5 history.
 */ var BrowserRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = _history.createBrowserHistory(_this.props);
        return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouter.Router, {
            history: this.history,
            children: this.props.children
        }));
    };
    return BrowserRouter2;
}(_reactDefault.default.Component);
BrowserRouter1.propTypes = {
    basename: _propTypesDefault.default.string,
    children: _propTypesDefault.default.node,
    forceRefresh: _propTypesDefault.default.bool,
    getUserConfirmation: _propTypesDefault.default.func,
    keyLength: _propTypesDefault.default.number
};
BrowserRouter1.prototype.componentDidMount = function() {
    _tinyWarningDefault.default(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
};
/**
 * The public API for a <Router> that uses window.location.hash.
 */ var HashRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(HashRouter2, _React$Component);
    function HashRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = _history.createHashHistory(_this.props);
        return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouter.Router, {
            history: this.history,
            children: this.props.children
        }));
    };
    return HashRouter2;
}(_reactDefault.default.Component);
HashRouter1.propTypes = {
    basename: _propTypesDefault.default.string,
    children: _propTypesDefault.default.node,
    getUserConfirmation: _propTypesDefault.default.func,
    hashType: _propTypesDefault.default.oneOf([
        "hashbang",
        "noslash",
        "slash"
    ])
};
HashRouter1.prototype.componentDidMount = function() {
    _tinyWarningDefault.default(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
};
var resolveToLocation = function resolveToLocation1(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation1(to, currentLocation) {
    return typeof to === "string" ? _history.createLocation(to, null, null, currentLocation) : to;
};
var forwardRefShim = function forwardRefShim1(C) {
    return C;
};
var forwardRef = _reactDefault.default.forwardRef;
if (typeof forwardRef === "undefined") forwardRef = forwardRefShim;
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var LinkAnchor = forwardRef(function(_ref, forwardedRef) {
    var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = _objectWithoutPropertiesLooseDefault.default(_ref, [
        "innerRef",
        "navigate",
        "onClick"
    ]);
    var target = rest.target;
    var props = _extendsDefault.default({
    }, rest, {
        onClick: function onClick(event) {
            try {
                if (_onClick) _onClick(event);
            } catch (ex) {
                event.preventDefault();
                throw ex;
            }
            if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event) // ignore clicks with modifier keys
            ) {
                event.preventDefault();
                navigate();
            }
        }
    }); // React 15 compat
    if (forwardRefShim !== forwardRef) props.ref = forwardedRef || innerRef;
    else props.ref = innerRef;
    /* eslint-disable-next-line jsx-a11y/anchor-has-content */ return(/*#__PURE__*/ _reactDefault.default.createElement("a", props));
});
LinkAnchor.displayName = "LinkAnchor";
/**
 * The public API for rendering a history-aware <a>.
 */ var Link = forwardRef(function(_ref2, forwardedRef) {
    var _ref2$component = _ref2.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to = _ref2.to, innerRef = _ref2.innerRef, rest = _objectWithoutPropertiesLooseDefault.default(_ref2, [
        "component",
        "replace",
        "to",
        "innerRef"
    ]);
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouter.__RouterContext.Consumer, null, function(context) {
        !context && _tinyInvariantDefault.default(false, "You should not use <Link> outside a <Router>");
        var history = context.history;
        var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
        var href = location ? history.createHref(location) : "";
        var props = _extendsDefault.default({
        }, rest, {
            href: href,
            navigate: function navigate() {
                var location1 = resolveToLocation(to, context.location);
                var isDuplicateNavigation = _history.createPath(context.location) === _history.createPath(normalizeToLocation(location1));
                var method = replace || isDuplicateNavigation ? history.replace : history.push;
                method(location1);
            }
        }); // React 15 compat
        if (forwardRefShim !== forwardRef) props.ref = forwardedRef || innerRef;
        else props.innerRef = innerRef;
        return(/*#__PURE__*/ _reactDefault.default.createElement(component, props));
    }));
});
var toType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.string,
    _propTypesDefault.default.object,
    _propTypesDefault.default.func
]);
var refType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.string,
    _propTypesDefault.default.func,
    _propTypesDefault.default.shape({
        current: _propTypesDefault.default.any
    })
]);
Link.displayName = "Link";
Link.propTypes = {
    innerRef: refType,
    onClick: _propTypesDefault.default.func,
    replace: _propTypesDefault.default.bool,
    target: _propTypesDefault.default.string,
    to: toType.isRequired
};
var forwardRefShim$1 = function forwardRefShim2(C) {
    return C;
};
var forwardRef$1 = _reactDefault.default.forwardRef;
if (typeof forwardRef$1 === "undefined") forwardRef$1 = forwardRefShim$1;
function joinClassnames() {
    for(var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++)classnames[_key] = arguments[_key];
    return classnames.filter(function(i) {
        return i;
    }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */ var NavLink = forwardRef$1(function(_ref, forwardedRef) {
    var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to = _ref.to, innerRef = _ref.innerRef, rest = _objectWithoutPropertiesLooseDefault.default(_ref, [
        "aria-current",
        "activeClassName",
        "activeStyle",
        "className",
        "exact",
        "isActive",
        "location",
        "sensitive",
        "strict",
        "style",
        "to",
        "innerRef"
    ]);
    return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouter.__RouterContext.Consumer, null, function(context) {
        !context && _tinyInvariantDefault.default(false, "You should not use <NavLink> outside a <Router>");
        var currentLocation = locationProp || context.location;
        var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
        var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
        var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
        var match = escapedPath ? _reactRouter.matchPath(currentLocation.pathname, {
            path: escapedPath,
            exact: exact,
            sensitive: sensitive,
            strict: strict
        }) : null;
        var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
        var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;
        var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;
        if (isActive) {
            className = joinClassnames(className, activeClassName);
            style = _extendsDefault.default({
            }, style, activeStyle);
        }
        var props = _extendsDefault.default({
            "aria-current": isActive && ariaCurrent || null,
            className: className,
            style: style,
            to: toLocation
        }, rest); // React 15 compat
        if (forwardRefShim$1 !== forwardRef$1) props.ref = forwardedRef || innerRef;
        else props.innerRef = innerRef;
        return(/*#__PURE__*/ _reactDefault.default.createElement(Link, props));
    }));
});
NavLink.displayName = "NavLink";
var ariaCurrentType = _propTypesDefault.default.oneOf([
    "page",
    "step",
    "location",
    "date",
    "time",
    "true",
    "false"
]);
NavLink.propTypes = _extendsDefault.default({
}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: _propTypesDefault.default.string,
    activeStyle: _propTypesDefault.default.object,
    className: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.func
    ]),
    exact: _propTypesDefault.default.bool,
    isActive: _propTypesDefault.default.func,
    location: _propTypesDefault.default.object,
    sensitive: _propTypesDefault.default.bool,
    strict: _propTypesDefault.default.bool,
    style: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.object,
        _propTypesDefault.default.func
    ])
});

},{"react-router":"l4MNa","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","react":"6TuXu","history":"6R8lq","prop-types":"1tgq3","tiny-warning":"4xDJt","@babel/runtime/helpers/esm/extends":"bKAu6","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","tiny-invariant":"kiE0c","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l4MNa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryRouter", ()=>MemoryRouter1
);
parcelHelpers.export(exports, "Prompt", ()=>Prompt
);
parcelHelpers.export(exports, "Redirect", ()=>Redirect
);
parcelHelpers.export(exports, "Route", ()=>Route1
);
parcelHelpers.export(exports, "Router", ()=>Router1
);
parcelHelpers.export(exports, "StaticRouter", ()=>StaticRouter1
);
parcelHelpers.export(exports, "Switch", ()=>Switch1
);
parcelHelpers.export(exports, "__HistoryContext", ()=>historyContext
);
parcelHelpers.export(exports, "__RouterContext", ()=>context
);
parcelHelpers.export(exports, "generatePath", ()=>generatePath
);
parcelHelpers.export(exports, "matchPath", ()=>matchPath
);
parcelHelpers.export(exports, "useHistory", ()=>useHistory
);
parcelHelpers.export(exports, "useLocation", ()=>useLocation
);
parcelHelpers.export(exports, "useParams", ()=>useParams
);
parcelHelpers.export(exports, "useRouteMatch", ()=>useRouteMatch
);
parcelHelpers.export(exports, "withRouter", ()=>withRouter
);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _history = require("history");
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var _miniCreateReactContext = require("mini-create-react-context");
var _miniCreateReactContextDefault = parcelHelpers.interopDefault(_miniCreateReactContext);
var _tinyInvariant = require("tiny-invariant");
var _tinyInvariantDefault = parcelHelpers.interopDefault(_tinyInvariant);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _pathToRegexp = require("path-to-regexp");
var _pathToRegexpDefault = parcelHelpers.interopDefault(_pathToRegexp);
var _reactIs = require("react-is");
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
// TODO: Replace with React.createContext once we can assume React 16+
var createNamedContext = function createNamedContext1(name) {
    var context = _miniCreateReactContextDefault.default();
    context.displayName = name;
    return context;
};
var historyContext = /*#__PURE__*/ createNamedContext("Router-History");
var context = /*#__PURE__*/ createNamedContext("Router");
/**
 * The public API for putting history on context.
 */ var Router1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
        return {
            path: "/",
            url: "/",
            params: {
            },
            isExact: pathname === "/"
        };
    };
    function Router2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.state = {
            location: props.history.location
        }; // This is a bit of a hack. We have to start listening for location
        // changes here in the constructor in case there are any <Redirect>s
        // on the initial render. If there are, they will replace/push when
        // they mount and since cDM fires in children before parents, we may
        // get a new location before the <Router> is mounted.
        _this._isMounted = false;
        _this._pendingLocation = null;
        if (!props.staticContext) _this.unlisten = props.history.listen(function(location) {
            if (_this._isMounted) _this.setState({
                location: location
            });
            else _this._pendingLocation = location;
        });
        return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;
        if (this._pendingLocation) this.setState({
            location: this._pendingLocation
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.unlisten) {
            this.unlisten();
            this._isMounted = false;
            this._pendingLocation = null;
        }
    };
    _proto.render = function render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement(context.Provider, {
            value: {
                history: this.props.history,
                location: this.state.location,
                match: Router2.computeRootMatch(this.state.location.pathname),
                staticContext: this.props.staticContext
            }
        }, /*#__PURE__*/ _reactDefault.default.createElement(historyContext.Provider, {
            children: this.props.children || null,
            value: this.props.history
        })));
    };
    return Router2;
}(_reactDefault.default.Component);
Router1.propTypes = {
    children: _propTypesDefault.default.node,
    history: _propTypesDefault.default.object.isRequired,
    staticContext: _propTypesDefault.default.object
};
Router1.prototype.componentDidUpdate = function(prevProps) {
    _tinyWarningDefault.default(prevProps.history === this.props.history, "You cannot change <Router history>");
};
/**
 * The public API for a <Router> that stores location in memory.
 */ var MemoryRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.history = _history.createMemoryHistory(_this.props);
        return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
        return(/*#__PURE__*/ _reactDefault.default.createElement(Router1, {
            history: this.history,
            children: this.props.children
        }));
    };
    return MemoryRouter2;
}(_reactDefault.default.Component);
MemoryRouter1.propTypes = {
    initialEntries: _propTypesDefault.default.array,
    initialIndex: _propTypesDefault.default.number,
    getUserConfirmation: _propTypesDefault.default.func,
    keyLength: _propTypesDefault.default.number,
    children: _propTypesDefault.default.node
};
MemoryRouter1.prototype.componentDidMount = function() {
    _tinyWarningDefault.default(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
};
var Lifecycle1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Lifecycle2, _React$Component);
    function Lifecycle2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
        if (this.props.onMount) this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onUnmount) this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
        return null;
    };
    return Lifecycle2;
}(_reactDefault.default.Component);
/**
 * The public API for prompting the user before navigating away from a screen.
 */ function Prompt(_ref) {
    var message = _ref.message, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
    return(/*#__PURE__*/ _reactDefault.default.createElement(context.Consumer, null, function(context1) {
        !context1 && _tinyInvariantDefault.default(false, "You should not use <Prompt> outside a <Router>");
        if (!when || context1.staticContext) return null;
        var method = context1.history.block;
        return(/*#__PURE__*/ _reactDefault.default.createElement(Lifecycle1, {
            onMount: function onMount(self) {
                self.release = method(message);
            },
            onUpdate: function onUpdate(self, prevProps) {
                if (prevProps.message !== message) {
                    self.release();
                    self.release = method(message);
                }
            },
            onUnmount: function onUnmount(self) {
                self.release();
            },
            message: message
        }));
    }));
}
var messageType = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.func,
    _propTypesDefault.default.string
]);
Prompt.propTypes = {
    when: _propTypesDefault.default.bool,
    message: messageType.isRequired
};
var cache = {
};
var cacheLimit = 10000;
var cacheCount = 0;
function compilePath(path) {
    if (cache[path]) return cache[path];
    var generator = _pathToRegexpDefault.default.compile(path);
    if (cacheCount < cacheLimit) {
        cache[path] = generator;
        cacheCount++;
    }
    return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */ function generatePath(path, params) {
    if (path === void 0) path = "/";
    if (params === void 0) params = {
    };
    return path === "/" ? path : compilePath(path)(params, {
        pretty: true
    });
}
/**
 * The public API for navigating programmatically with a component.
 */ function Redirect(_ref) {
    var computedMatch = _ref.computedMatch, to = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
    return(/*#__PURE__*/ _reactDefault.default.createElement(context.Consumer, null, function(context1) {
        !context1 && _tinyInvariantDefault.default(false, "You should not use <Redirect> outside a <Router>");
        var history = context1.history, staticContext = context1.staticContext;
        var method = push ? history.push : history.replace;
        var location = _history.createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extendsDefault.default({
        }, to, {
            pathname: generatePath(to.pathname, computedMatch.params)
        }) : to); // When rendering in a static context,
        // set the new location immediately.
        if (staticContext) {
            method(location);
            return null;
        }
        return(/*#__PURE__*/ _reactDefault.default.createElement(Lifecycle1, {
            onMount: function onMount() {
                method(location);
            },
            onUpdate: function onUpdate(self, prevProps) {
                var prevLocation = _history.createLocation(prevProps.to);
                if (!_history.locationsAreEqual(prevLocation, _extendsDefault.default({
                }, location, {
                    key: prevLocation.key
                }))) method(location);
            },
            to: to
        }));
    }));
}
Redirect.propTypes = {
    push: _propTypesDefault.default.bool,
    from: _propTypesDefault.default.string,
    to: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.object
    ]).isRequired
};
var cache$1 = {
};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;
function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {
    });
    if (pathCache[path]) return pathCache[path];
    var keys = [];
    var regexp = _pathToRegexpDefault.default(path, keys, options);
    var result = {
        regexp: regexp,
        keys: keys
    };
    if (cacheCount$1 < cacheLimit$1) {
        pathCache[path] = result;
        cacheCount$1++;
    }
    return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */ function matchPath(pathname, options) {
    if (options === void 0) options = {
    };
    if (typeof options === "string" || Array.isArray(options)) options = {
        path: options
    };
    var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function(matched, path1) {
        if (!path1 && path1 !== "") return null;
        if (matched) return matched;
        var _compilePath = compilePath$1(path1, {
            end: exact,
            strict: strict,
            sensitive: sensitive
        }), regexp = _compilePath.regexp, keys = _compilePath.keys;
        var match = regexp.exec(pathname);
        if (!match) return null;
        var url = match[0], values = match.slice(1);
        var isExact = pathname === url;
        if (exact && !isExact) return null;
        return {
            path: path1,
            // the path used to match
            url: path1 === "/" && url === "" ? "/" : url,
            // the matched portion of the URL
            isExact: isExact,
            // whether or not we matched exactly
            params: keys.reduce(function(memo, key, index) {
                memo[key.name] = values[index];
                return memo;
            }, {
            })
        };
    }, null);
}
function isEmptyChildren(children) {
    return _reactDefault.default.Children.count(children) === 0;
}
function evalChildrenDev(children, props, path) {
    var value = children(props);
    _tinyWarningDefault.default(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`");
    return value || null;
}
/**
 * The public API for matching a single path and rendering.
 */ var Route1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Route2, _React$Component);
    function Route2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route2.prototype;
    _proto.render = function render() {
        var _this = this;
        return(/*#__PURE__*/ _reactDefault.default.createElement(context.Consumer, null, function(context$1) {
            !context$1 && _tinyInvariantDefault.default(false, "You should not use <Route> outside a <Router>");
            var location = _this.props.location || context$1.location;
            var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
             : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
            var props = _extendsDefault.default({
            }, context$1, {
                location: location,
                match: match
            });
            var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render1 = _this$props.render; // Preact uses an empty array as children by
            // default, so use null if that's the case.
            if (Array.isArray(children) && isEmptyChildren(children)) children = null;
            return(/*#__PURE__*/ _reactDefault.default.createElement(context.Provider, {
                value: props
            }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component ? /*#__PURE__*/ _reactDefault.default.createElement(component, props) : render1 ? render1(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null));
        }));
    };
    return Route2;
}(_reactDefault.default.Component);
Route1.propTypes = {
    children: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func,
        _propTypesDefault.default.node
    ]),
    component: function component(props, propName) {
        if (props[propName] && !_reactIs.isValidElementType(props[propName])) return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
    },
    exact: _propTypesDefault.default.bool,
    location: _propTypesDefault.default.object,
    path: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.string)
    ]),
    render: _propTypesDefault.default.func,
    sensitive: _propTypesDefault.default.bool,
    strict: _propTypesDefault.default.bool
};
Route1.prototype.componentDidMount = function() {
    _tinyWarningDefault.default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
    _tinyWarningDefault.default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
    _tinyWarningDefault.default(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
};
Route1.prototype.componentDidUpdate = function(prevProps) {
    _tinyWarningDefault.default(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    _tinyWarningDefault.default(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
};
function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
}
function addBasename(basename, location) {
    if (!basename) return location;
    return _extendsDefault.default({
    }, location, {
        pathname: addLeadingSlash(basename) + location.pathname
    });
}
function stripBasename(basename, location) {
    if (!basename) return location;
    var base = addLeadingSlash(basename);
    if (location.pathname.indexOf(base) !== 0) return location;
    return _extendsDefault.default({
    }, location, {
        pathname: location.pathname.substr(base.length)
    });
}
function createURL(location) {
    return typeof location === "string" ? location : _history.createPath(location);
}
function staticHandler(methodName) {
    return function() {
        _tinyInvariantDefault.default(false, "You cannot %s with <StaticRouter>", methodName);
    };
}
function noop() {
}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */ var StaticRouter1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(StaticRouter2, _React$Component);
    function StaticRouter2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.handlePush = function(location) {
            return _this.navigateTo(location, "PUSH");
        };
        _this.handleReplace = function(location) {
            return _this.navigateTo(location, "REPLACE");
        };
        _this.handleListen = function() {
            return noop;
        };
        _this.handleBlock = function() {
            return noop;
        };
        return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location, action) {
        var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context1 = _this$props$context === void 0 ? {
        } : _this$props$context;
        context1.action = action;
        context1.location = addBasename(basename, _history.createLocation(location));
        context1.url = createURL(context1.location);
    };
    _proto.render = function render() {
        var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context1 = _this$props2$context === void 0 ? {
        } : _this$props2$context, _this$props2$location = _this$props2.location, location = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLooseDefault.default(_this$props2, [
            "basename",
            "context",
            "location"
        ]);
        var history = {
            createHref: function createHref(path) {
                return addLeadingSlash(basename + createURL(path));
            },
            action: "POP",
            location: stripBasename(basename, _history.createLocation(location)),
            push: this.handlePush,
            replace: this.handleReplace,
            go: staticHandler("go"),
            goBack: staticHandler("goBack"),
            goForward: staticHandler("goForward"),
            listen: this.handleListen,
            block: this.handleBlock
        };
        return(/*#__PURE__*/ _reactDefault.default.createElement(Router1, _extendsDefault.default({
        }, rest, {
            history: history,
            staticContext: context1
        })));
    };
    return StaticRouter2;
}(_reactDefault.default.Component);
StaticRouter1.propTypes = {
    basename: _propTypesDefault.default.string,
    context: _propTypesDefault.default.object,
    location: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.object
    ])
};
StaticRouter1.prototype.componentDidMount = function() {
    _tinyWarningDefault.default(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
};
/**
 * The public API for rendering the first <Route> that matches.
 */ var Switch1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Switch2, _React$Component);
    function Switch2() {
        return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch2.prototype;
    _proto.render = function render() {
        var _this = this;
        return(/*#__PURE__*/ _reactDefault.default.createElement(context.Consumer, null, function(context1) {
            !context1 && _tinyInvariantDefault.default(false, "You should not use <Switch> outside a <Router>");
            var location = _this.props.location || context1.location;
            var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
            // here because toArray adds keys to all child elements and we do not want
            // to trigger an unmount/remount for two <Route>s that render the same
            // component at different URLs.
            _reactDefault.default.Children.forEach(_this.props.children, function(child) {
                if (match == null && /*#__PURE__*/ _reactDefault.default.isValidElement(child)) {
                    element = child;
                    var path = child.props.path || child.props.from;
                    match = path ? matchPath(location.pathname, _extendsDefault.default({
                    }, child.props, {
                        path: path
                    })) : context1.match;
                }
            });
            return match ? /*#__PURE__*/ _reactDefault.default.cloneElement(element, {
                location: location,
                computedMatch: match
            }) : null;
        }));
    };
    return Switch2;
}(_reactDefault.default.Component);
Switch1.propTypes = {
    children: _propTypesDefault.default.node,
    location: _propTypesDefault.default.object
};
Switch1.prototype.componentDidUpdate = function(prevProps) {
    _tinyWarningDefault.default(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    _tinyWarningDefault.default(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
};
/**
 * A public higher-order component to access the imperative API
 */ function withRouter(Component) {
    var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
    var C = function C1(props) {
        var wrappedComponentRef = props.wrappedComponentRef, remainingProps = _objectWithoutPropertiesLooseDefault.default(props, [
            "wrappedComponentRef"
        ]);
        return(/*#__PURE__*/ _reactDefault.default.createElement(context.Consumer, null, function(context1) {
            !context1 && _tinyInvariantDefault.default(false, "You should not use <" + displayName + " /> outside a <Router>");
            return(/*#__PURE__*/ _reactDefault.default.createElement(Component, _extendsDefault.default({
            }, remainingProps, context1, {
                ref: wrappedComponentRef
            })));
        }));
    };
    C.displayName = displayName;
    C.WrappedComponent = Component;
    C.propTypes = {
        wrappedComponentRef: _propTypesDefault.default.oneOfType([
            _propTypesDefault.default.string,
            _propTypesDefault.default.func,
            _propTypesDefault.default.object
        ])
    };
    return _hoistNonReactStaticsDefault.default(C, Component);
}
var useContext = _reactDefault.default.useContext;
function useHistory() {
    !(typeof useContext === "function") && _tinyInvariantDefault.default(false, "You must use React >= 16.8 in order to use useHistory()");
    return useContext(historyContext);
}
function useLocation() {
    !(typeof useContext === "function") && _tinyInvariantDefault.default(false, "You must use React >= 16.8 in order to use useLocation()");
    return useContext(context).location;
}
function useParams() {
    !(typeof useContext === "function") && _tinyInvariantDefault.default(false, "You must use React >= 16.8 in order to use useParams()");
    var match = useContext(context).match;
    return match ? match.params : {
    };
}
function useRouteMatch(path) {
    !(typeof useContext === "function") && _tinyInvariantDefault.default(false, "You must use React >= 16.8 in order to use useRouteMatch()");
    var location = useLocation();
    var match = useContext(context).match;
    return path ? matchPath(location.pathname, path) : match;
}
if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
    };
    if (global[key] && global[key] !== "esm") {
        var initialBuildName = buildNames[global[key]];
        var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
        // loading 2 different builds.
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }
    global[key] = "esm";
}

},{"@babel/runtime/helpers/esm/inheritsLoose":"eO0be","react":"6TuXu","prop-types":"1tgq3","history":"6R8lq","tiny-warning":"4xDJt","mini-create-react-context":"bwjcK","tiny-invariant":"kiE0c","@babel/runtime/helpers/esm/extends":"bKAu6","path-to-regexp":"6SN7C","react-is":"5wFcP","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","hoist-non-react-statics":"jfzb6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eO0be":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inheritsLoose;

},{"./setPrototypeOf.js":"83cMx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"83cMx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return _setPrototypeOf(o, p);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1tgq3":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"5wFcP","./factoryWithTypeCheckers":"gMSjX"}],"5wFcP":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"dxS2U"}],"dxS2U":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"gMSjX":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {
};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message) {
        this.message = message;
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
                var checker = arrayOfTypeCheckers[i1];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) return null;
            }
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (!checker) continue;
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"5wFcP","object-assign":"jzTFF","./lib/ReactPropTypesSecret":"lYuBM","./checkPropTypes":"3evPV"}],"lYuBM":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"3evPV":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"lYuBM"}],"6R8lq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBrowserHistory", ()=>createBrowserHistory
);
parcelHelpers.export(exports, "createHashHistory", ()=>createHashHistory
);
parcelHelpers.export(exports, "createMemoryHistory", ()=>createMemoryHistory
);
parcelHelpers.export(exports, "createLocation", ()=>createLocation
);
parcelHelpers.export(exports, "locationsAreEqual", ()=>locationsAreEqual
);
parcelHelpers.export(exports, "parsePath", ()=>parsePath
);
parcelHelpers.export(exports, "createPath", ()=>createPath
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _resolvePathname = require("resolve-pathname");
var _resolvePathnameDefault = parcelHelpers.interopDefault(_resolvePathname);
var _valueEqual = require("value-equal");
var _valueEqualDefault = parcelHelpers.interopDefault(_valueEqual);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var _tinyInvariant = require("tiny-invariant");
var _tinyInvariantDefault = parcelHelpers.interopDefault(_tinyInvariant);
function addLeadingSlash(path) {
    return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
    return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
    return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
    var pathname = path || '/';
    var search = '';
    var hash = '';
    var hashIndex = pathname.indexOf('#');
    if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf('?');
    if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
    }
    return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
    };
}
function createPath(location) {
    var pathname = location.pathname, search = location.search, hash = location.hash;
    var path = pathname || '/';
    if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
    if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
    return path;
}
function createLocation(path, state, key, currentLocation) {
    var location;
    if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = parsePath(path);
        location.state = state;
    } else {
        // One-arg form: push(location)
        location = _extendsDefault.default({
        }, path);
        if (location.pathname === undefined) location.pathname = '';
        if (location.search) {
            if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
        } else location.search = '';
        if (location.hash) {
            if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
        } else location.hash = '';
        if (state !== undefined && location.state === undefined) location.state = state;
    }
    try {
        location.pathname = decodeURI(location.pathname);
    } catch (e) {
        if (e instanceof URIError) throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        else throw e;
    }
    if (key) location.key = key;
    if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) location.pathname = currentLocation.pathname;
        else if (location.pathname.charAt(0) !== '/') location.pathname = _resolvePathnameDefault.default(location.pathname, currentLocation.pathname);
    } else // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) location.pathname = '/';
    return location;
}
function locationsAreEqual(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && _valueEqualDefault.default(a.state, b.state);
}
function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
        _tinyWarningDefault.default(prompt == null, 'A history supports only one prompt at a time');
        prompt = nextPrompt;
        return function() {
            if (prompt === nextPrompt) prompt = null;
        };
    }
    function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
            var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
            if (typeof result === 'string') {
                if (typeof getUserConfirmation === 'function') getUserConfirmation(result, callback);
                else {
                    _tinyWarningDefault.default(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
                    callback(true);
                }
            } else // Return false from a transition hook to cancel the transition.
            callback(result !== false);
        } else callback(true);
    }
    var listeners = [];
    function appendListener(fn) {
        var isActive = true;
        function listener() {
            if (isActive) fn.apply(void 0, arguments);
        }
        listeners.push(listener);
        return function() {
            isActive = false;
            listeners = listeners.filter(function(item) {
                return item !== listener;
            });
        };
    }
    function notifyListeners() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        listeners.forEach(function(listener) {
            return listener.apply(void 0, args);
        });
    }
    return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
    };
}
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
    callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */ function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
    return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */ function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */ function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */ function isExtraneousPopstateEvent(event) {
    return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}
var PopStateEvent1 = 'popstate';
var HashChangeEvent1 = 'hashchange';
function getHistoryState() {
    try {
        return window.history.state || {
        };
    } catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {
        };
    }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */ function createBrowserHistory(props) {
    if (props === void 0) props = {
    };
    !canUseDOM && _tinyInvariantDefault.default(false, 'Browser history needs a DOM');
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
    function getDOMLocation(historyState) {
        var _ref = historyState || {
        }, key = _ref.key, state = _ref.state;
        var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
        var path = pathname + search + hash;
        _tinyWarningDefault.default(!basename || hasBasename(path, basename), "You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path \"" + path + '" to begin with "' + basename + '".');
        if (basename) path = stripBasename(path, basename);
        return createLocation(path, state, key);
    }
    function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extendsDefault.default(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (isExtraneousPopstateEvent(event)) return;
        handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        } else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
                if (ok) setState({
                    action: action,
                    location: location
                });
                else revertPop(location);
            });
        }
    }
    function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.
        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [
        initialLocation.key
    ]; // Public interface
    function createHref(location) {
        return basename + createPath(location);
    }
    function push(path, state) {
        _tinyWarningDefault.default(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var href = createHref(location);
            var key = location.key, state1 = location.state;
            if (canUseHistory) {
                globalHistory.pushState({
                    key: key,
                    state: state1
                }, null, href);
                if (forceRefresh) window.location.href = href;
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    var nextKeys = allKeys.slice(0, prevIndex + 1);
                    nextKeys.push(location.key);
                    allKeys = nextKeys;
                    setState({
                        action: action,
                        location: location
                    });
                }
            } else {
                _tinyWarningDefault.default(state1 === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
                window.location.href = href;
            }
        });
    }
    function replace(path, state) {
        _tinyWarningDefault.default(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var href = createHref(location);
            var key = location.key, state1 = location.state;
            if (canUseHistory) {
                globalHistory.replaceState({
                    key: key,
                    state: state1
                }, null, href);
                if (forceRefresh) window.location.replace(href);
                else {
                    var prevIndex = allKeys.indexOf(history.location.key);
                    if (prevIndex !== -1) allKeys[prevIndex] = location.key;
                    setState({
                        action: action,
                        location: location
                    });
                }
            } else {
                _tinyWarningDefault.default(state1 === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
                window.location.replace(href);
            }
        });
    }
    function go(n) {
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) {
            window.addEventListener(PopStateEvent1, handlePopState);
            if (needsHashChangeListener) window.addEventListener(HashChangeEvent1, handleHashChange);
        } else if (listenerCount === 0) {
            window.removeEventListener(PopStateEvent1, handlePopState);
            if (needsHashChangeListener) window.removeEventListener(HashChangeEvent1, handleHashChange);
        }
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function() {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function() {
            checkDOMListeners(-1);
            unlisten();
        };
    }
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
}
var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
    hashbang: {
        encodePath: function encodePath(path) {
            return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
        },
        decodePath: function decodePath(path) {
            return path.charAt(0) === '!' ? path.substr(1) : path;
        }
    },
    noslash: {
        encodePath: stripLeadingSlash,
        decodePath: addLeadingSlash
    },
    slash: {
        encodePath: addLeadingSlash,
        decodePath: addLeadingSlash
    }
};
function stripHash(url) {
    var hashIndex = url.indexOf('#');
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
}
function getHashPath() {
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    var href = window.location.href;
    var hashIndex = href.indexOf('#');
    return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}
function pushHashPath(path) {
    window.location.hash = path;
}
function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + '#' + path);
}
function createHashHistory(props) {
    if (props === void 0) props = {
    };
    !canUseDOM && _tinyInvariantDefault.default(false, 'Hash history needs a DOM');
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath = _HashPathCoders$hashT.encodePath, decodePath = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
        var path = decodePath(getHashPath());
        _tinyWarningDefault.default(!basename || hasBasename(path, basename), "You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path \"" + path + '" to begin with "' + basename + '".');
        if (basename) path = stripBasename(path, basename);
        return createLocation(path);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extendsDefault.default(history, nextState);
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a, b) {
        return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
    }
    function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);
        if (path !== encodedPath) // Ensure we always have a properly-encoded hash.
        replaceHashPath(encodedPath);
        else {
            var location = getDOMLocation();
            var prevLocation = history.location;
            if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.
            if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.
            ignorePath = null;
            handlePop(location);
        }
    }
    function handlePop(location) {
        if (forceNextPop) {
            forceNextPop = false;
            setState();
        } else {
            var action = 'POP';
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
                if (ok) setState({
                    action: action,
                    location: location
                });
                else revertPop(location);
            });
        }
    }
    function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.
        var toIndex = allPaths.lastIndexOf(createPath(toLocation));
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;
        if (delta) {
            forceNextPop = true;
            go(delta);
        }
    } // Ensure the hash is encoded properly before doing anything else.
    var path = getHashPath();
    var encodedPath = encodePath(path);
    if (path !== encodedPath) replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [
        createPath(initialLocation)
    ]; // Public interface
    function createHref(location) {
        var baseTag = document.querySelector('base');
        var href = '';
        if (baseTag && baseTag.getAttribute('href')) href = stripHash(window.location.href);
        return href + '#' + encodePath(basename + createPath(location));
    }
    function push(path1, state) {
        _tinyWarningDefault.default(state === undefined, 'Hash history cannot push state; it is ignored');
        var action = 'PUSH';
        var location = createLocation(path1, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var path2 = createPath(location);
            var encodedPath1 = encodePath(basename + path2);
            var hashChanged = getHashPath() !== encodedPath1;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a PUSH, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path2;
                pushHashPath(encodedPath1);
                var prevIndex = allPaths.lastIndexOf(createPath(history.location));
                var nextPaths = allPaths.slice(0, prevIndex + 1);
                nextPaths.push(path2);
                allPaths = nextPaths;
                setState({
                    action: action,
                    location: location
                });
            } else {
                _tinyWarningDefault.default(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
                setState();
            }
        });
    }
    function replace(path1, state) {
        _tinyWarningDefault.default(state === undefined, 'Hash history cannot replace state; it is ignored');
        var action = 'REPLACE';
        var location = createLocation(path1, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var path2 = createPath(location);
            var encodedPath1 = encodePath(basename + path2);
            var hashChanged = getHashPath() !== encodedPath1;
            if (hashChanged) {
                // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path2;
                replaceHashPath(encodedPath1);
            }
            var prevIndex = allPaths.indexOf(createPath(history.location));
            if (prevIndex !== -1) allPaths[prevIndex] = path2;
            setState({
                action: action,
                location: location
            });
        });
    }
    function go(n) {
        _tinyWarningDefault.default(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) window.addEventListener(HashChangeEvent$1, handleHashChange);
        else if (listenerCount === 0) window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkDOMListeners(1);
            isBlocked = true;
        }
        return function() {
            if (isBlocked) {
                isBlocked = false;
                checkDOMListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function() {
            checkDOMListeners(-1);
            unlisten();
        };
    }
    var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
    };
    return history;
}
function clamp(n, lowerBound, upperBound) {
    return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */ function createMemoryHistory(props) {
    if (props === void 0) props = {
    };
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? [
        '/'
    ] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
        _extendsDefault.default(history, nextState);
        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
    }
    var index = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
        return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
    }); // Public interface
    var createHref = createPath;
    function push(path, state) {
        _tinyWarningDefault.default(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            var prevIndex = history.index;
            var nextIndex = prevIndex + 1;
            var nextEntries = history.entries.slice(0);
            if (nextEntries.length > nextIndex) nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
            else nextEntries.push(location);
            setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries
            });
        });
    }
    function replace(path, state) {
        _tinyWarningDefault.default(!(typeof path === 'object' && path.state !== undefined && state !== undefined), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (!ok) return;
            history.entries[history.index] = location;
            setState({
                action: action,
                location: location
            });
        });
    }
    function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
            if (ok) setState({
                action: action,
                location: location,
                index: nextIndex
            });
            else // Mimic the behavior of DOM histories by
            // causing a render after a cancelled POP.
            setState();
        });
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
    }
    function block(prompt) {
        if (prompt === void 0) prompt = false;
        return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
        return transitionManager.appendListener(listener);
    }
    var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
    };
    return history;
}

},{"@babel/runtime/helpers/esm/extends":"bKAu6","resolve-pathname":"8Bknh","value-equal":"j68cW","tiny-warning":"4xDJt","tiny-invariant":"kiE0c","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bKAu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Bknh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function isAbsolute(pathname) {
    return pathname.charAt(0) === '/';
}
// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
    for(var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)list[i] = list[k];
    list.pop();
}
// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
    if (from === undefined) from = '';
    var toParts = to && to.split('/') || [];
    var fromParts = from && from.split('/') || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) // to is absolute
    fromParts = toParts;
    else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length) return '/';
    var hasTrailingSlash;
    if (fromParts.length) {
        var last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
    } else hasTrailingSlash = false;
    var up = 0;
    for(var i = fromParts.length; i >= 0; i--){
        var part = fromParts[i];
        if (part === '.') spliceOne(fromParts, i);
        else if (part === '..') {
            spliceOne(fromParts, i);
            up++;
        } else if (up) {
            spliceOne(fromParts, i);
            up--;
        }
    }
    if (!mustEndAbs) for(; up--;)fromParts.unshift('..');
    if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
    var result = fromParts.join('/');
    if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
    return result;
}
exports.default = resolvePathname;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j68cW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}
function valueEqual(a, b) {
    // Test for strict equality first.
    if (a === b) return true;
    // Otherwise, if either of them == null they are not equal.
    if (a == null || b == null) return false;
    if (Array.isArray(a)) return Array.isArray(b) && a.length === b.length && a.every(function(item, index) {
        return valueEqual(item, b[index]);
    });
    if (typeof a === 'object' || typeof b === 'object') {
        var aValue = valueOf(a);
        var bValue = valueOf(b);
        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
        return Object.keys(Object.assign({
        }, a, b)).every(function(key) {
            return valueEqual(a[key], b[key]);
        });
    }
    return false;
}
exports.default = valueEqual;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4xDJt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isProduction = false;
function warning(condition, message) {
    if (!isProduction) {
        if (condition) return;
        var text = "Warning: " + message;
        if (typeof console !== 'undefined') console.warn(text);
        try {
            throw Error(text);
        } catch (x) {
        }
    }
}
exports.default = warning;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kiE0c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isProduction = false;
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) return;
    if (isProduction) throw new Error(prefix);
    throw new Error(prefix + ": " + (message || ''));
}
exports.default = invariant;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bwjcK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var global = arguments[3];
var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
};
function getUniqueId() {
    var key = '__global_unique_id__';
    return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
}
function objectIs(x, y) {
    if (x === y) return x !== 0 || 1 / x === 1 / y;
    else return x !== x && y !== y;
}
function createEventEmitter(value) {
    var handlers = [];
    return {
        on: function on(handler) {
            handlers.push(handler);
        },
        off: function off(handler) {
            handlers = handlers.filter(function(h) {
                return h !== handler;
            });
        },
        get: function get() {
            return value;
        },
        set: function set(newValue, changedBits) {
            value = newValue;
            handlers.forEach(function(handler) {
                return handler(value, changedBits);
            });
        }
    };
}
function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
}
function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = '__create-react-context-' + getUniqueId() + '__';
    var Provider1 = /*#__PURE__*/ function(_Component) {
        _inheritsLooseDefault.default(Provider2, _Component);
        function Provider2() {
            var _this;
            _this = _Component.apply(this, arguments) || this;
            _this.emitter = createEventEmitter(_this.props.value);
            return _this;
        }
        var _proto = Provider2.prototype;
        _proto.getChildContext = function getChildContext() {
            var _ref;
            return _ref = {
            }, _ref[contextProp] = this.emitter, _ref;
        };
        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if (this.props.value !== nextProps.value) {
                var oldValue = this.props.value;
                var newValue = nextProps.value;
                var changedBits;
                if (objectIs(oldValue, newValue)) changedBits = 0;
                else {
                    changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                    _tinyWarningDefault.default((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
                    changedBits |= 0;
                    if (changedBits !== 0) this.emitter.set(nextProps.value, changedBits);
                }
            }
        };
        _proto.render = function render() {
            return this.props.children;
        };
        return Provider2;
    }(_react.Component);
    Provider1.childContextTypes = (_Provider$childContex = {
    }, _Provider$childContex[contextProp] = _propTypesDefault.default.object.isRequired, _Provider$childContex);
    var Consumer1 = /*#__PURE__*/ function(_Component2) {
        _inheritsLooseDefault.default(Consumer2, _Component2);
        function Consumer2() {
            var _this2;
            _this2 = _Component2.apply(this, arguments) || this;
            _this2.state = {
                value: _this2.getValue()
            };
            _this2.onUpdate = function(newValue, changedBits) {
                var observedBits = _this2.observedBits | 0;
                if ((observedBits & changedBits) !== 0) _this2.setState({
                    value: _this2.getValue()
                });
            };
            return _this2;
        }
        var _proto2 = Consumer2.prototype;
        _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var observedBits = nextProps.observedBits;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };
        _proto2.componentDidMount = function componentDidMount() {
            if (this.context[contextProp]) this.context[contextProp].on(this.onUpdate);
            var observedBits = this.props.observedBits;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };
        _proto2.componentWillUnmount = function componentWillUnmount() {
            if (this.context[contextProp]) this.context[contextProp].off(this.onUpdate);
        };
        _proto2.getValue = function getValue() {
            if (this.context[contextProp]) return this.context[contextProp].get();
            else return defaultValue;
        };
        _proto2.render = function render() {
            return onlyChild(this.props.children)(this.state.value);
        };
        return Consumer2;
    }(_react.Component);
    Consumer1.contextTypes = (_Consumer$contextType = {
    }, _Consumer$contextType[contextProp] = _propTypesDefault.default.object, _Consumer$contextType);
    return {
        Provider: Provider1,
        Consumer: Consumer1
    };
}
var index = _reactDefault.default.createContext || createReactContext;
exports.default = index;

},{"react":"6TuXu","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","prop-types":"1tgq3","tiny-warning":"4xDJt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6SN7C":[function(require,module,exports) {
var isarray = require('isarray');
/**
 * Expose `pathToRegexp`.
 */ module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */ var PATH_REGEXP = new RegExp([
    // Match escaped characters that would otherwise appear in future matches.
    // This allows the user to escape special characters that won't transform.
    '(\\\\.)',
    // Match Express-style parameters and un-named parameters with a prefix
    // and optional suffixes. Matches appear as:
    //
    // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
    // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
    // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
    '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */ function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;
    while((res = PATH_REGEXP.exec(str)) != null){
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;
        // Ignore already escaped sequences.
        if (escaped) {
            path += escaped[1];
            continue;
        }
        var next = str[index];
        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        // Push the current path onto the tokens.
        if (path) {
            tokens.push(path);
            path = '';
        }
        var partial = prefix != null && next != null && next !== prefix;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;
        tokens.push({
            name: name || key++,
            prefix: prefix || '',
            delimiter: delimiter,
            optional: optional,
            repeat: repeat,
            partial: partial,
            asterisk: !!asterisk,
            pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
        });
    }
    // Match any characters still remaining.
    if (index < str.length) path += str.substr(index);
    // If the path exists, push it onto the end.
    if (path) tokens.push(path);
    return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */ function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */ function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */ function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
/**
 * Expose a method for transforming tokens into the path function.
 */ function tokensToFunction(tokens, options) {
    // Compile all the tokens into regexps.
    var matches = new Array(tokens.length);
    // Compile all the patterns before compilation.
    for(var i = 0; i < tokens.length; i++)if (typeof tokens[i] === 'object') matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    return function(obj, opts) {
        var path = '';
        var data = obj || {
        };
        var options1 = opts || {
        };
        var encode = options1.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for(var i1 = 0; i1 < tokens.length; i1++){
            var token = tokens[i1];
            if (typeof token === 'string') {
                path += token;
                continue;
            }
            var value = data[token.name];
            var segment;
            if (value == null) {
                if (token.optional) {
                    // Prepend partial segment prefixes.
                    if (token.partial) path += token.prefix;
                    continue;
                } else throw new TypeError('Expected "' + token.name + '" to be defined');
            }
            if (isarray(value)) {
                if (!token.repeat) throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
                if (value.length === 0) {
                    if (token.optional) continue;
                    else throw new TypeError('Expected "' + token.name + '" to not be empty');
                }
                for(var j = 0; j < value.length; j++){
                    segment = encode(value[j]);
                    if (!matches[i1].test(segment)) throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
                    path += (j === 0 ? token.prefix : token.delimiter) + segment;
                }
                continue;
            }
            segment = token.asterisk ? encodeAsterisk(value) : encode(value);
            if (!matches[i1].test(segment)) throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
            path += token.prefix + segment;
        }
        return path;
    };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */ function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */ function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */ function attachKeys(re, keys) {
    re.keys = keys;
    return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */ function flags(options) {
    return options && options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */ function regexpToRegexp(path, keys) {
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) for(var i = 0; i < groups.length; i++)keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
    });
    return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */ function arrayToRegexp(path, keys, options) {
    var parts = [];
    for(var i = 0; i < path.length; i++)parts.push(pathToRegexp(path[i], keys, options).source);
    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */ function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */ function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
        options = keys || options;
        keys = [];
    }
    options = options || {
    };
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';
    // Iterate over the tokens and create our regexp string.
    for(var i = 0; i < tokens.length; i++){
        var token = tokens[i];
        if (typeof token === 'string') route += escapeString(token);
        else {
            var prefix = escapeString(token.prefix);
            var capture = '(?:' + token.pattern + ')';
            keys.push(token);
            if (token.repeat) capture += '(?:' + prefix + capture + ')*';
            if (token.optional) {
                if (!token.partial) capture = '(?:' + prefix + '(' + capture + '))?';
                else capture = prefix + '(' + capture + ')?';
            } else capture = prefix + '(' + capture + ')';
            route += capture;
        }
    }
    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
    // In non-strict mode we allow a slash at the end of match. If the path to
    // match already ends with a slash, we remove it for consistency. The slash
    // is valid at the end of a path match, not in the middle. This is important
    // in non-ending mode, where "/test/" shouldn't match "/test//route".
    if (!strict) route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    if (end) route += '$';
    else // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */ function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
        options = keys || options;
        keys = [];
    }
    options = options || {
    };
    if (path instanceof RegExp) return regexpToRegexp(path, keys);
    if (isarray(path)) return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}

},{"isarray":"6o9Vr"}],"6o9Vr":[function(require,module,exports) {
module.exports = Array.isArray || function(arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"3Rubg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jfzb6":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {
};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {
                }
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"5wFcP"}],"21Hac":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$9e50 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$9e50.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogoView", ()=>LogoView
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _logoSvg = require("url:./logo.svg");
var _logoSvgDefault = parcelHelpers.interopDefault(_logoSvg);
var _logoViewScss = require("./logo-view.scss");
class LogoView extends _reactDefault.default.Component {
    render() {
        return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
            className: "logo",
            __source: {
                fileName: "src/components/logo-view/logo-view.jsx",
                lineNumber: 9
            },
            __self: this,
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx("img", {
                    src: _logoSvgDefault.default,
                    alt: "logo image",
                    __source: {
                        fileName: "src/components/logo-view/logo-view.jsx",
                        lineNumber: 9
                    },
                    __self: this
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("h1", {
                    __source: {
                        fileName: "src/components/logo-view/logo-view.jsx",
                        lineNumber: 10
                    },
                    __self: this,
                    children: "Collection"
                })
            ]
        }));
    }
}

  $parcel$ReactRefreshHelpers$9e50.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","url:./logo.svg":"bTKlW","./logo-view.scss":"1KkkK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"bTKlW":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3VpAv') + "logo.bccecf6e.svg";

},{"./helpers/bundle-url":"8YnfL"}],"8YnfL":[function(require,module,exports) {
"use strict";
var bundleURL = {
};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"1KkkK":[function() {},{}],"5V79J":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"fNmB3"}],"3XDAu":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$b157 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$b157.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NavigationView", ()=>NavigationView
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _navigationViewScss = require("./navigation-view.scss");
var _reactRouterDom = require("react-router-dom");
class NavigationView extends _reactDefault.default.Component {
    render() {
        return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
            className: "navigation",
            __source: {
                fileName: "src/components/navigation-view/navigation-view.jsx",
                lineNumber: 9
            },
            __self: this,
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx(_reactRouterDom.Link, {
                    to: true,
                    to: "/artist",
                    __source: {
                        fileName: "src/components/navigation-view/navigation-view.jsx",
                        lineNumber: 10
                    },
                    __self: this,
                    children: /*#__PURE__*/ _jsxRuntime.jsx("button", {
                        __source: {
                            fileName: "src/components/navigation-view/navigation-view.jsx",
                            lineNumber: 11
                        },
                        __self: this,
                        children: "Artists"
                    })
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("br", {
                    __source: {
                        fileName: "src/components/navigation-view/navigation-view.jsx",
                        lineNumber: 12
                    },
                    __self: this
                }),
                /*#__PURE__*/ _jsxRuntime.jsx(_reactRouterDom.Link, {
                    to: true,
                    to: "/",
                    __source: {
                        fileName: "src/components/navigation-view/navigation-view.jsx",
                        lineNumber: 13
                    },
                    __self: this,
                    children: /*#__PURE__*/ _jsxRuntime.jsx("button", {
                        __source: {
                            fileName: "src/components/navigation-view/navigation-view.jsx",
                            lineNumber: 14
                        },
                        __self: this,
                        children: "About"
                    })
                })
            ]
        }));
    }
}

  $parcel$ReactRefreshHelpers$b157.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","./navigation-view.scss":"9VXEy","react-router-dom":"cpyQW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"9VXEy":[function() {},{}],"cx3Hi":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$18ef = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$18ef.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageSlideView", ()=>ImageSlideView
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _imageslideViewScss = require("./imageslide-view.scss");
var _twoTrucksPng = require("./TwoTrucks.png");
var _twoTrucksPngDefault = parcelHelpers.interopDefault(_twoTrucksPng);
var _willyBrandtPng = require("./WillyBrandt.png");
var _willyBrandtPngDefault = parcelHelpers.interopDefault(_willyBrandtPng);
var _corporateIdentityPng = require("./CorporateIdentity.png");
var _corporateIdentityPngDefault = parcelHelpers.interopDefault(_corporateIdentityPng);
var _reactMediumImageZoom = require("react-medium-image-zoom");
var _reactMediumImageZoomDefault = parcelHelpers.interopDefault(_reactMediumImageZoom);
var _stylesCss = require("react-medium-image-zoom/dist/styles.css");
var _reactImageGallery = require("react-image-gallery");
var _reactImageGalleryDefault = parcelHelpers.interopDefault(_reactImageGallery);
var _imageGalleryCss = require("react-image-gallery/styles/css/image-gallery.css");
class ImageSlideView extends _reactDefault.default.Component {
    constructor(){
        super();
        this.state = {
            slideDuration: 0,
            slideInterval: 3500,
            showGalleryPlayButton: false,
            showNav: false,
            showPlayButton: false,
            showBullets: false,
            infinite: true,
            showThumbnails: false,
            showFullscreenButton: false,
            showGalleryFullscreenButton: false,
            autoPlay: true,
            useTranslate3D: true,
            swipeThreshold: 0,
            lazyLoad: true,
            stopPropagation: false,
            clickedImage: null,
            isZoomed: true,
            fullscreen: false,
            imageIndex: 0
        };
    }
    _onImageClick(event) {
        let image = event.target.src;
        let index = this._imageGallery.getCurrentIndex();
        console.log(index);
        this.setState({
            clickedImage: image,
            isZoomed: true,
            fullscreen: true,
            imageIndex: index
        });
    }
    _handleZoomChange() {
        this.setState({
            isZoomed: false,
            clickedImage: null,
            fullscreen: false
        });
    }
    render() {
        const { fullscreen , isZoomed  } = this.state;
        const { art , image  } = this.props;
        const images = [
            {
                original: art.ImagePath,
                description: '• Willy Brandt'
            },
            {
                original: _twoTrucksPngDefault.default,
                description: '• Two Trucks'
            },
            {
                original: _corporateIdentityPngDefault.default,
                description: '• Corporate Identity'
            }
        ];
        if (fullscreen === false) return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: "imageslide",
            __source: {
                fileName: "src/components/imageslide-view/imageslide-view.jsx",
                lineNumber: 79
            },
            __self: this,
            children: /*#__PURE__*/ _jsxRuntime.jsx(_reactImageGalleryDefault.default, {
                items: images,
                ref: (i)=>this._imageGallery = i
                ,
                slideDuration: this.state.slideDuration,
                slideInterval: this.state.slideInterval,
                showPlayButton: this.state.showPlayButton,
                infinite: this.state.infinite,
                showThumbnails: this.state.showThumbnails,
                showGalleryFullscreenButton: this.state.showGalleryFullscreenButton,
                showFullscreenButton: this.state.showFullscreenButton,
                showBullets: this.state.showBullets,
                autoPlay: this.state.autoPlay,
                showNav: this.state.showNav,
                useTranslate3D: this.state.useTranslate3D,
                isRTL: this.state.isRTL,
                swipeThreshold: this.state.swipeThreshold,
                additionalClass: "app-image-gallery",
                lazyLoad: this.state.lazyLoad,
                stopPropagation: this.state.stopPropagation,
                onClick: this._onImageClick.bind(this),
                startIndex: this.state.imageIndex,
                __source: {
                    fileName: "src/components/imageslide-view/imageslide-view.jsx",
                    lineNumber: 80
                },
                __self: this
            })
        }));
        else if (fullscreen === true) return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: "fullscreen",
            __source: {
                fileName: "src/components/imageslide-view/imageslide-view.jsx",
                lineNumber: 106
            },
            __self: this,
            children: /*#__PURE__*/ _jsxRuntime.jsx(_reactMediumImageZoom.Controlled, {
                transitionDuration: 0,
                isZoomed: isZoomed,
                zoomMargin: 190,
                overlayBgColorEnd: "rgba(0,0,0,1)",
                onZoomChange: this._handleZoomChange.bind(this),
                __source: {
                    fileName: "src/components/imageslide-view/imageslide-view.jsx",
                    lineNumber: 107
                },
                __self: this,
                children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
                    __source: {
                        fileName: "src/components/imageslide-view/imageslide-view.jsx",
                        lineNumber: 107
                    },
                    __self: this,
                    children: /*#__PURE__*/ _jsxRuntime.jsx("img", {
                        src: this.state.clickedImage,
                        alt: "",
                        __source: {
                            fileName: "src/components/imageslide-view/imageslide-view.jsx",
                            lineNumber: 107
                        },
                        __self: this
                    })
                })
            })
        }));
    }
}

  $parcel$ReactRefreshHelpers$18ef.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"8xIwr","react":"6TuXu","./imageslide-view.scss":"laukI","./TwoTrucks.png":"EnTAq","./WillyBrandt.png":"6oDEg","./CorporateIdentity.png":"6SVx7","react-medium-image-zoom":"iZshw","react-medium-image-zoom/dist/styles.css":"e3nYk","react-image-gallery":"dIlbG","react-image-gallery/styles/css/image-gallery.css":"hrVig","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"laukI":[function() {},{}],"EnTAq":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3VpAv') + "TwoTrucks.9ff8dc0c.png";

},{"./helpers/bundle-url":"8YnfL"}],"6oDEg":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3VpAv') + "WillyBrandt.923acfea.png";

},{"./helpers/bundle-url":"8YnfL"}],"6SVx7":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('3VpAv') + "CorporateIdentity.b6a69e4f.png";

},{"./helpers/bundle-url":"8YnfL"}],"iZshw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Controlled", ()=>_controlledJsDefault.default
);
var _focusOptionsPolyfill = require("focus-options-polyfill");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _useEvent = require("react-use/lib/useEvent");
var _useEventDefault = parcelHelpers.interopDefault(_useEvent);
var _useWindowSize = require("react-use/lib/useWindowSize");
var _useWindowSizeDefault = parcelHelpers.interopDefault(_useWindowSize);
var _tslib = require("tslib");
var _helpersJs = require("./helpers.js");
var _usePrevious = require("react-use/lib/usePrevious");
var _controlledJs = require("./Controlled.js");
var _controlledJsDefault = parcelHelpers.interopDefault(_controlledJs);
var UncontrolledActivated = function(_a) {
    var children = _a.children, _b = _a.closeText, closeText = _b === void 0 ? 'Unzoom Image' : _b, onUnload = _a.onUnload, onLoad = _a.onLoad, _c = _a.overlayBgColorEnd, overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c, _d = _a.overlayBgColorStart, overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d, parentRef = _a.parentRef, _e = _a.portalEl, portalEl = _e === void 0 ? document.body : _e, _f = _a.scrollableEl, scrollableEl = _f === void 0 ? window : _f, _g = _a.transitionDuration, transitionDuration = _g === void 0 ? 300 : _g, _h = _a.zoomMargin, zoomMargin = _h === void 0 ? 0 : _h, _j = _a.zoomZindex, zoomZindex = _j === void 0 ? 2147483647 : _j;
    var btnRef = _react.useRef(null);
    var _k = _react.useState(0), forceUpdate = _k[1];
    var _l = _react.useState(false), isLoaded = _l[0], setIsLoaded = _l[1];
    var _m = _react.useState(false), isUnloading = _m[0], setIsUnloading = _m[1];
    var _o = _useWindowSizeDefault.default(), innerWidth = _o.width, innerHeight = _o.height;
    // on click, begin unloading
    var handleClick = _react.useCallback(function(e) {
        e.preventDefault();
        setIsUnloading(true);
    }, []);
    // on escape, begin unloading
    var handleKeyDown = _react.useCallback(function(e) {
        if (e.key === 'Escape' || e.keyCode === 27) {
            e.stopPropagation();
            setIsUnloading(true);
        }
    }, []);
    var handleScroll = _react.useCallback(function() {
        forceUpdate(function(n) {
            return n + 1;
        });
        if (!isUnloading) setIsUnloading(true);
    }, [
        isUnloading
    ]);
    // listen for keydown on the document
    _useEventDefault.default('keydown', handleKeyDown, document);
    // listen for scroll and close
    _useEventDefault.default('scroll', handleScroll, scrollableEl);
    // set loaded on mount and focus
    _react.useEffect(function() {
        setIsLoaded(true);
        onLoad();
        if (btnRef.current) btnRef.current.focus({
            preventScroll: true
        });
    }, [
        onLoad
    ]);
    // if unloading, tell parent that we're all done here after Nms
    _react.useEffect(function() {
        var unloadTimeout = isUnloading ? setTimeout(onUnload, transitionDuration) : null;
        return function() {
            if (unloadTimeout) clearTimeout(unloadTimeout);
        };
    }, [
        isUnloading,
        onUnload,
        transitionDuration
    ]);
    // use parent element or fake one if it's not yet loaded
    var parentEl = parentRef.current || _helpersJs.pseudoParentEl;
    // get parent item's dimensions
    var _p = parentEl.getBoundingClientRect(), height = _p.height, left = _p.left, top = _p.top, width = _p.width;
    var overlayStyle = _helpersJs.getModalOverlayStyle({
        isLoaded: isLoaded,
        isUnloading: isUnloading,
        overlayBgColorEnd: overlayBgColorEnd,
        overlayBgColorStart: overlayBgColorStart,
        transitionDuration: transitionDuration,
        zoomZindex: zoomZindex
    });
    var contentStyle = _helpersJs.getModalContentStyle({
        height: height,
        isLoaded: isLoaded,
        innerHeight: innerHeight,
        innerWidth: innerWidth,
        isUnloading: isUnloading,
        left: left,
        originalTransform: parentEl.style.transform,
        top: top,
        transitionDuration: transitionDuration,
        width: width,
        zoomMargin: zoomMargin
    });
    return _reactDom.createPortal(_reactDefault.default.createElement("div", {
        "aria-modal": true,
        "data-rmiz-overlay": true,
        role: "dialog",
        style: overlayStyle
    }, _reactDefault.default.createElement("div", {
        "data-rmiz-modal-content": true,
        style: contentStyle
    }, children), _reactDefault.default.createElement("button", {
        "aria-label": closeText,
        "data-rmiz-btn-close": true,
        onClick: handleClick,
        ref: btnRef
    })), portalEl);
};
var UncontrolledActivated$1 = _react.memo(UncontrolledActivated);
var Uncontrolled = function(_a) {
    var children = _a.children, _b = _a.closeText, closeText = _b === void 0 ? 'Unzoom image' : _b, _c = _a.overlayBgColorEnd, overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c, _d = _a.overlayBgColorStart, overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d, portalEl = _a.portalEl, _e = _a.openText, openText = _e === void 0 ? 'Zoom image' : _e, scrollableEl = _a.scrollableEl, _f = _a.transitionDuration, transitionDuration = _f === void 0 ? 300 : _f, _g = _a.wrapElement, WrapElement = _g === void 0 ? 'div' : _g, wrapStyle = _a.wrapStyle, _h = _a.zoomMargin, zoomMargin = _h === void 0 ? 0 : _h, _j = _a.zoomZindex, zoomZindex = _j === void 0 ? 2147483647 : _j;
    var _k = _react.useState(false), isActive = _k[0], setIsActive = _k[1];
    var _l = _react.useState(false), isChildLoaded = _l[0], setIsChildLoaded = _l[1];
    var wrapRef = _react.useRef(null);
    var btnRef = _react.useRef(null);
    var handleClickTrigger = _react.useCallback(function(e) {
        if (!isActive) {
            e.preventDefault();
            setIsActive(true);
        }
    }, [
        isActive
    ]);
    var handleChildLoad = _react.useCallback(function() {
        setIsChildLoaded(true);
    }, []);
    var handleChildUnload = _react.useCallback(function() {
        setIsActive(false);
        setIsChildLoaded(false);
        if (btnRef.current) btnRef.current.focus({
            preventScroll: true
        });
    }, []);
    var isExpanded = isActive && isChildLoaded;
    var wrapType = isExpanded ? 'hidden' : 'visible';
    return _reactDefault.default.createElement(_react.StrictMode, null, _reactDefault.default.createElement(WrapElement, {
        "data-rmiz-wrap": wrapType,
        ref: wrapRef,
        style: wrapStyle
    }, children, _reactDefault.default.createElement("button", {
        "aria-label": openText,
        "data-rmiz-btn-open": true,
        onClick: handleClickTrigger,
        ref: btnRef
    }), typeof window !== 'undefined' && isActive && _reactDefault.default.createElement(UncontrolledActivated$1, {
        closeText: closeText,
        onLoad: handleChildLoad,
        onUnload: handleChildUnload,
        overlayBgColorEnd: overlayBgColorEnd,
        overlayBgColorStart: overlayBgColorStart,
        parentRef: wrapRef,
        portalEl: portalEl,
        scrollableEl: scrollableEl,
        transitionDuration: transitionDuration,
        zoomMargin: zoomMargin,
        zoomZindex: zoomZindex
    }, children)));
};
var Uncontrolled$1 = _react.memo(Uncontrolled);
exports.default = Uncontrolled$1;

},{"focus-options-polyfill":"ba3lJ","react":"6TuXu","react-dom":"gkWJK","react-use/lib/useEvent":"2btKj","react-use/lib/useWindowSize":"5pB7N","tslib":"bjkXk","./helpers.js":"gpqKL","react-use/lib/usePrevious":"hpPtT","./Controlled.js":"7OEJx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ba3lJ":[function(require,module,exports) {
// focus - focusOptions - preventScroll polyfill
(function() {
    if (typeof window === "undefined" || typeof document === "undefined" || typeof HTMLElement === "undefined") return;
    var supportsPreventScrollOption = false;
    try {
        var focusElem = document.createElement("div");
        focusElem.addEventListener("focus", function(event) {
            event.preventDefault();
            event.stopPropagation();
        }, true);
        focusElem.focus(Object.defineProperty({
        }, "preventScroll", {
            get: function() {
                supportsPreventScrollOption = true;
            }
        }));
    } catch (e) {
    }
    if (HTMLElement.prototype.nativeFocus === undefined && !supportsPreventScrollOption) {
        HTMLElement.prototype.nativeFocus = HTMLElement.prototype.focus;
        var patchedFocus = function(args) {
            var actualPosition = window.scrollY || window.pageYOffset;
            this.nativeFocus();
            if (args && args.preventScroll) // Hijacking the event loop order, since the focus() will trigger
            // internally an scroll that goes to the event loop
            setTimeout(function() {
                window.scroll(window.scrollX || window.pageXOffset, actualPosition);
            }, 0);
        };
        HTMLElement.prototype.focus = patchedFocus;
    }
})();

},{}],"2btKj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
var util_1 = require("./misc/util");
var defaultTarget = util_1.isBrowser ? window : null;
var isListenerType1 = function(target) {
    return !!target.addEventListener;
};
var isListenerType2 = function(target) {
    return !!target.on;
};
var useEvent = function(name, handler, target, options) {
    if (target === void 0) target = defaultTarget;
    react_1.useEffect(function() {
        if (!handler) return;
        if (!target) return;
        if (isListenerType1(target)) util_1.on(target, name, handler, options);
        else if (isListenerType2(target)) target.on(name, handler, options);
        return function() {
            if (isListenerType1(target)) util_1.off(target, name, handler, options);
            else if (isListenerType2(target)) target.off(name, handler, options);
        };
    }, [
        name,
        handler,
        target,
        JSON.stringify(options)
    ]);
};
exports.default = useEvent;

},{"react":"6TuXu","./misc/util":"ipebX"}],"ipebX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isNavigator = exports.isBrowser = exports.off = exports.on = exports.noop = void 0;
var noop = function() {
};
exports.noop = noop;
function on(obj) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    if (obj && obj.addEventListener) obj.addEventListener.apply(obj, args);
}
exports.on = on;
function off(obj) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    if (obj && obj.removeEventListener) obj.removeEventListener.apply(obj, args);
}
exports.off = off;
exports.isBrowser = typeof window !== 'undefined';
exports.isNavigator = typeof navigator !== 'undefined';

},{}],"5pB7N":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var react_1 = require("react");
var useRafState_1 = tslib_1.__importDefault(require("./useRafState"));
var util_1 = require("./misc/util");
var useWindowSize = function(initialWidth, initialHeight) {
    if (initialWidth === void 0) initialWidth = Infinity;
    if (initialHeight === void 0) initialHeight = Infinity;
    var _a = useRafState_1.default({
        width: util_1.isBrowser ? window.innerWidth : initialWidth,
        height: util_1.isBrowser ? window.innerHeight : initialHeight
    }), state = _a[0], setState = _a[1];
    react_1.useEffect(function() {
        if (util_1.isBrowser) {
            var handler_1 = function() {
                setState({
                    width: window.innerWidth,
                    height: window.innerHeight
                });
            };
            util_1.on(window, 'resize', handler_1);
            return function() {
                util_1.off(window, 'resize', handler_1);
            };
        }
    }, []);
    return state;
};
exports.default = useWindowSize;

},{"tslib":"bjkXk","react":"6TuXu","./useRafState":"iRIDH","./misc/util":"ipebX"}],"bjkXk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread
);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet
);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d1, b1) {
        d1.__proto__ = b1;
    } || function(d1, b1) {
        for(var p in b1)if (Object.prototype.hasOwnProperty.call(b1, p)) d1[p] = b1[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign1(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v1) {
            resolve({
                value: v1,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iRIDH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var react_1 = require("react");
var useUnmount_1 = tslib_1.__importDefault(require("./useUnmount"));
var useRafState = function(initialState) {
    var frame = react_1.useRef(0);
    var _a = react_1.useState(initialState), state = _a[0], setState = _a[1];
    var setRafState = react_1.useCallback(function(value) {
        cancelAnimationFrame(frame.current);
        frame.current = requestAnimationFrame(function() {
            setState(value);
        });
    }, []);
    useUnmount_1.default(function() {
        cancelAnimationFrame(frame.current);
    });
    return [
        state,
        setRafState
    ];
};
exports.default = useRafState;

},{"tslib":"bjkXk","react":"6TuXu","./useUnmount":"eQP04"}],"eQP04":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var react_1 = require("react");
var useEffectOnce_1 = tslib_1.__importDefault(require("./useEffectOnce"));
var useUnmount = function(fn) {
    var fnRef = react_1.useRef(fn);
    // update the ref each render so if it change the newest callback will be invoked
    fnRef.current = fn;
    useEffectOnce_1.default(function() {
        return function() {
            return fnRef.current();
        };
    });
};
exports.default = useUnmount;

},{"tslib":"bjkXk","react":"6TuXu","./useEffectOnce":"52yTb"}],"52yTb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
var useEffectOnce = function(effect) {
    react_1.useEffect(effect, []);
};
exports.default = useEffectOnce;

},{"react":"6TuXu"}],"gpqKL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getModalContentStyle", ()=>getModalContentStyle
);
parcelHelpers.export(exports, "getModalOverlayStyle", ()=>getModalOverlayStyle
);
parcelHelpers.export(exports, "getScale", ()=>getScale
);
parcelHelpers.export(exports, "pseudoParentEl", ()=>pseudoParentEl
);
var _tslib = require("tslib");
var toDurationString = function(duration) {
    return duration + "ms";
};
var getScale = function(_a) {
    var height = _a.height, innerHeight = _a.innerHeight, innerWidth = _a.innerWidth, width = _a.width, zoomMargin = _a.zoomMargin;
    var scaleX = innerWidth / (width + zoomMargin);
    var scaleY = innerHeight / (height + zoomMargin);
    var scale = Math.min(scaleX, scaleY);
    return scale;
};
var getModalContentStyle = function(_a) {
    var height = _a.height, innerHeight = _a.innerHeight, innerWidth = _a.innerWidth, isLoaded = _a.isLoaded, isUnloading = _a.isUnloading, left = _a.left, originalTransform = _a.originalTransform, top = _a.top, transitionDuration = _a.transitionDuration, width = _a.width, zoomMargin = _a.zoomMargin;
    var transitionDurationString = toDurationString(transitionDuration);
    if (!isLoaded || isUnloading) {
        var initTransform = _tslib.__spreadArrays([
            "scale(1)",
            "translate(0, 0)"
        ], originalTransform ? [
            originalTransform
        ] : []).join(' ');
        return {
            height: height,
            left: left,
            top: top,
            transform: initTransform,
            WebkitTransform: initTransform,
            transitionDuration: transitionDurationString,
            width: width
        };
    }
    // Get amount to scale item
    var scale = getScale({
        height: height,
        innerWidth: innerWidth,
        innerHeight: innerHeight,
        width: width,
        zoomMargin: zoomMargin
    });
    // Get the the coords for center of the viewport
    var viewportX = innerWidth / 2;
    var viewportY = innerHeight / 2;
    // Get the coords for center of the parent item
    var childCenterX = left + width / 2;
    var childCenterY = top + height / 2;
    // Get offset amounts for item coords to be centered on screen
    var translateX = (viewportX - childCenterX) / scale;
    var translateY = (viewportY - childCenterY) / scale;
    // Build transform style, including any original transform
    var transform = _tslib.__spreadArrays([
        "scale(" + scale + ")",
        "translate(" + translateX + "px, " + translateY + "px)"
    ], originalTransform ? [
        originalTransform
    ] : []).join(' ');
    return {
        height: height,
        left: left,
        top: top,
        transform: transform,
        WebkitTransform: transform,
        transitionDuration: transitionDurationString,
        width: width
    };
};
var getModalOverlayStyle = function(_a) {
    var isLoaded = _a.isLoaded, isUnloading = _a.isUnloading, overlayBgColorEnd = _a.overlayBgColorEnd, overlayBgColorStart = _a.overlayBgColorStart, transitionDuration = _a.transitionDuration, zoomZindex = _a.zoomZindex;
    var style = {
        backgroundColor: overlayBgColorStart,
        transitionDuration: toDurationString(transitionDuration),
        zIndex: zoomZindex
    };
    if (isLoaded && !isUnloading) style.backgroundColor = overlayBgColorEnd;
    return style;
};
var pseudoParentEl = {
    getBoundingClientRect: function() {
        return {
            height: 0,
            left: 0,
            top: 0,
            width: 0
        };
    },
    style: {
        transform: null
    }
};

},{"tslib":"bjkXk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hpPtT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
function usePrevious(state) {
    var ref = react_1.useRef();
    react_1.useEffect(function() {
        ref.current = state;
    });
    return ref.current;
}
exports.default = usePrevious;

},{"react":"6TuXu"}],"7OEJx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _focusOptionsPolyfill = require("focus-options-polyfill");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _useEvent = require("react-use/lib/useEvent");
var _useEventDefault = parcelHelpers.interopDefault(_useEvent);
var _useWindowSize = require("react-use/lib/useWindowSize");
var _useWindowSizeDefault = parcelHelpers.interopDefault(_useWindowSize);
var _tslib = require("tslib");
var _helpersJs = require("./helpers.js");
var _usePrevious = require("react-use/lib/usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var ControlledActivated = function(_a) {
    var children = _a.children, _b = _a.closeText, closeText = _b === void 0 ? 'Unzoom Image' : _b, isActiveFromParent = _a.isActive, onLoad = _a.onLoad, onUnload = _a.onUnload, onZoomChange = _a.onZoomChange, _c = _a.overlayBgColorEnd, overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c, _d = _a.overlayBgColorStart, overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d, parentRef = _a.parentRef, _e = _a.portalEl, portalEl = _e === void 0 ? document.body : _e, _f = _a.scrollableEl, scrollableEl = _f === void 0 ? window : _f, _g = _a.transitionDuration, transitionDuration = _g === void 0 ? 300 : _g, _h = _a.zoomMargin, zoomMargin = _h === void 0 ? 0 : _h, _j = _a.zoomZindex, zoomZindex = _j === void 0 ? 2147483647 : _j;
    var btnRef = _react.useRef(null);
    var _k = _react.useState(0), forceUpdate = _k[1];
    var _l = _react.useState(isActiveFromParent), isActive = _l[0], setIsActive = _l[1];
    var _m = _react.useState(false), isLoaded = _m[0], setIsLoaded = _m[1];
    var _o = _react.useState(false), isUnloading = _o[0], setIsUnloading = _o[1];
    var prevIsActive = _usePreviousDefault.default(isActive);
    var prevIsActiveFromParent = _usePreviousDefault.default(isActiveFromParent);
    var prevIsLoaded = _usePreviousDefault.default(isLoaded);
    var _p = _useWindowSizeDefault.default(), innerWidth = _p.width, innerHeight = _p.height;
    // on click, tell caller it should zoom
    var handleClick = _react.useCallback(function(e) {
        e.preventDefault();
        if (onZoomChange) onZoomChange(false);
    }, [
        onZoomChange
    ]);
    // on escape, tell caller it should unzoom
    var handleKeyDown = _react.useCallback(function(e) {
        if (isActive && (e.key === 'Escape' || e.keyCode === 27)) {
            e.stopPropagation();
            if (onZoomChange) onZoomChange(false);
        }
    }, [
        isActive,
        onZoomChange
    ]);
    var handleScroll = _react.useCallback(function() {
        forceUpdate(function(n) {
            return n + 1;
        });
        if (!isUnloading && onZoomChange) onZoomChange(false);
    }, [
        isUnloading,
        onZoomChange
    ]);
    // listen for keydown on the document
    _useEventDefault.default('keydown', handleKeyDown, document);
    // listen for scroll and close
    _useEventDefault.default('scroll', handleScroll, scrollableEl);
    // set loaded on mount and focus
    _react.useEffect(function() {
        if (!prevIsActive && isActive) {
            setIsLoaded(true);
            if (btnRef.current) btnRef.current.focus({
                preventScroll: true
            });
        }
    }, [
        isActive,
        prevIsActive
    ]);
    _react.useEffect(function() {
        // when parent says to deactivate, begin unloading process
        if (prevIsActiveFromParent && !isActiveFromParent) setIsUnloading(true);
        // when parent says to activate, begin active process
        if (!prevIsActiveFromParent && isActiveFromParent) setIsActive(true);
    }, [
        isActiveFromParent,
        prevIsActiveFromParent
    ]);
    // if unloading, tell parent that we're all done here after Nms
    _react.useEffect(function() {
        var unloadTimeout;
        if (isUnloading) unloadTimeout = setTimeout(function() {
            setIsLoaded(false);
            setIsActive(false);
            setIsUnloading(false);
        }, transitionDuration);
        return function() {
            clearTimeout(unloadTimeout);
        };
    }, [
        isUnloading,
        transitionDuration
    ]);
    // let parent know of changes to load status
    _react.useEffect(function() {
        if (!prevIsLoaded && isLoaded) onLoad();
        if (prevIsLoaded && !isLoaded) onUnload();
    }, [
        isLoaded,
        onLoad,
        onUnload,
        prevIsLoaded
    ]);
    // use parent element or fake one if it's not yet loaded
    var parentEl = parentRef.current || _helpersJs.pseudoParentEl;
    // get parent element's dimensions
    var _q = parentEl.getBoundingClientRect(), height = _q.height, left = _q.left, top = _q.top, width = _q.width;
    var overlayStyle = _helpersJs.getModalOverlayStyle({
        isLoaded: isLoaded,
        isUnloading: isUnloading,
        overlayBgColorEnd: overlayBgColorEnd,
        overlayBgColorStart: overlayBgColorStart,
        transitionDuration: transitionDuration,
        zoomZindex: zoomZindex
    });
    var contentStyle = _helpersJs.getModalContentStyle({
        height: height,
        isLoaded: isLoaded,
        innerHeight: innerHeight,
        innerWidth: innerWidth,
        isUnloading: isUnloading,
        left: left,
        originalTransform: parentEl.style.transform,
        top: top,
        transitionDuration: transitionDuration,
        width: width,
        zoomMargin: zoomMargin
    });
    return isActive ? _reactDom.createPortal(_reactDefault.default.createElement("div", {
        "aria-modal": true,
        "data-rmiz-overlay": true,
        role: "dialog",
        style: overlayStyle
    }, _reactDefault.default.createElement("div", {
        "data-rmiz-modal-content": true,
        style: contentStyle
    }, children), _reactDefault.default.createElement("button", {
        "aria-label": closeText,
        "data-rmiz-btn-close": true,
        onClick: handleClick,
        ref: btnRef,
        type: "button"
    })), portalEl) : null;
};
var ControlledActivated$1 = _react.memo(ControlledActivated);
var Controlled = function(_a) {
    var children = _a.children, _b = _a.closeText, closeText = _b === void 0 ? 'Unzoom image' : _b, isActive = _a.isZoomed, _c = _a.overlayBgColorEnd, overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c, _d = _a.overlayBgColorStart, overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d, portalEl = _a.portalEl, onZoomChange = _a.onZoomChange, _e = _a.openText, openText = _e === void 0 ? 'Zoom image' : _e, scrollableEl = _a.scrollableEl, _f = _a.transitionDuration, transitionDuration = _f === void 0 ? 300 : _f, _g = _a.wrapElement, WrapElement = _g === void 0 ? 'div' : _g, wrapStyle = _a.wrapStyle, _h = _a.zoomMargin, zoomMargin = _h === void 0 ? 0 : _h, _j = _a.zoomZindex, zoomZindex = _j === void 0 ? 2147483647 : _j;
    var _k = _react.useState(false), isChildLoaded = _k[0], setIsChildLoaded = _k[1];
    var wrapRef = _react.useRef(null);
    var btnRef = _react.useRef(null);
    var handleClickTrigger = _react.useCallback(function(e) {
        if (!isActive && onZoomChange) {
            e.preventDefault();
            onZoomChange(true);
        }
    }, [
        isActive,
        onZoomChange
    ]);
    var handleChildLoad = _react.useCallback(function() {
        setIsChildLoaded(true);
    }, []);
    var handleChildUnload = _react.useCallback(function() {
        setIsChildLoaded(false);
        if (btnRef.current) btnRef.current.focus({
            preventScroll: true
        });
    }, []);
    var wrapType = isChildLoaded ? 'hidden' : 'visible';
    return _reactDefault.default.createElement(_react.StrictMode, null, _reactDefault.default.createElement(WrapElement, {
        "data-rmiz-wrap": wrapType,
        ref: wrapRef,
        style: wrapStyle
    }, children, _reactDefault.default.createElement("button", {
        "aria-label": openText,
        "data-rmiz-btn-open": true,
        onClick: handleClickTrigger,
        ref: btnRef,
        type: "button"
    }), typeof window !== 'undefined' && _reactDefault.default.createElement(ControlledActivated$1, {
        closeText: closeText,
        isActive: isActive,
        onLoad: handleChildLoad,
        onUnload: handleChildUnload,
        onZoomChange: onZoomChange,
        overlayBgColorEnd: overlayBgColorEnd,
        overlayBgColorStart: overlayBgColorStart,
        parentRef: wrapRef,
        portalEl: portalEl,
        scrollableEl: scrollableEl,
        transitionDuration: transitionDuration,
        zoomMargin: zoomMargin,
        zoomZindex: zoomZindex
    }, children)));
};
var Controlled$1 = _react.memo(Controlled);
exports.default = Controlled$1;

},{"focus-options-polyfill":"ba3lJ","react":"6TuXu","react-dom":"gkWJK","react-use/lib/useEvent":"2btKj","react-use/lib/useWindowSize":"5pB7N","tslib":"bjkXk","./helpers.js":"gpqKL","react-use/lib/usePrevious":"hpPtT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e3nYk":[function() {},{}],"dIlbG":[function(require,module,exports) {
var global = arguments[3];
!function(e, t) {
    "object" == typeof exports && "object" == typeof module ? module.exports = t(require("react")) : "function" == typeof define && define.amd ? define([
        "react"
    ], t) : "object" == typeof exports ? exports.ImageGallery = t(require("react")) : e.ImageGallery = t(e.React);
}(this, function(e) {
    return (()=>{
        var t = {
            703: (e1, t1, n)=>{
                var i = n(414);
                function r() {
                }
                function a() {
                }
                a.resetWarningCache = r, e1.exports = function() {
                    function e2(e3, t2, n1, r1, a1, s) {
                        if (s !== i) {
                            var o = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
                            throw o.name = "Invariant Violation", o;
                        }
                    }
                    function t2() {
                        return e2;
                    }
                    e2.isRequired = e2;
                    var n1 = {
                        array: e2,
                        bool: e2,
                        func: e2,
                        number: e2,
                        object: e2,
                        string: e2,
                        symbol: e2,
                        any: e2,
                        arrayOf: t2,
                        element: e2,
                        elementType: e2,
                        instanceOf: t2,
                        node: e2,
                        objectOf: t2,
                        oneOf: t2,
                        oneOfType: t2,
                        shape: t2,
                        exact: t2,
                        checkPropTypes: a,
                        resetWarningCache: r
                    };
                    return n1.PropTypes = n1, n1;
                };
            },
            697: (e1, t1, n)=>{
                e1.exports = n(703)();
            },
            414: (e1)=>{
                "use strict";
                e1.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
            },
            590: (e1)=>{
                var t1 = "undefined" != typeof Element, n = "function" == typeof Map, i = "function" == typeof Set, r = "function" == typeof ArrayBuffer && !!ArrayBuffer.isView;
                function a(e2, s) {
                    if (e2 === s) return !0;
                    if (e2 && s && "object" == typeof e2 && "object" == typeof s) {
                        if (e2.constructor !== s.constructor) return !1;
                        var o, l, u, c;
                        if (Array.isArray(e2)) {
                            if ((o = e2.length) != s.length) return !1;
                            for(l = o; 0 != l--;)if (!a(e2[l], s[l])) return !1;
                            return !0;
                        }
                        if (n && e2 instanceof Map && s instanceof Map) {
                            if (e2.size !== s.size) return !1;
                            for(c = e2.entries(); !(l = c.next()).done;)if (!s.has(l.value[0])) return !1;
                            for(c = e2.entries(); !(l = c.next()).done;)if (!a(l.value[1], s.get(l.value[0]))) return !1;
                            return !0;
                        }
                        if (i && e2 instanceof Set && s instanceof Set) {
                            if (e2.size !== s.size) return !1;
                            for(c = e2.entries(); !(l = c.next()).done;)if (!s.has(l.value[0])) return !1;
                            return !0;
                        }
                        if (r && ArrayBuffer.isView(e2) && ArrayBuffer.isView(s)) {
                            if ((o = e2.length) != s.length) return !1;
                            for(l = o; 0 != l--;)if (e2[l] !== s[l]) return !1;
                            return !0;
                        }
                        if (e2.constructor === RegExp) return e2.source === s.source && e2.flags === s.flags;
                        if (e2.valueOf !== Object.prototype.valueOf) return e2.valueOf() === s.valueOf();
                        if (e2.toString !== Object.prototype.toString) return e2.toString() === s.toString();
                        if ((o = (u = Object.keys(e2)).length) !== Object.keys(s).length) return !1;
                        for(l = o; 0 != l--;)if (!Object.prototype.hasOwnProperty.call(s, u[l])) return !1;
                        if (t1 && e2 instanceof Element) return !1;
                        for(l = o; 0 != l--;)if (("_owner" !== u[l] && "__v" !== u[l] && "__o" !== u[l] || !e2.$$typeof) && !a(e2[u[l]], s[u[l]])) return !1;
                        return !0;
                    }
                    return e2 != e2 && s != s;
                }
                e1.exports = function(e2, t2) {
                    try {
                        return a(e2, t2);
                    } catch (e3) {
                        if ((e3.message || "").match(/stack|recursion/i)) return console.warn("react-fast-compare cannot handle circular refs"), !1;
                        throw e3;
                    }
                };
            },
            37: function(e1, t2, n) {
                !function(e2, t3) {
                    function n1() {
                        return (n1 = Object.assign || function(e3) {
                            for(var t4 = 1; t4 < arguments.length; t4++){
                                var n2 = arguments[t4];
                                for(var i in n2)Object.prototype.hasOwnProperty.call(n2, i) && (e3[i] = n2[i]);
                            }
                            return e3;
                        }).apply(this, arguments);
                    }
                    var i = "Left", r = "Right", a = "Down", s = {
                        delta: 10,
                        preventDefaultTouchmoveEvent: !1,
                        rotationAngle: 0,
                        trackMouse: !1,
                        trackTouch: !0
                    }, o = {
                        first: !0,
                        initial: [
                            0,
                            0
                        ],
                        start: 0,
                        swiping: !1,
                        xy: [
                            0,
                            0
                        ]
                    }, l = "mousemove", u = "mouseup";
                    function c(e3, t4) {
                        if (0 === t4) return e3;
                        var n3 = Math.PI / 180 * t4;
                        return [
                            e3[0] * Math.cos(n3) + e3[1] * Math.sin(n3),
                            e3[1] * Math.cos(n3) - e3[0] * Math.sin(n3)
                        ];
                    }
                    function h1(e3, t4) {
                        var s1 = function(t5) {
                            t5 && "touches" in t5 && t5.touches.length > 1 || e3(function(e4, i1) {
                                i1.trackMouse && (document.addEventListener(l, h2), document.addEventListener(u, f));
                                var r1 = "touches" in t5 ? t5.touches[0] : t5, a1 = c([
                                    r1.clientX,
                                    r1.clientY
                                ], i1.rotationAngle);
                                return n1({
                                }, e4, o, {
                                    initial: [].concat(a1),
                                    xy: a1,
                                    start: t5.timeStamp || 0
                                });
                            });
                        }, h2 = function(t5) {
                            e3(function(e4, s2) {
                                if ("touches" in t5 && t5.touches.length > 1) return e4;
                                var o1 = "touches" in t5 ? t5.touches[0] : t5, l1 = c([
                                    o1.clientX,
                                    o1.clientY
                                ], s2.rotationAngle), u1 = l1[0], h3 = l1[1], d = u1 - e4.xy[0], f = h3 - e4.xy[1], p = Math.abs(d), m = Math.abs(f), v = (t5.timeStamp || 0) - e4.start, g = Math.sqrt(p * p + m * m) / (v || 1), b = [
                                    d / (v || 1),
                                    f / (v || 1)
                                ];
                                if (p < s2.delta && m < s2.delta && !e4.swiping) return e4;
                                var y = function(e5, t6, n3, s3) {
                                    return e5 > t6 ? n3 > 0 ? r : i : s3 > 0 ? a : "Up";
                                }(p, m, d, f), w = {
                                    absX: p,
                                    absY: m,
                                    deltaX: d,
                                    deltaY: f,
                                    dir: y,
                                    event: t5,
                                    first: e4.first,
                                    initial: e4.initial,
                                    velocity: g,
                                    vxvy: b
                                };
                                s2.onSwiping && s2.onSwiping(w);
                                var T = !1;
                                return (s2.onSwiping || s2.onSwiped || "onSwiped" + y in s2) && (T = !0), T && s2.preventDefaultTouchmoveEvent && s2.trackTouch && t5.cancelable && t5.preventDefault(), n1({
                                }, e4, {
                                    first: !1,
                                    eventData: w,
                                    swiping: !0
                                });
                            });
                        }, d = function(t5) {
                            e3(function(e4, i1) {
                                var r1;
                                if (e4.swiping && e4.eventData) {
                                    r1 = n1({
                                    }, e4.eventData, {
                                        event: t5
                                    }), i1.onSwiped && i1.onSwiped(r1);
                                    var a1 = "onSwiped" + r1.dir;
                                    a1 in i1 && i1[a1](r1);
                                } else i1.onTap && i1.onTap({
                                    event: t5
                                });
                                return n1({
                                }, e4, o, {
                                    eventData: r1
                                });
                            });
                        }, f = function(e4) {
                            document.removeEventListener(l, h2), document.removeEventListener(u, f), d(e4);
                        }, p = function(e4, t5) {
                            var n3 = function() {
                            };
                            if (e4 && e4.addEventListener) {
                                var i1 = [
                                    [
                                        "touchstart",
                                        s1
                                    ],
                                    [
                                        "touchmove",
                                        h2
                                    ],
                                    [
                                        "touchend",
                                        d
                                    ]
                                ];
                                i1.forEach(function(n4) {
                                    var i2 = n4[0], r1 = n4[1];
                                    return e4.addEventListener(i2, r1, {
                                        passive: t5
                                    });
                                }), n3 = function() {
                                    return i1.forEach(function(t6) {
                                        var n4 = t6[0], i2 = t6[1];
                                        return e4.removeEventListener(n4, i2);
                                    });
                                };
                            }
                            return n3;
                        }, m = {
                            ref: function(t5) {
                                null !== t5 && e3(function(e4, i2) {
                                    if (e4.el === t5) return e4;
                                    var r1 = {
                                    };
                                    return e4.el && e4.el !== t5 && e4.cleanUpTouch && (e4.cleanUpTouch(), r1.cleanUpTouch = void 0), i2.trackTouch && t5 && (r1.cleanUpTouch = p(t5, !i2.preventDefaultTouchmoveEvent)), n1({
                                    }, e4, {
                                        el: t5
                                    }, r1);
                                });
                            }
                        };
                        return t4.trackMouse && (m.onMouseDown = s1), [
                            m,
                            p
                        ];
                    }
                    e2.DOWN = a, e2.LEFT = i, e2.RIGHT = r, e2.UP = "Up", e2.useSwipeable = function(e3) {
                        var i2 = e3.trackMouse, r1 = t3.useRef(n1({
                        }, o)), a2 = t3.useRef(n1({
                        }, s));
                        a2.current = n1({
                        }, s, e3);
                        var l1 = t3.useMemo(function() {
                            return h1(function(e4) {
                                return r1.current = e4(r1.current, a2.current);
                            }, {
                                trackMouse: i2
                            });
                        }, [
                            i2
                        ]), u1 = l1[0], c1 = l1[1];
                        return r1.current = (function(e4, t4, i3) {
                            var r2 = {
                            };
                            return !t4.trackTouch && e4.cleanUpTouch ? (e4.cleanUpTouch(), r2.cleanUpTouch = void 0) : t4.trackTouch && !e4.cleanUpTouch && e4.el && (r2.cleanUpTouch = i3(e4.el, !t4.preventDefaultTouchmoveEvent)), n1({
                            }, e4, r2);
                        })(r1.current, a2.current, c1), u1;
                    };
                }(t2, n(888));
            },
            888: (t2)=>{
                "use strict";
                t2.exports = e;
            }
        }, n1 = {
        };
        function i2(e1) {
            var r = n1[e1];
            if ((void 0) !== r) return r.exports;
            var a2 = n1[e1] = {
                exports: {
                }
            };
            return t[e1].call(a2.exports, a2, a2.exports, i2), a2.exports;
        }
        i2.n = (e1)=>{
            var t2 = e1 && e1.__esModule ? ()=>e1.default
             : ()=>e1
            ;
            return i2.d(t2, {
                a: t2
            }), t2;
        }, i2.d = (e1, t3)=>{
            for(var n3 in t3)i2.o(t3, n3) && !i2.o(e1, n3) && Object.defineProperty(e1, n3, {
                enumerable: !0,
                get: t3[n3]
            });
        }, i2.g = (function() {
            if ("object" == typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (e1) {
                if ("object" == typeof window) return window;
            }
        })(), i2.o = (e1, t3)=>Object.prototype.hasOwnProperty.call(e1, t3)
        , i2.r = (e1)=>{
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e1, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e1, "__esModule", {
                value: !0
            });
        };
        var r = {
        };
        return (()=>{
            function e1(t3) {
                var n4, i3, r1 = "";
                if ("string" == typeof t3 || "number" == typeof t3) r1 += t3;
                else if ("object" == typeof t3) {
                    if (Array.isArray(t3)) for(n4 = 0; n4 < t3.length; n4++)t3[n4] && (i3 = e1(t3[n4])) && (r1 && (r1 += " "), r1 += i3);
                    else for(n4 in t3)t3[n4] && (r1 && (r1 += " "), r1 += n4);
                }
                return r1;
            }
            function t3() {
                for(var t4, n4, i3 = 0, r1 = ""; i3 < arguments.length;)(t4 = arguments[i3++]) && (n4 = e1(t4)) && (r1 && (r1 += " "), r1 += n4);
                return r1;
            }
            i2.r(r), i2.d(r, {
                default: ()=>Me
            });
            var n4 = i2(888), a2 = i2.n(n4);
            const s = function(e2) {
                var t4 = typeof e2;
                return null != e2 && ("object" == t4 || "function" == t4);
            }, o1 = "object" == typeof global && global && global.Object === Object && global;
            var l1 = "object" == typeof self && self && self.Object === Object && self;
            const u = o1 || l1 || Function("return this")(), c = function() {
                return u.Date.now();
            };
            var h = /\s/;
            var d = /^\s+/;
            const f = function(e2) {
                return e2 ? e2.slice(0, function(e3) {
                    for(var t4 = e3.length; (t4--) && h.test(e3.charAt(t4)););
                    return t4;
                }(e2) + 1).replace(d, "") : e2;
            }, p = u.Symbol;
            var m = Object.prototype, v = m.hasOwnProperty, g = m.toString, b1 = p ? p.toStringTag : void 0;
            var y1 = Object.prototype.toString;
            var w = p ? p.toStringTag : void 0;
            const T = function(e2) {
                return null == e2 ? (void 0) === e2 ? "[object Undefined]" : "[object Null]" : w && w in Object(e2) ? (function(e3) {
                    var t4 = v.call(e3, b1), n5 = e3[b1];
                    try {
                        e3[b1] = void 0;
                        var i3 = !0;
                    } catch (e4) {
                    }
                    var r1 = g.call(e3);
                    return i3 && (t4 ? e3[b1] = n5 : delete e3[b1]), r1;
                })(e2) : (function(e3) {
                    return y1.call(e3);
                })(e2);
            };
            var S = /^[-+]0x[0-9a-f]+$/i, O = /^0b[01]+$/i, E = /^0o[0-7]+$/i, I = parseInt;
            const k = function(e2) {
                if ("number" == typeof e2) return e2;
                if ((function(e3) {
                    return "symbol" == typeof e3 || (function(e4) {
                        return null != e4 && "object" == typeof e4;
                    })(e3) && "[object Symbol]" == T(e3);
                })(e2)) return NaN;
                if (s(e2)) {
                    var t4 = "function" == typeof e2.valueOf ? e2.valueOf() : e2;
                    e2 = s(t4) ? t4 + "" : t4;
                }
                if ("string" != typeof e2) return 0 === e2 ? e2 : +e2;
                e2 = f(e2);
                var n5 = O.test(e2);
                return n5 || E.test(e2) ? I(e2.slice(2), n5 ? 2 : 8) : S.test(e2) ? NaN : +e2;
            };
            var x = Math.max, _ = Math.min;
            const L = function(e2, t5, n5) {
                var i3, r1, a3, o1, l1, u1, h1 = 0, d1 = !1, f1 = !1, p1 = !0;
                if ("function" != typeof e2) throw new TypeError("Expected a function");
                function m1(t6) {
                    var n6 = i3, a4 = r1;
                    return i3 = r1 = void 0, h1 = t6, o1 = e2.apply(a4, n6);
                }
                function v1(e3) {
                    return h1 = e3, l1 = setTimeout(b2, t5), d1 ? m1(e3) : o1;
                }
                function g1(e3) {
                    var n6 = e3 - u1;
                    return (void 0) === u1 || n6 >= t5 || n6 < 0 || f1 && e3 - h1 >= a3;
                }
                function b2() {
                    var e3 = c();
                    if (g1(e3)) return y2(e3);
                    l1 = setTimeout(b2, function(e4) {
                        var n6 = t5 - (e4 - u1);
                        return f1 ? _(n6, a3 - (e4 - h1)) : n6;
                    }(e3));
                }
                function y2(e3) {
                    return l1 = void 0, p1 && i3 ? m1(e3) : (i3 = r1 = void 0, o1);
                }
                function w1() {
                    var e3 = c(), n6 = g1(e3);
                    if (i3 = arguments, r1 = this, u1 = e3, n6) {
                        if ((void 0) === l1) return v1(u1);
                        if (f1) return clearTimeout(l1), l1 = setTimeout(b2, t5), m1(u1);
                    }
                    return (void 0) === l1 && (l1 = setTimeout(b2, t5)), o1;
                }
                return t5 = k(t5) || 0, s(n5) && (d1 = !!n5.leading, a3 = (f1 = "maxWait" in n5) ? x(k(n5.maxWait) || 0, t5) : a3, p1 = "trailing" in n5 ? !!n5.trailing : p1), w1.cancel = function() {
                    (void 0) !== l1 && clearTimeout(l1), h1 = 0, i3 = u1 = r1 = l1 = void 0;
                }, w1.flush = function() {
                    return (void 0) === l1 ? o1 : y2(c());
                }, w1;
            }, P = function(e2, t5, n5) {
                var i3 = !0, r1 = !0;
                if ("function" != typeof e2) throw new TypeError("Expected a function");
                return s(n5) && (i3 = "leading" in n5 ? !!n5.leading : i3, r1 = "trailing" in n5 ? !!n5.trailing : r1), L(e2, t5, {
                    leading: i3,
                    maxWait: t5,
                    trailing: r1
                });
            };
            var M = i2(590), R = i2.n(M), D = function() {
                if ("undefined" != typeof Map) return Map;
                function e2(e3, t5) {
                    var n5 = -1;
                    return e3.some(function(e4, i3) {
                        return e4[0] === t5 && (n5 = i3, !0);
                    }), n5;
                }
                return (function() {
                    function t5() {
                        this.__entries__ = [];
                    }
                    return Object.defineProperty(t5.prototype, "size", {
                        get: function() {
                            return this.__entries__.length;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t5.prototype.get = function(t6) {
                        var n5 = e2(this.__entries__, t6), i3 = this.__entries__[n5];
                        return i3 && i3[1];
                    }, t5.prototype.set = function(t6, n5) {
                        var i3 = e2(this.__entries__, t6);
                        ~i3 ? this.__entries__[i3][1] = n5 : this.__entries__.push([
                            t6,
                            n5
                        ]);
                    }, t5.prototype.delete = function(t6) {
                        var n5 = this.__entries__, i3 = e2(n5, t6);
                        ~i3 && n5.splice(i3, 1);
                    }, t5.prototype.has = function(t6) {
                        return !!~e2(this.__entries__, t6);
                    }, t5.prototype.clear = function() {
                        this.__entries__.splice(0);
                    }, t5.prototype.forEach = function(e3, t6) {
                        (void 0) === t6 && (t6 = null);
                        for(var n5 = 0, i3 = this.__entries__; n5 < i3.length; n5++){
                            var r1 = i3[n5];
                            e3.call(t6, r1[1], r1[0]);
                        }
                    }, t5;
                })();
            }(), F = "undefined" != typeof window && "undefined" != typeof document && window.document === document, C = (void 0) !== i2.g && i2.g.Math === Math ? i2.g : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(), W = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(C) : function(e2) {
                return setTimeout(function() {
                    return e2(Date.now());
                }, 1000 / 60);
            }, N = [
                "top",
                "right",
                "bottom",
                "left",
                "width",
                "height",
                "size",
                "weight"
            ], j = "undefined" != typeof MutationObserver, z = function() {
                function e2() {
                    this.connected_ = !1, this.mutationEventsAdded_ = !1, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = (function(e3, t5) {
                        var n5 = !1, i3 = !1, r2 = 0;
                        function a3() {
                            n5 && (n5 = !1, e3()), i3 && o2();
                        }
                        function s1() {
                            W(a3);
                        }
                        function o2() {
                            var e4 = Date.now();
                            if (n5) {
                                if (e4 - r2 < 2) return;
                                i3 = !0;
                            } else n5 = !0, i3 = !1, setTimeout(s1, 20);
                            r2 = e4;
                        }
                        return o2;
                    })(this.refresh.bind(this));
                }
                return e2.prototype.addObserver = function(e3) {
                    ~this.observers_.indexOf(e3) || this.observers_.push(e3), this.connected_ || this.connect_();
                }, e2.prototype.removeObserver = function(e3) {
                    var t5 = this.observers_, n5 = t5.indexOf(e3);
                    ~n5 && t5.splice(n5, 1), !t5.length && this.connected_ && this.disconnect_();
                }, e2.prototype.refresh = function() {
                    this.updateObservers_() && this.refresh();
                }, e2.prototype.updateObservers_ = function() {
                    var e3 = this.observers_.filter(function(e4) {
                        return e4.gatherActive(), e4.hasActive();
                    });
                    return e3.forEach(function(e4) {
                        return e4.broadcastActive();
                    }), e3.length > 0;
                }, e2.prototype.connect_ = function() {
                    F && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), j ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, {
                        attributes: !0,
                        childList: !0,
                        characterData: !0,
                        subtree: !0
                    })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = !0), this.connected_ = !0);
                }, e2.prototype.disconnect_ = function() {
                    F && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = !1, this.connected_ = !1);
                }, e2.prototype.onTransitionEnd_ = function(e3) {
                    var t5 = e3.propertyName, n5 = (void 0) === t5 ? "" : t5;
                    N.some(function(e4) {
                        return !!~n5.indexOf(e4);
                    }) && this.refresh();
                }, e2.getInstance = function() {
                    return this.instance_ || (this.instance_ = new e2), this.instance_;
                }, e2.instance_ = null, e2;
            }(), B = function(e2, t5) {
                for(var n5 = 0, i3 = Object.keys(t5); n5 < i3.length; n5++){
                    var r2 = i3[n5];
                    Object.defineProperty(e2, r2, {
                        value: t5[r2],
                        enumerable: !1,
                        writable: !1,
                        configurable: !0
                    });
                }
                return e2;
            }, A = function(e2) {
                return e2 && e2.ownerDocument && e2.ownerDocument.defaultView || C;
            }, G = V(0, 0, 0, 0);
            function U(e2) {
                return parseFloat(e2) || 0;
            }
            function H(e2) {
                for(var t5 = [], n5 = 1; n5 < arguments.length; n5++)t5[n5 - 1] = arguments[n5];
                return t5.reduce(function(t6, n6) {
                    return t6 + U(e2["border-" + n6 + "-width"]);
                }, 0);
            }
            var q = "undefined" != typeof SVGGraphicsElement ? function(e2) {
                return e2 instanceof A(e2).SVGGraphicsElement;
            } : function(e2) {
                return e2 instanceof A(e2).SVGElement && "function" == typeof e2.getBBox;
            };
            function K(e2) {
                return F ? q(e2) ? (function(e3) {
                    var t5 = e3.getBBox();
                    return V(0, 0, t5.width, t5.height);
                })(e2) : (function(e3) {
                    var t5 = e3.clientWidth, n5 = e3.clientHeight;
                    if (!t5 && !n5) return G;
                    var i3 = A(e3).getComputedStyle(e3), r3 = function(e4) {
                        for(var t6 = {
                        }, n6 = 0, i4 = [
                            "top",
                            "right",
                            "bottom",
                            "left"
                        ]; n6 < i4.length; n6++){
                            var r4 = i4[n6], a3 = e4["padding-" + r4];
                            t6[r4] = U(a3);
                        }
                        return t6;
                    }(i3), a4 = r3.left + r3.right, s1 = r3.top + r3.bottom, o2 = U(i3.width), l1 = U(i3.height);
                    if ("border-box" === i3.boxSizing && (Math.round(o2 + a4) !== t5 && (o2 -= H(i3, "left", "right") + a4), Math.round(l1 + s1) !== n5 && (l1 -= H(i3, "top", "bottom") + s1)), !function(e4) {
                        return e4 === A(e4).document.documentElement;
                    }(e3)) {
                        var u1 = Math.round(o2 + a4) - t5, c1 = Math.round(l1 + s1) - n5;
                        1 !== Math.abs(u1) && (o2 -= u1), 1 !== Math.abs(c1) && (l1 -= c1);
                    }
                    return V(r3.left, r3.top, o2, l1);
                })(e2) : G;
            }
            function V(e2, t5, n5, i3) {
                return {
                    x: e2,
                    y: t5,
                    width: n5,
                    height: i3
                };
            }
            var X = function() {
                function e2(e3) {
                    this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = V(0, 0, 0, 0), this.target = e3;
                }
                return e2.prototype.isActive = function() {
                    var e3 = K(this.target);
                    return this.contentRect_ = e3, e3.width !== this.broadcastWidth || e3.height !== this.broadcastHeight;
                }, e2.prototype.broadcastRect = function() {
                    var e3 = this.contentRect_;
                    return this.broadcastWidth = e3.width, this.broadcastHeight = e3.height, e3;
                }, e2;
            }(), Y = function(e2, t5) {
                var n5, i3, r3, a4, s1, o2, l1, u2 = (i3 = (n5 = t5).x, r3 = n5.y, a4 = n5.width, s1 = n5.height, o2 = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, l1 = Object.create(o2.prototype), B(l1, {
                    x: i3,
                    y: r3,
                    width: a4,
                    height: s1,
                    top: r3,
                    right: i3 + a4,
                    bottom: s1 + r3,
                    left: i3
                }), l1);
                B(this, {
                    target: e2,
                    contentRect: u2
                });
            }, $ = function() {
                function e2(e3, t5, n5) {
                    if (this.activeObservations_ = [], this.observations_ = new D, "function" != typeof e3) throw new TypeError("The callback provided as parameter 1 is not a function.");
                    this.callback_ = e3, this.controller_ = t5, this.callbackCtx_ = n5;
                }
                return e2.prototype.observe = function(e3) {
                    if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                    if ("undefined" != typeof Element && Element instanceof Object) {
                        if (!(e3 instanceof A(e3).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                        var t5 = this.observations_;
                        t5.has(e3) || (t5.set(e3, new X(e3)), this.controller_.addObserver(this), this.controller_.refresh());
                    }
                }, e2.prototype.unobserve = function(e3) {
                    if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                    if ("undefined" != typeof Element && Element instanceof Object) {
                        if (!(e3 instanceof A(e3).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                        var t6 = this.observations_;
                        t6.has(e3) && (t6.delete(e3), t6.size || this.controller_.removeObserver(this));
                    }
                }, e2.prototype.disconnect = function() {
                    this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
                }, e2.prototype.gatherActive = function() {
                    var e3 = this;
                    this.clearActive(), this.observations_.forEach(function(t7) {
                        t7.isActive() && e3.activeObservations_.push(t7);
                    });
                }, e2.prototype.broadcastActive = function() {
                    if (this.hasActive()) {
                        var e3 = this.callbackCtx_, t7 = this.activeObservations_.map(function(e4) {
                            return new Y(e4.target, e4.broadcastRect());
                        });
                        this.callback_.call(e3, t7, e3), this.clearActive();
                    }
                }, e2.prototype.clearActive = function() {
                    this.activeObservations_.splice(0);
                }, e2.prototype.hasActive = function() {
                    return this.activeObservations_.length > 0;
                }, e2;
            }(), J = "undefined" != typeof WeakMap ? new WeakMap : new D, Q = function e2(t8) {
                if (!(this instanceof e2)) throw new TypeError("Cannot call a class as a function.");
                if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                var n5 = z.getInstance(), i3 = new $(t8, n5, this);
                J.set(this, i3);
            };
            [
                "observe",
                "unobserve",
                "disconnect"
            ].forEach(function(e4) {
                Q.prototype[e4] = function() {
                    var t8;
                    return (t8 = J.get(this))[e4].apply(t8, arguments);
                };
            });
            const Z = (void 0) !== C.ResizeObserver ? C.ResizeObserver : Q;
            var ee = i2(37), te = i2(697), ne = a2().memo(function(e4) {
                var t8 = e4.description, n5 = e4.fullscreen, i3 = e4.handleImageLoaded, r3 = e4.isFullscreen, s1 = e4.onImageError, o2 = e4.original, l1 = e4.originalAlt, u2 = e4.originalHeight, c2 = e4.originalWidth, h1 = e4.originalTitle, d1 = e4.sizes, f1 = e4.srcSet, p1 = r3 && n5 || o2;
                return a2().createElement(a2().Fragment, null, a2().createElement("img", {
                    className: "image-gallery-image",
                    src: p1,
                    alt: l1,
                    srcSet: f1,
                    height: u2,
                    width: c2,
                    sizes: d1,
                    title: h1,
                    onLoad: function(e5) {
                        return i3(e5, o2);
                    },
                    onError: s1
                }), t8 && a2().createElement("span", {
                    className: "image-gallery-description"
                }, t8));
            });
            ne.displayName = "Item", ne.propTypes = {
                description: te.string,
                fullscreen: te.string,
                handleImageLoaded: te.func.isRequired,
                isFullscreen: te.bool,
                onImageError: te.func.isRequired,
                original: te.string.isRequired,
                originalAlt: te.string,
                originalHeight: te.string,
                originalWidth: te.string,
                originalTitle: te.string,
                sizes: te.string,
                srcSet: te.string
            }, ne.defaultProps = {
                description: "",
                fullscreen: "",
                isFullscreen: !1,
                originalAlt: "",
                originalHeight: "",
                originalWidth: "",
                originalTitle: "",
                sizes: "",
                srcSet: ""
            };
            const ie = ne;
            var re = {
                left: a2().createElement("polyline", {
                    points: "15 18 9 12 15 6"
                }),
                right: a2().createElement("polyline", {
                    points: "9 18 15 12 9 6"
                }),
                maximize: a2().createElement("path", {
                    d: "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
                }),
                minimize: a2().createElement("path", {
                    d: "M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"
                }),
                play: a2().createElement("polygon", {
                    points: "5 3 19 12 5 21 5 3"
                }),
                pause: a2().createElement(a2().Fragment, null, a2().createElement("rect", {
                    x: "6",
                    y: "4",
                    width: "4",
                    height: "16"
                }), a2().createElement("rect", {
                    x: "14",
                    y: "4",
                    width: "4",
                    height: "16"
                }))
            }, ae = function(e4) {
                var t8 = e4.strokeWidth, n5 = e4.viewBox, i3 = e4.icon;
                return a2().createElement("svg", {
                    className: "image-gallery-svg",
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: n5,
                    fill: "none",
                    stroke: "currentColor",
                    strokeWidth: t8,
                    strokeLinecap: "round",
                    strokeLinejoin: "round"
                }, re[i3]);
            };
            ae.propTypes = {
                strokeWidth: te.number,
                viewBox: te.string,
                icon: te.oneOf([
                    "left",
                    "right",
                    "maximize",
                    "minimize",
                    "play",
                    "pause"
                ]).isRequired
            }, ae.defaultProps = {
                strokeWidth: 1,
                viewBox: "0 0 24 24"
            };
            const se = ae;
            var oe = a2().memo(function(e4) {
                var t8 = e4.isFullscreen, n5 = e4.onClick;
                return a2().createElement("button", {
                    type: "button",
                    className: "image-gallery-icon image-gallery-fullscreen-button",
                    onClick: n5,
                    "aria-label": "Open Fullscreen"
                }, a2().createElement(se, {
                    strokeWidth: 2,
                    icon: t8 ? "minimize" : "maximize"
                }));
            });
            oe.displayName = "Fullscreen", oe.propTypes = {
                isFullscreen: te.bool.isRequired,
                onClick: te.func.isRequired
            };
            const le = oe;
            var ue = a2().memo(function(e4) {
                var t8 = e4.disabled, n5 = e4.onClick;
                return a2().createElement("button", {
                    type: "button",
                    className: "image-gallery-icon image-gallery-left-nav",
                    disabled: t8,
                    onClick: n5,
                    "aria-label": "Previous Slide"
                }, a2().createElement(se, {
                    icon: "left",
                    viewBox: "6 0 12 24"
                }));
            });
            ue.displayName = "LeftNav", ue.propTypes = {
                disabled: te.bool.isRequired,
                onClick: te.func.isRequired
            };
            const ce = ue;
            var he = a2().memo(function(e4) {
                var t8 = e4.disabled, n5 = e4.onClick;
                return a2().createElement("button", {
                    type: "button",
                    className: "image-gallery-icon image-gallery-right-nav",
                    disabled: t8,
                    onClick: n5,
                    "aria-label": "Next Slide"
                }, a2().createElement(se, {
                    icon: "right",
                    viewBox: "6 0 12 24"
                }));
            });
            he.displayName = "RightNav", he.propTypes = {
                disabled: te.bool.isRequired,
                onClick: te.func.isRequired
            };
            const de = he;
            var fe = a2().memo(function(e4) {
                var t8 = e4.isPlaying, n5 = e4.onClick;
                return a2().createElement("button", {
                    type: "button",
                    className: "image-gallery-icon image-gallery-play-button",
                    onClick: n5,
                    "aria-label": "Play or Pause Slideshow"
                }, a2().createElement(se, {
                    strokeWidth: 2,
                    icon: t8 ? "pause" : "play"
                }));
            });
            fe.displayName = "PlayPause", fe.propTypes = {
                isPlaying: te.bool.isRequired,
                onClick: te.func.isRequired
            };
            const pe = fe;
            function me() {
                return (me = Object.assign || function(e4) {
                    for(var t8 = 1; t8 < arguments.length; t8++){
                        var n5 = arguments[t8];
                        for(var i3 in n5)Object.prototype.hasOwnProperty.call(n5, i3) && (e4[i3] = n5[i3]);
                    }
                    return e4;
                }).apply(this, arguments);
            }
            var ve = function(e4) {
                var t8 = e4.children, n6 = e4.className, i4 = e4.delta, r3 = e4.onSwiping, s1 = e4.onSwiped, o2 = ee.useSwipeable({
                    delta: i4,
                    onSwiping: r3,
                    onSwiped: s1
                });
                return a2().createElement("div", me({
                }, o2, {
                    className: n6
                }), t8);
            };
            ve.propTypes = {
                children: te.node.isRequired,
                className: te.string,
                delta: te.number,
                onSwiped: te.func,
                onSwiping: te.func
            }, ve.defaultProps = {
                className: "",
                delta: 0,
                onSwiping: function() {
                },
                onSwiped: function() {
                }
            };
            const ge = ve;
            function be(e4) {
                return (be = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
                    return typeof e5;
                } : function(e5) {
                    return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
                })(e4);
            }
            function ye(e4, t8) {
                var n6 = Object.keys(e4);
                if (Object.getOwnPropertySymbols) {
                    var i4 = Object.getOwnPropertySymbols(e4);
                    t8 && (i4 = i4.filter(function(t9) {
                        return Object.getOwnPropertyDescriptor(e4, t9).enumerable;
                    })), n6.push.apply(n6, i4);
                }
                return n6;
            }
            function we(e4) {
                for(var t8 = 1; t8 < arguments.length; t8++){
                    var n6 = null != arguments[t8] ? arguments[t8] : {
                    };
                    t8 % 2 ? ye(Object(n6), !0).forEach(function(t9) {
                        Te(e4, t9, n6[t9]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(n6)) : ye(Object(n6)).forEach(function(t9) {
                        Object.defineProperty(e4, t9, Object.getOwnPropertyDescriptor(n6, t9));
                    });
                }
                return e4;
            }
            function Te(e4, t8, n7) {
                return t8 in e4 ? Object.defineProperty(e4, t8, {
                    value: n7,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e4[t8] = n7, e4;
            }
            function Se(e4, t8) {
                for(var n7 = 0; n7 < t8.length; n7++){
                    var i5 = t8[n7];
                    i5.enumerable = i5.enumerable || !1, i5.configurable = !0, "value" in i5 && (i5.writable = !0), Object.defineProperty(e4, i5.key, i5);
                }
            }
            function Oe(e4, t8) {
                return (Oe = Object.setPrototypeOf || function(e5, t9) {
                    return e5.__proto__ = t9, e5;
                })(e4, t8);
            }
            function Ee(e4, t8) {
                return !t8 || "object" !== be(t8) && "function" != typeof t8 ? Ie(e4) : t8;
            }
            function Ie(e4) {
                if ((void 0) === e4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return e4;
            }
            function ke(e4) {
                return (ke = Object.setPrototypeOf ? Object.getPrototypeOf : function(e5) {
                    return e5.__proto__ || Object.getPrototypeOf(e5);
                })(e4);
            }
            var xe = [
                "fullscreenchange",
                "MSFullscreenChange",
                "mozfullscreenchange",
                "webkitfullscreenchange"
            ], _e = te.arrayOf(te.shape({
                srcSet: te.string,
                media: te.string
            }));
            function Le(e4) {
                var t8 = parseInt(e4.keyCode || e4.which || 0, 10);
                return 66 === t8 || 62 === t8;
            }
            var Pe = function(e4) {
                !function(e5, t8) {
                    if ("function" != typeof t8 && null !== t8) throw new TypeError("Super expression must either be null or a function");
                    e5.prototype = Object.create(t8 && t8.prototype, {
                        constructor: {
                            value: e5,
                            writable: !0,
                            configurable: !0
                        }
                    }), t8 && Oe(e5, t8);
                }(l2, e4);
                var n7, i6, r3, s1, o2 = (r3 = l2, s1 = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                        })), !0;
                    } catch (e5) {
                        return !1;
                    }
                }(), function() {
                    var e5, t8 = ke(r3);
                    if (s1) {
                        var n8 = ke(this).constructor;
                        e5 = Reflect.construct(t8, arguments, n8);
                    } else e5 = t8.apply(this, arguments);
                    return Ee(this, e5);
                });
                function l2(e5) {
                    var t8;
                    return (function(e6, t9) {
                        if (!(e6 instanceof t9)) throw new TypeError("Cannot call a class as a function");
                    })(this, l2), (t8 = o2.call(this, e5)).state = {
                        currentIndex: e5.startIndex,
                        thumbsTranslate: 0,
                        thumbsSwipedTranslate: 0,
                        currentSlideOffset: 0,
                        galleryWidth: 0,
                        thumbnailsWrapperWidth: 0,
                        thumbnailsWrapperHeight: 0,
                        thumbsStyle: {
                            transition: "all ".concat(e5.slideDuration, "ms ease-out")
                        },
                        isFullscreen: !1,
                        isSwipingThumbnail: !1,
                        isPlaying: !1
                    }, t8.loadedImages = {
                    }, t8.imageGallery = a2().createRef(), t8.thumbnailsWrapper = a2().createRef(), t8.thumbnails = a2().createRef(), t8.imageGallerySlideWrapper = a2().createRef(), t8.handleImageLoaded = t8.handleImageLoaded.bind(Ie(t8)), t8.handleKeyDown = t8.handleKeyDown.bind(Ie(t8)), t8.handleMouseDown = t8.handleMouseDown.bind(Ie(t8)), t8.handleTouchMove = t8.handleTouchMove.bind(Ie(t8)), t8.handleOnSwiped = t8.handleOnSwiped.bind(Ie(t8)), t8.handleScreenChange = t8.handleScreenChange.bind(Ie(t8)), t8.handleSwiping = t8.handleSwiping.bind(Ie(t8)), t8.handleThumbnailSwiping = t8.handleThumbnailSwiping.bind(Ie(t8)), t8.handleOnThumbnailSwiped = t8.handleOnThumbnailSwiped.bind(Ie(t8)), t8.onThumbnailMouseLeave = t8.onThumbnailMouseLeave.bind(Ie(t8)), t8.handleImageError = t8.handleImageError.bind(Ie(t8)), t8.pauseOrPlay = t8.pauseOrPlay.bind(Ie(t8)), t8.renderThumbInner = t8.renderThumbInner.bind(Ie(t8)), t8.renderItem = t8.renderItem.bind(Ie(t8)), t8.slideLeft = t8.slideLeft.bind(Ie(t8)), t8.slideRight = t8.slideRight.bind(Ie(t8)), t8.toggleFullScreen = t8.toggleFullScreen.bind(Ie(t8)), t8.togglePlay = t8.togglePlay.bind(Ie(t8)), t8.unthrottledSlideToIndex = t8.slideToIndex, t8.slideToIndex = P(t8.unthrottledSlideToIndex, e5.slideDuration, {
                        trailing: !1
                    }), e5.lazyLoad && (t8.lazyLoaded = []), t8;
                }
                return n7 = l2, i6 = [
                    {
                        key: "componentDidMount",
                        value: function() {
                            var e5 = this.props, t8 = e5.autoPlay, n9 = e5.useWindowKeyDown;
                            t8 && this.play(), n9 ? window.addEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.addEventListener("keydown", this.handleKeyDown), window.addEventListener("mousedown", this.handleMouseDown), window.addEventListener("touchmove", this.handleTouchMove, {
                                passive: !1
                            }), this.initResizeObserver(this.imageGallerySlideWrapper), this.addScreenChangeEvent();
                        }
                    },
                    {
                        key: "componentDidUpdate",
                        value: function(e5, t8) {
                            var n9 = this.props, i7 = n9.items, r5 = n9.lazyLoad, a4 = n9.slideDuration, s2 = n9.slideInterval, o3 = n9.startIndex, l3 = n9.thumbnailPosition, u2 = n9.showThumbnails, c2 = n9.useWindowKeyDown, h1 = this.state.currentIndex, d1 = e5.items.length !== i7.length, f1 = !R()(e5.items, i7), p1 = e5.startIndex !== o3, m1 = e5.thumbnailPosition !== l3, v1 = e5.showThumbnails !== u2;
                            s2 === e5.slideInterval && a4 === e5.slideDuration || (this.pause(), this.play()), m1 && (this.removeResizeObserver(), this.initResizeObserver(this.imageGallerySlideWrapper)), (d1 || v1) && this.handleResize(), t8.currentIndex !== h1 && this.slideThumbnailBar(), e5.slideDuration !== a4 && (this.slideToIndex = P(this.unthrottledSlideToIndex, a4, {
                                trailing: !1
                            })), !r5 || e5.lazyLoad && !f1 || (this.lazyLoaded = []), c2 !== e5.useWindowKeyDown && (c2 ? (this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown), window.addEventListener("keydown", this.handleKeyDown)) : (window.removeEventListener("keydown", this.handleKeyDown), this.imageGallery.current.addEventListener("keydown", this.handleKeyDown))), (p1 || f1) && this.setState({
                                currentIndex: o3
                            });
                        }
                    },
                    {
                        key: "componentWillUnmount",
                        value: function() {
                            var e5 = this.props.useWindowKeyDown;
                            window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("touchmove", this.handleTouchMove), this.removeScreenChangeEvent(), this.removeResizeObserver(), this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null), this.transitionTimer && window.clearTimeout(this.transitionTimer), e5 ? window.removeEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown);
                        }
                    },
                    {
                        key: "onSliding",
                        value: function() {
                            var e5 = this, t8 = this.state, n9 = t8.currentIndex, i7 = t8.isTransitioning, r5 = this.props, a4 = r5.onSlide, s2 = r5.slideDuration;
                            this.transitionTimer = window.setTimeout(function() {
                                i7 && (e5.setState({
                                    isTransitioning: !i7,
                                    isSwipingThumbnail: !1
                                }), a4 && a4(n9));
                            }, s2 + 50);
                        }
                    },
                    {
                        key: "onThumbnailClick",
                        value: function(e5, t8) {
                            var n9 = this.props.onThumbnailClick;
                            e5.target.parentNode.parentNode.blur(), this.slideToIndex(t8, e5), n9 && n9(e5, t8);
                        }
                    },
                    {
                        key: "onThumbnailMouseOver",
                        value: function(e5, t8) {
                            var n9 = this;
                            this.thumbnailMouseOverTimer && (window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null), this.thumbnailMouseOverTimer = window.setTimeout(function() {
                                n9.slideToIndex(t8), n9.pause();
                            }, 300);
                        }
                    },
                    {
                        key: "onThumbnailMouseLeave",
                        value: function() {
                            if (this.thumbnailMouseOverTimer) {
                                var e5 = this.props.autoPlay;
                                window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null, e5 && this.play();
                            }
                        }
                    },
                    {
                        key: "setThumbsTranslate",
                        value: function(e6) {
                            this.setState({
                                thumbsTranslate: e6
                            });
                        }
                    },
                    {
                        key: "setModalFullscreen",
                        value: function(e6) {
                            var t8 = this.props.onScreenChange;
                            this.setState({
                                modalFullscreen: e6
                            }), t8 && t8(e6);
                        }
                    },
                    {
                        key: "getThumbsTranslate",
                        value: function(e6) {
                            var t8, n9 = this.props, i7 = n9.disableThumbnailScroll, r5 = n9.items, a4 = this.state, s2 = a4.thumbnailsWrapperWidth, o3 = a4.thumbnailsWrapperHeight, l3 = this.thumbnails && this.thumbnails.current;
                            if (i7) return 0;
                            if (l3) {
                                if (this.isThumbnailVertical()) {
                                    if (l3.scrollHeight <= o3) return 0;
                                    t8 = l3.scrollHeight - o3;
                                } else {
                                    if (l3.scrollWidth <= s2 || s2 <= 0) return 0;
                                    t8 = l3.scrollWidth - s2;
                                }
                                return e6 * (t8 / (r5.length - 1));
                            }
                            return 0;
                        }
                    },
                    {
                        key: "getAlignmentClassName",
                        value: function(e6) {
                            var t8 = this.state.currentIndex, n9 = this.props, i7 = n9.infinite, r5 = n9.items, a4 = "", s2 = "left", o3 = "right";
                            switch(e6){
                                case t8 - 1:
                                    a4 = " ".concat(s2);
                                    break;
                                case t8:
                                    a4 = " ".concat("center");
                                    break;
                                case t8 + 1:
                                    a4 = " ".concat(o3);
                            }
                            return r5.length >= 3 && i7 && (0 === e6 && t8 === r5.length - 1 ? a4 = " ".concat(o3) : e6 === r5.length - 1 && 0 === t8 && (a4 = " ".concat(s2))), a4;
                        }
                    },
                    {
                        key: "getTranslateXForTwoSlide",
                        value: function(e6) {
                            var t8 = this.state, n9 = t8.currentIndex, i7 = t8.currentSlideOffset, r5 = t8.previousIndex, a4 = n9 !== r5, s2 = 0 === e6 && 0 === r5, o3 = 1 === e6 && 1 === r5, l3 = 0 === e6 && 1 === n9, u2 = 1 === e6 && 0 === n9, c2 = 0 === i7, h1 = -100 * n9 + 100 * e6 + i7;
                            return i7 > 0 ? this.direction = "left" : i7 < 0 && (this.direction = "right"), u2 && i7 > 0 && (h1 = -100 + i7), l3 && i7 < 0 && (h1 = 100 + i7), a4 ? s2 && c2 && "left" === this.direction ? h1 = 100 : o3 && c2 && "right" === this.direction && (h1 = -100) : (u2 && c2 && "left" === this.direction && (h1 = -100), l3 && c2 && "right" === this.direction && (h1 = 100)), h1;
                        }
                    },
                    {
                        key: "getThumbnailBarHeight",
                        value: function() {
                            return this.isThumbnailVertical() ? {
                                height: this.state.gallerySlideWrapperHeight
                            } : {
                            };
                        }
                    },
                    {
                        key: "getSlideStyle",
                        value: function(e6) {
                            var t8 = this.state, n9 = t8.currentIndex, i7 = t8.currentSlideOffset, r5 = t8.slideStyle, a4 = this.props, s2 = a4.infinite, o3 = a4.items, l3 = a4.useTranslate3D, u2 = a4.isRTL, c2 = -100 * n9, h1 = o3.length - 1, d1 = (c2 + 100 * e6) * (u2 ? -1 : 1) + i7;
                            s2 && o3.length > 2 && (0 === n9 && e6 === h1 ? d1 = -100 * (u2 ? -1 : 1) + i7 : n9 === h1 && 0 === e6 && (d1 = 100 * (u2 ? -1 : 1) + i7)), s2 && 2 === o3.length && (d1 = this.getTranslateXForTwoSlide(e6));
                            var f1 = "translate(".concat(d1, "%, 0)");
                            return l3 && (f1 = "translate3d(".concat(d1, "%, 0, 0)")), we({
                                display: this.isSlideVisible(e6) ? "inherit" : "none",
                                WebkitTransform: f1,
                                MozTransform: f1,
                                msTransform: f1,
                                OTransform: f1,
                                transform: f1
                            }, r5);
                        }
                    },
                    {
                        key: "getCurrentIndex",
                        value: function() {
                            return this.state.currentIndex;
                        }
                    },
                    {
                        key: "getThumbnailStyle",
                        value: function() {
                            var e6, t8 = this.props, n9 = t8.useTranslate3D, i7 = t8.isRTL, r5 = this.state, a4 = r5.thumbsTranslate, s2 = r5.thumbsStyle, o3 = i7 ? -1 * a4 : a4;
                            return this.isThumbnailVertical() ? (e6 = "translate(0, ".concat(a4, "px)"), n9 && (e6 = "translate3d(0, ".concat(a4, "px, 0)"))) : (e6 = "translate(".concat(o3, "px, 0)"), n9 && (e6 = "translate3d(".concat(o3, "px, 0, 0)"))), we({
                                WebkitTransform: e6,
                                MozTransform: e6,
                                msTransform: e6,
                                OTransform: e6,
                                transform: e6
                            }, s2);
                        }
                    },
                    {
                        key: "getSlideItems",
                        value: function() {
                            var e6 = this, n9 = this.state.currentIndex, i7 = this.props, r5 = i7.items, s2 = i7.slideOnThumbnailOver, o3 = i7.onClick, l3 = i7.lazyLoad, u2 = i7.onTouchMove, c2 = i7.onTouchEnd, h1 = i7.onTouchStart, d1 = i7.onMouseOver, f1 = i7.onMouseLeave, p1 = i7.renderItem, m1 = i7.renderThumbInner, v1 = i7.showThumbnails, g1 = i7.showBullets, b2 = [], y2 = [], w1 = [];
                            return r5.forEach(function(i8, r6) {
                                var T1 = e6.getAlignmentClassName(r6), S1 = i8.originalClass ? " ".concat(i8.originalClass) : "", O1 = i8.thumbnailClass ? " ".concat(i8.thumbnailClass) : "", E1 = i8.renderItem || p1 || e6.renderItem, I1 = i8.renderThumbInner || m1 || e6.renderThumbInner, k1 = !l3 || T1 || e6.lazyLoaded[r6];
                                k1 && l3 && !e6.lazyLoaded[r6] && (e6.lazyLoaded[r6] = !0);
                                var x1 = e6.getSlideStyle(r6), _1 = a2().createElement("div", {
                                    "aria-label": "Go to Slide ".concat(r6 + 1),
                                    key: "slide-".concat(r6),
                                    tabIndex: "-1",
                                    className: "image-gallery-slide ".concat(T1, " ").concat(S1),
                                    style: x1,
                                    onClick: o3,
                                    onKeyUp: e6.handleSlideKeyUp,
                                    onTouchMove: u2,
                                    onTouchEnd: c2,
                                    onTouchStart: h1,
                                    onMouseOver: d1,
                                    onFocus: d1,
                                    onMouseLeave: f1,
                                    role: "button"
                                }, k1 ? E1(i8) : a2().createElement("div", {
                                    style: {
                                        height: "100%"
                                    }
                                }));
                                if (b2.push(_1), v1 && i8.thumbnail) {
                                    var L1 = t3("image-gallery-thumbnail", O1, {
                                        active: n9 === r6
                                    });
                                    y2.push(a2().createElement("button", {
                                        key: "thumbnail-".concat(r6),
                                        type: "button",
                                        tabIndex: "0",
                                        "aria-pressed": n9 === r6 ? "true" : "false",
                                        "aria-label": "Go to Slide ".concat(r6 + 1),
                                        className: L1,
                                        onMouseLeave: s2 ? e6.onThumbnailMouseLeave : null,
                                        onMouseOver: function(t8) {
                                            return e6.handleThumbnailMouseOver(t8, r6);
                                        },
                                        onFocus: function(t8) {
                                            return e6.handleThumbnailMouseOver(t8, r6);
                                        },
                                        onKeyUp: function(t8) {
                                            return e6.handleThumbnailKeyUp(t8, r6);
                                        },
                                        onClick: function(t8) {
                                            return e6.onThumbnailClick(t8, r6);
                                        }
                                    }, I1(i8)));
                                }
                                if (g1) {
                                    var P1 = t3("image-gallery-bullet", i8.bulletClass, {
                                        active: n9 === r6
                                    });
                                    w1.push(a2().createElement("button", {
                                        type: "button",
                                        key: "bullet-".concat(r6),
                                        className: P1,
                                        onClick: function(t8) {
                                            return i8.bulletOnClick && i8.bulletOnClick({
                                                item: i8,
                                                itemIndex: r6,
                                                currentIndex: n9
                                            }), t8.target.blur(), e6.slideToIndex.call(e6, r6, t8);
                                        },
                                        "aria-pressed": n9 === r6 ? "true" : "false",
                                        "aria-label": "Go to Slide ".concat(r6 + 1)
                                    }));
                                }
                            }), {
                                slides: b2,
                                thumbnails: y2,
                                bullets: w1
                            };
                        }
                    },
                    {
                        key: "ignoreIsTransitioning",
                        value: function() {
                            var e6 = this.props.items, t8 = this.state, n9 = t8.previousIndex, i7 = t8.currentIndex, r5 = e6.length - 1;
                            return Math.abs(n9 - i7) > 1 && !(0 === n9 && i7 === r5) && !(n9 === r5 && 0 === i7);
                        }
                    },
                    {
                        key: "isFirstOrLastSlide",
                        value: function(e6) {
                            return e6 === this.props.items.length - 1 || 0 === e6;
                        }
                    },
                    {
                        key: "slideIsTransitioning",
                        value: function(e6) {
                            var t8 = this.state, n9 = t8.isTransitioning, i7 = t8.previousIndex, r5 = t8.currentIndex;
                            return n9 && !(e6 === i7 || e6 === r5);
                        }
                    },
                    {
                        key: "isSlideVisible",
                        value: function(e6) {
                            return !this.slideIsTransitioning(e6) || this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(e6);
                        }
                    },
                    {
                        key: "slideThumbnailBar",
                        value: function() {
                            var e6 = this.state, t8 = e6.currentIndex, n9 = e6.isSwipingThumbnail, i7 = -this.getThumbsTranslate(t8);
                            n9 || (0 === t8 ? this.setState({
                                thumbsTranslate: 0,
                                thumbsSwipedTranslate: 0
                            }) : this.setState({
                                thumbsTranslate: i7,
                                thumbsSwipedTranslate: i7
                            }));
                        }
                    },
                    {
                        key: "canSlide",
                        value: function() {
                            return this.props.items.length >= 2;
                        }
                    },
                    {
                        key: "canSlideLeft",
                        value: function() {
                            var e6 = this.props, t8 = e6.infinite, n9 = e6.isRTL;
                            return t8 || (n9 ? this.canSlideNext() : this.canSlidePrevious());
                        }
                    },
                    {
                        key: "canSlideRight",
                        value: function() {
                            var e6 = this.props, t8 = e6.infinite, n9 = e6.isRTL;
                            return t8 || (n9 ? this.canSlidePrevious() : this.canSlideNext());
                        }
                    },
                    {
                        key: "canSlidePrevious",
                        value: function() {
                            return this.state.currentIndex > 0;
                        }
                    },
                    {
                        key: "canSlideNext",
                        value: function() {
                            return this.state.currentIndex < this.props.items.length - 1;
                        }
                    },
                    {
                        key: "handleSwiping",
                        value: function(e6) {
                            var t8 = e6.event, n9 = e6.absX, i7 = e6.dir, r5 = this.props, a4 = r5.disableSwipe, s2 = r5.stopPropagation, o3 = this.state, l3 = o3.galleryWidth, u2 = o3.isTransitioning, c2 = o3.swipingUpDown, h1 = o3.swipingLeftRight;
                            if (i7 !== ee.UP && i7 !== ee.DOWN && !c2 || h1) {
                                if (i7 !== ee.LEFT && i7 !== ee.RIGHT || h1 || this.setState({
                                    swipingLeftRight: !0
                                }), !a4) {
                                    var d1 = this.props.swipingTransitionDuration;
                                    if (s2 && t8.preventDefault(), u2) this.setState({
                                        currentSlideOffset: 0
                                    });
                                    else {
                                        var f1 = i7 === ee.RIGHT ? 1 : -1, p1 = n9 / l3 * 100;
                                        Math.abs(p1) >= 100 && (p1 = 100);
                                        var m1 = {
                                            transition: "transform ".concat(d1, "ms ease-out")
                                        };
                                        this.setState({
                                            currentSlideOffset: f1 * p1,
                                            slideStyle: m1
                                        });
                                    }
                                }
                            } else c2 || this.setState({
                                swipingUpDown: !0
                            });
                        }
                    },
                    {
                        key: "handleThumbnailSwiping",
                        value: function(e6) {
                            var t8 = e6.event, n9 = e6.absX, i7 = e6.absY, r5 = e6.dir, a4 = this.props, s2 = a4.stopPropagation, o3 = a4.swipingThumbnailTransitionDuration, l3 = this.state, u2 = l3.thumbsSwipedTranslate, c2 = l3.thumbnailsWrapperHeight, h1 = l3.thumbnailsWrapperWidth, d2 = l3.swipingUpDown, f2 = l3.swipingLeftRight;
                            if (this.isThumbnailVertical()) {
                                if ((r5 === ee.LEFT || r5 === ee.RIGHT || f2) && !d2) return void (f2 || this.setState({
                                    swipingLeftRight: !0
                                }));
                                r5 !== ee.UP && r5 !== ee.DOWN || d2 || this.setState({
                                    swipingUpDown: !0
                                });
                            } else {
                                if ((r5 === ee.UP || r5 === ee.DOWN || d2) && !f2) return void (d2 || this.setState({
                                    swipingUpDown: !0
                                }));
                                r5 !== ee.LEFT && r5 !== ee.RIGHT || f2 || this.setState({
                                    swipingLeftRight: !0
                                });
                            }
                            var p2, m2, v1, g1, b2, y2 = this.thumbnails && this.thumbnails.current;
                            if (this.isThumbnailVertical() ? (p2 = u2 + (r5 === ee.DOWN ? i7 : -i7), m2 = y2.scrollHeight - c2 + 20, v1 = Math.abs(p2) > m2, g1 = p2 > 20, b2 = y2.scrollHeight <= c2) : (p2 = u2 + (r5 === ee.RIGHT ? n9 : -n9), m2 = y2.scrollWidth - h1 + 20, v1 = Math.abs(p2) > m2, g1 = p2 > 20, b2 = y2.scrollWidth <= h1), !b2 && (r5 !== ee.LEFT && r5 !== ee.UP || !v1) && (r5 !== ee.RIGHT && r5 !== ee.DOWN || !g1)) {
                                s2 && t8.stopPropagation();
                                var w1 = {
                                    transition: "transform ".concat(o3, "ms ease-out")
                                };
                                this.setState({
                                    thumbsTranslate: p2,
                                    thumbsStyle: w1
                                });
                            }
                        }
                    },
                    {
                        key: "handleOnThumbnailSwiped",
                        value: function() {
                            var e6 = this.state.thumbsTranslate, t8 = this.props.slideDuration;
                            this.resetSwipingDirection(), this.setState({
                                isSwipingThumbnail: !0,
                                thumbsSwipedTranslate: e6,
                                thumbsStyle: {
                                    transition: "all ".concat(t8, "ms ease-out")
                                }
                            });
                        }
                    },
                    {
                        key: "sufficientSwipe",
                        value: function() {
                            var e6 = this.state.currentSlideOffset, t8 = this.props.swipeThreshold;
                            return Math.abs(e6) > t8;
                        }
                    },
                    {
                        key: "resetSwipingDirection",
                        value: function() {
                            var e6 = this.state, t8 = e6.swipingUpDown, n9 = e6.swipingLeftRight;
                            t8 && this.setState({
                                swipingUpDown: !1
                            }), n9 && this.setState({
                                swipingLeftRight: !1
                            });
                        }
                    },
                    {
                        key: "handleOnSwiped",
                        value: function(e6) {
                            var t8 = e6.event, n9 = e6.dir, i7 = e6.velocity, r5 = this.props, a4 = r5.disableSwipe, s2 = r5.stopPropagation, o3 = r5.flickThreshold;
                            if (!a4) {
                                var l3 = this.props.isRTL;
                                s2 && t8.stopPropagation(), this.resetSwipingDirection();
                                var u2 = (n9 === ee.LEFT ? 1 : -1) * (l3 ? -1 : 1), c2 = n9 === ee.UP || n9 === ee.DOWN, h1 = i7 > o3 && !c2;
                                this.handleOnSwipedTo(u2, h1);
                            }
                        }
                    },
                    {
                        key: "handleOnSwipedTo",
                        value: function(e6, t8) {
                            var n9 = this.state, i7 = n9.currentIndex, r5 = n9.isTransitioning, a4 = i7;
                            !this.sufficientSwipe() && !t8 || r5 || (a4 += e6), (-1 === e6 && !this.canSlideLeft() || 1 === e6 && !this.canSlideRight()) && (a4 = i7), this.unthrottledSlideToIndex(a4);
                        }
                    },
                    {
                        key: "handleTouchMove",
                        value: function(e6) {
                            this.state.swipingLeftRight && e6.preventDefault();
                        }
                    },
                    {
                        key: "handleMouseDown",
                        value: function() {
                            this.imageGallery.current.classList.add("image-gallery-using-mouse");
                        }
                    },
                    {
                        key: "handleKeyDown",
                        value: function(e6) {
                            var t8 = this.props, n9 = t8.disableKeyDown, i7 = t8.useBrowserFullscreen, r5 = this.state.isFullscreen;
                            if (this.imageGallery.current.classList.remove("image-gallery-using-mouse"), !n9) switch(parseInt(e6.keyCode || e6.which || 0, 10)){
                                case 37:
                                    this.canSlideLeft() && !this.playPauseIntervalId && this.slideLeft(e6);
                                    break;
                                case 39:
                                    this.canSlideRight() && !this.playPauseIntervalId && this.slideRight(e6);
                                    break;
                                case 27:
                                    r5 && !i7 && this.exitFullScreen();
                            }
                        }
                    },
                    {
                        key: "handleImageError",
                        value: function(e6) {
                            var t8 = this.props.onErrorImageURL;
                            t8 && -1 === e6.target.src.indexOf(t8) && (e6.target.src = t8);
                        }
                    },
                    {
                        key: "removeResizeObserver",
                        value: function() {
                            this.resizeObserver && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && (this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current), this.resizeObserver = null);
                        }
                    },
                    {
                        key: "handleResize",
                        value: function() {
                            var e6 = this.state.currentIndex;
                            this.resizeObserver && (this.imageGallery && this.imageGallery.current && this.setState({
                                galleryWidth: this.imageGallery.current.offsetWidth
                            }), this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && this.setState({
                                gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight
                            }), this.thumbnailsWrapper && this.thumbnailsWrapper.current && (this.isThumbnailVertical() ? this.setState({
                                thumbnailsWrapperHeight: this.thumbnailsWrapper.current.offsetHeight
                            }) : this.setState({
                                thumbnailsWrapperWidth: this.thumbnailsWrapper.current.offsetWidth
                            })), this.setThumbsTranslate(-this.getThumbsTranslate(e6)));
                        }
                    },
                    {
                        key: "initResizeObserver",
                        value: function(e6) {
                            var t8 = this;
                            this.resizeObserver = new Z(L(function(e7) {
                                e7 && e7.forEach(function() {
                                    t8.handleResize();
                                });
                            }, 300)), this.resizeObserver.observe(e6.current);
                        }
                    },
                    {
                        key: "toggleFullScreen",
                        value: function() {
                            this.state.isFullscreen ? this.exitFullScreen() : this.fullScreen();
                        }
                    },
                    {
                        key: "togglePlay",
                        value: function() {
                            this.playPauseIntervalId ? this.pause() : this.play();
                        }
                    },
                    {
                        key: "handleScreenChange",
                        value: function() {
                            var e6 = this.props, t8 = e6.onScreenChange, n9 = e6.useBrowserFullscreen, i7 = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement, r5 = this.imageGallery.current === i7;
                            t8 && t8(r5), n9 && this.setState({
                                isFullscreen: r5
                            });
                        }
                    },
                    {
                        key: "slideToIndex",
                        value: function(e6, t8) {
                            var n9 = this.state, i7 = n9.currentIndex, r5 = n9.isTransitioning, a4 = this.props, s2 = a4.items, o3 = a4.slideDuration, l4 = a4.onBeforeSlide;
                            if (!r5) {
                                t8 && this.playPauseIntervalId && (this.pause(!1), this.play(!1));
                                var u3 = s2.length - 1, c3 = e6;
                                e6 < 0 ? c3 = u3 : e6 > u3 && (c3 = 0), l4 && c3 !== i7 && l4(c3), this.setState({
                                    previousIndex: i7,
                                    currentIndex: c3,
                                    isTransitioning: c3 !== i7,
                                    currentSlideOffset: 0,
                                    slideStyle: {
                                        transition: "all ".concat(o3, "ms ease-out")
                                    }
                                }, this.onSliding);
                            }
                        }
                    },
                    {
                        key: "slideLeft",
                        value: function(e6) {
                            var t8 = this.props.isRTL;
                            this.slideTo(e6, t8 ? "right" : "left");
                        }
                    },
                    {
                        key: "slideRight",
                        value: function(e6) {
                            var t8 = this.props.isRTL;
                            this.slideTo(e6, t8 ? "left" : "right");
                        }
                    },
                    {
                        key: "slideTo",
                        value: function(e6, t8) {
                            var n9 = this, i7 = this.state, r5 = i7.currentIndex, a4 = i7.currentSlideOffset, s2 = i7.isTransitioning, o3 = this.props.items, l4 = r5 + ("left" === t8 ? -1 : 1);
                            s2 || (2 === o3.length ? this.setState({
                                currentSlideOffset: a4 + ("left" === t8 ? 0.001 : -0.001),
                                slideStyle: {
                                    transition: "none"
                                }
                            }, function() {
                                window.setTimeout(function() {
                                    return n9.slideToIndex(l4, e6);
                                }, 25);
                            }) : this.slideToIndex(l4, e6));
                        }
                    },
                    {
                        key: "handleThumbnailMouseOver",
                        value: function(e6, t8) {
                            this.props.slideOnThumbnailOver && this.onThumbnailMouseOver(e6, t8);
                        }
                    },
                    {
                        key: "handleThumbnailKeyUp",
                        value: function(e6, t8) {
                            Le(e6) && this.onThumbnailClick(e6, t8);
                        }
                    },
                    {
                        key: "handleSlideKeyUp",
                        value: function(e6) {
                            Le(e6) && this.props.onClick(e6);
                        }
                    },
                    {
                        key: "isThumbnailVertical",
                        value: function() {
                            var e6 = this.props.thumbnailPosition;
                            return "left" === e6 || "right" === e6;
                        }
                    },
                    {
                        key: "addScreenChangeEvent",
                        value: function() {
                            var e6 = this;
                            xe.forEach(function(t8) {
                                document.addEventListener(t8, e6.handleScreenChange);
                            });
                        }
                    },
                    {
                        key: "removeScreenChangeEvent",
                        value: function() {
                            var e6 = this;
                            xe.forEach(function(t8) {
                                document.removeEventListener(t8, e6.handleScreenChange);
                            });
                        }
                    },
                    {
                        key: "fullScreen",
                        value: function() {
                            var e6 = this.props.useBrowserFullscreen, t8 = this.imageGallery.current;
                            e6 ? t8.requestFullscreen ? t8.requestFullscreen() : t8.msRequestFullscreen ? t8.msRequestFullscreen() : t8.mozRequestFullScreen ? t8.mozRequestFullScreen() : t8.webkitRequestFullscreen ? t8.webkitRequestFullscreen() : this.setModalFullscreen(!0) : this.setModalFullscreen(!0), this.setState({
                                isFullscreen: !0
                            });
                        }
                    },
                    {
                        key: "exitFullScreen",
                        value: function() {
                            var e6 = this.state.isFullscreen, t8 = this.props.useBrowserFullscreen;
                            e6 && (t8 ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : this.setModalFullscreen(!1) : this.setModalFullscreen(!1), this.setState({
                                isFullscreen: !1
                            }));
                        }
                    },
                    {
                        key: "pauseOrPlay",
                        value: function() {
                            var e6 = this.props.infinite, t8 = this.state.currentIndex;
                            e6 || this.canSlideRight() ? this.slideToIndex(t8 + 1) : this.pause();
                        }
                    },
                    {
                        key: "play",
                        value: function() {
                            var e6 = !(arguments.length > 0 && (void 0) !== arguments[0]) || arguments[0], t8 = this.props, n9 = t8.onPlay, i7 = t8.slideInterval, r5 = t8.slideDuration, a4 = this.state.currentIndex;
                            this.playPauseIntervalId || (this.setState({
                                isPlaying: !0
                            }), this.playPauseIntervalId = window.setInterval(this.pauseOrPlay, Math.max(i7, r5)), n9 && e6 && n9(a4));
                        }
                    },
                    {
                        key: "pause",
                        value: function() {
                            var e6 = !(arguments.length > 0 && (void 0) !== arguments[0]) || arguments[0], t8 = this.props.onPause, n9 = this.state.currentIndex;
                            this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null, this.setState({
                                isPlaying: !1
                            }), t8 && e6 && t8(n9));
                        }
                    },
                    {
                        key: "isImageLoaded",
                        value: function(e6) {
                            return !!this.loadedImages[e6.original] || (this.loadedImages[e6.original] = !0, !1);
                        }
                    },
                    {
                        key: "handleImageLoaded",
                        value: function(e6, t8) {
                            var n9 = this.props.onImageLoad;
                            !this.loadedImages[t8] && n9 && (this.loadedImages[t8] = !0, n9(e6));
                        }
                    },
                    {
                        key: "renderItem",
                        value: function(e6) {
                            var t8 = this.state.isFullscreen, n9 = this.props.onImageError || this.handleImageError;
                            return a2().createElement(ie, {
                                description: e6.description,
                                fullscreen: e6.fullscreen,
                                handleImageLoaded: this.handleImageLoaded,
                                isFullscreen: t8,
                                onImageError: n9,
                                original: e6.original,
                                originalAlt: e6.originalAlt,
                                originalHeight: e6.originalHeight,
                                originalWidth: e6.originalWidth,
                                originalTitle: e6.originalTitle,
                                sizes: e6.sizes,
                                srcSet: e6.srcSet
                            });
                        }
                    },
                    {
                        key: "renderThumbInner",
                        value: function(e6) {
                            var t8 = this.props.onThumbnailError || this.handleImageError;
                            return a2().createElement("span", {
                                className: "image-gallery-thumbnail-inner"
                            }, a2().createElement("img", {
                                className: "image-gallery-thumbnail-image",
                                src: e6.thumbnail,
                                height: e6.thumbnailHeight,
                                width: e6.thumbnailWidth,
                                alt: e6.thumbnailAlt,
                                title: e6.thumbnailTitle,
                                onError: t8
                            }), e6.thumbnailLabel && a2().createElement("div", {
                                className: "image-gallery-thumbnail-label"
                            }, e6.thumbnailLabel));
                        }
                    },
                    {
                        key: "render",
                        value: function() {
                            var e6 = this.state, n9 = e6.currentIndex, i7 = e6.isFullscreen, r5 = e6.modalFullscreen, s2 = e6.isPlaying, o3 = this.props, l4 = o3.additionalClass, u4 = o3.disableThumbnailSwipe, c4 = o3.indexSeparator, h2 = o3.isRTL, d2 = o3.items, f2 = o3.thumbnailPosition, p2 = o3.renderFullscreenButton, m2 = o3.renderCustomControls, v1 = o3.renderLeftNav, g1 = o3.renderRightNav, b2 = o3.showBullets, y2 = o3.showFullscreenButton, w2 = o3.showIndex, T1 = o3.showThumbnails, S1 = o3.showNav, O1 = o3.showPlayButton, E1 = o3.renderPlayPauseButton, I1 = this.getThumbnailStyle(), k1 = this.getSlideItems(), x1 = k1.slides, _1 = k1.thumbnails, L2 = k1.bullets, P2 = t3("image-gallery-slide-wrapper", f2, {
                                "image-gallery-rtl": h2
                            }), M1 = a2().createElement("div", {
                                ref: this.imageGallerySlideWrapper,
                                className: P2
                            }, m2 && m2(), this.canSlide() ? a2().createElement(a2().Fragment, null, S1 && a2().createElement(a2().Fragment, null, v1(this.slideLeft, !this.canSlideLeft()), g1(this.slideRight, !this.canSlideRight())), a2().createElement(ge, {
                                className: "image-gallery-swipe",
                                delta: 0,
                                onSwiping: this.handleSwiping,
                                onSwiped: this.handleOnSwiped
                            }, a2().createElement("div", {
                                className: "image-gallery-slides"
                            }, x1))) : a2().createElement("div", {
                                className: "image-gallery-slides"
                            }, x1), O1 && E1(this.togglePlay, s2), b2 && a2().createElement("div", {
                                className: "image-gallery-bullets"
                            }, a2().createElement("div", {
                                className: "image-gallery-bullets-container",
                                role: "navigation",
                                "aria-label": "Bullet Navigation"
                            }, L2)), y2 && p2(this.toggleFullScreen, i7), w2 && a2().createElement("div", {
                                className: "image-gallery-index"
                            }, a2().createElement("span", {
                                className: "image-gallery-index-current"
                            }, n9 + 1), a2().createElement("span", {
                                className: "image-gallery-index-separator"
                            }, c4), a2().createElement("span", {
                                className: "image-gallery-index-total"
                            }, d2.length))), R1 = t3("image-gallery", l4, {
                                "fullscreen-modal": r5
                            }), D1 = t3("image-gallery-content", f2, {
                                fullscreen: i7
                            }), F1 = t3("image-gallery-thumbnails-wrapper", f2, {
                                "thumbnails-wrapper-rtl": !this.isThumbnailVertical() && h2
                            }, {
                                "thumbnails-swipe-horizontal": !this.isThumbnailVertical() && !u4
                            }, {
                                "thumbnails-swipe-vertical": this.isThumbnailVertical() && !u4
                            });
                            return a2().createElement("div", {
                                ref: this.imageGallery,
                                className: R1,
                                "aria-live": "polite"
                            }, a2().createElement("div", {
                                className: D1
                            }, ("bottom" === f2 || "right" === f2) && M1, T1 && _1.length > 0 ? a2().createElement(ge, {
                                className: F1,
                                delta: 0,
                                onSwiping: !u4 && this.handleThumbnailSwiping,
                                onSwiped: !u4 && this.handleOnThumbnailSwiped
                            }, a2().createElement("div", {
                                className: "image-gallery-thumbnails",
                                ref: this.thumbnailsWrapper,
                                style: this.getThumbnailBarHeight()
                            }, a2().createElement("div", {
                                ref: this.thumbnails,
                                className: "image-gallery-thumbnails-container",
                                style: I1,
                                "aria-label": "Thumbnail Navigation"
                            }, _1))) : null, ("top" === f2 || "left" === f2) && M1));
                        }
                    }
                ], Se(n7.prototype, i6), l2;
            }(a2().Component);
            Pe.propTypes = {
                flickThreshold: te.number,
                items: te.arrayOf(te.shape({
                    bulletClass: te.string,
                    bulletOnClick: te.func,
                    description: te.string,
                    original: te.string,
                    originalHeight: te.number,
                    originalWidth: te.number,
                    thumbnailHeight: te.number,
                    thumbnailWidth: te.number,
                    fullscreen: te.string,
                    originalAlt: te.string,
                    originalTitle: te.string,
                    thumbnail: te.string,
                    thumbnailAlt: te.string,
                    thumbnailLabel: te.string,
                    thumbnailTitle: te.string,
                    originalClass: te.string,
                    thumbnailClass: te.string,
                    renderItem: te.func,
                    renderThumbInner: te.func,
                    imageSet: _e,
                    srcSet: te.string,
                    sizes: te.string
                })).isRequired,
                showNav: te.bool,
                autoPlay: te.bool,
                lazyLoad: te.bool,
                infinite: te.bool,
                showIndex: te.bool,
                showBullets: te.bool,
                showThumbnails: te.bool,
                showPlayButton: te.bool,
                showFullscreenButton: te.bool,
                disableThumbnailScroll: te.bool,
                disableKeyDown: te.bool,
                disableSwipe: te.bool,
                disableThumbnailSwipe: te.bool,
                useBrowserFullscreen: te.bool,
                onErrorImageURL: te.string,
                indexSeparator: te.string,
                thumbnailPosition: te.oneOf([
                    "top",
                    "bottom",
                    "left",
                    "right"
                ]),
                startIndex: te.number,
                slideDuration: te.number,
                slideInterval: te.number,
                slideOnThumbnailOver: te.bool,
                swipeThreshold: te.number,
                swipingTransitionDuration: te.number,
                swipingThumbnailTransitionDuration: te.number,
                onSlide: te.func,
                onBeforeSlide: te.func,
                onScreenChange: te.func,
                onPause: te.func,
                onPlay: te.func,
                onClick: te.func,
                onImageLoad: te.func,
                onImageError: te.func,
                onTouchMove: te.func,
                onTouchEnd: te.func,
                onTouchStart: te.func,
                onMouseOver: te.func,
                onMouseLeave: te.func,
                onThumbnailError: te.func,
                onThumbnailClick: te.func,
                renderCustomControls: te.func,
                renderLeftNav: te.func,
                renderRightNav: te.func,
                renderPlayPauseButton: te.func,
                renderFullscreenButton: te.func,
                renderItem: te.func,
                renderThumbInner: te.func,
                stopPropagation: te.bool,
                additionalClass: te.string,
                useTranslate3D: te.bool,
                isRTL: te.bool,
                useWindowKeyDown: te.bool
            }, Pe.defaultProps = {
                onErrorImageURL: "",
                additionalClass: "",
                showNav: !0,
                autoPlay: !1,
                lazyLoad: !1,
                infinite: !0,
                showIndex: !1,
                showBullets: !1,
                showThumbnails: !0,
                showPlayButton: !0,
                showFullscreenButton: !0,
                disableThumbnailScroll: !1,
                disableKeyDown: !1,
                disableSwipe: !1,
                disableThumbnailSwipe: !1,
                useTranslate3D: !0,
                isRTL: !1,
                useBrowserFullscreen: !0,
                flickThreshold: 0.4,
                stopPropagation: !1,
                indexSeparator: " / ",
                thumbnailPosition: "bottom",
                startIndex: 0,
                slideDuration: 450,
                swipingTransitionDuration: 0,
                swipingThumbnailTransitionDuration: 0,
                onSlide: null,
                onBeforeSlide: null,
                onScreenChange: null,
                onPause: null,
                onPlay: null,
                onClick: null,
                onImageLoad: null,
                onImageError: null,
                onTouchMove: null,
                onTouchEnd: null,
                onTouchStart: null,
                onMouseOver: null,
                onMouseLeave: null,
                onThumbnailError: null,
                onThumbnailClick: null,
                renderCustomControls: null,
                renderThumbInner: null,
                renderItem: null,
                slideInterval: 3000,
                slideOnThumbnailOver: !1,
                swipeThreshold: 30,
                renderLeftNav: function(e4, t8) {
                    return a2().createElement(ce, {
                        onClick: e4,
                        disabled: t8
                    });
                },
                renderRightNav: function(e4, t8) {
                    return a2().createElement(de, {
                        onClick: e4,
                        disabled: t8
                    });
                },
                renderPlayPauseButton: function(e4, t8) {
                    return a2().createElement(pe, {
                        onClick: e4,
                        isPlaying: t8
                    });
                },
                renderFullscreenButton: function(e4, t8) {
                    return a2().createElement(le, {
                        onClick: e4,
                        isFullscreen: t8
                    });
                },
                useWindowKeyDown: !0
            };
            const Me = Pe;
        })(), r;
    })();
});

<<<<<<< Updated upstream
},{}],"1tQjj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _app = require("@firebase/app");
parcelHelpers.exportAll(_app, exports);
var name = "firebase";
var version = "9.0.1";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ _app.registerVersion(name, version, 'app');

},{"@firebase/app":"3wZLz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3wZLz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FirebaseError", ()=>_util.FirebaseError
);
parcelHelpers.export(exports, "SDK_VERSION", ()=>SDK_VERSION
);
parcelHelpers.export(exports, "_DEFAULT_ENTRY_NAME", ()=>DEFAULT_ENTRY_NAME
);
parcelHelpers.export(exports, "_addComponent", ()=>_addComponent
);
parcelHelpers.export(exports, "_addOrOverwriteComponent", ()=>_addOrOverwriteComponent
);
parcelHelpers.export(exports, "_apps", ()=>_apps
);
parcelHelpers.export(exports, "_clearComponents", ()=>_clearComponents
);
parcelHelpers.export(exports, "_components", ()=>_components
);
parcelHelpers.export(exports, "_getProvider", ()=>_getProvider
);
parcelHelpers.export(exports, "_registerComponent", ()=>_registerComponent
);
parcelHelpers.export(exports, "_removeServiceInstance", ()=>_removeServiceInstance
);
parcelHelpers.export(exports, "deleteApp", ()=>deleteApp
);
parcelHelpers.export(exports, "getApp", ()=>getApp
);
parcelHelpers.export(exports, "getApps", ()=>getApps
);
parcelHelpers.export(exports, "initializeApp", ()=>initializeApp
);
parcelHelpers.export(exports, "onLog", ()=>onLog
);
parcelHelpers.export(exports, "registerVersion", ()=>registerVersion
);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class PlatformLoggerServiceImpl {
    constructor(container){
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map((provider)=>{
            if (isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            } else return null;
        }).filter((logString)=>logString
        ).join(' ');
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */ ;
}
const name$o = "@firebase/app";
const version$1 = "0.7.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logger = new _logger.Logger('@firebase/app');
const name$n = "@firebase/app-compat";
const name$m = "@firebase/analytics-compat";
const name$l = "@firebase/analytics";
const name$k = "@firebase/app-check-compat";
const name$j = "@firebase/app-check";
const name$i = "@firebase/auth";
const name$h = "@firebase/auth-compat";
const name$g = "@firebase/database";
const name$f = "@firebase/database-compat";
const name$e = "@firebase/functions";
const name$d = "@firebase/functions-compat";
const name$c = "@firebase/installations";
const name$b = "@firebase/installations-compat";
const name$a = "@firebase/messaging";
const name$9 = "@firebase/messaging-compat";
const name$8 = "@firebase/performance";
const name$7 = "@firebase/performance-compat";
const name$6 = "@firebase/remote-config";
const name$5 = "@firebase/remote-config-compat";
const name$4 = "@firebase/storage";
const name$3 = "@firebase/storage-compat";
const name$2 = "@firebase/firestore";
const name$1 = "@firebase/firestore-compat";
const name = "firebase";
const version = "9.0.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The default app name
 *
 * @internal
 */ const DEFAULT_ENTRY_NAME = '[DEFAULT]';
const PLATFORM_LOG_STRING = {
    [name$o]: 'fire-core',
    [name$n]: 'fire-core-compat',
    [name$l]: 'fire-analytics',
    [name$m]: 'fire-analytics-compat',
    [name$j]: 'fire-app-check',
    [name$k]: 'fire-app-check-compat',
    [name$i]: 'fire-auth',
    [name$h]: 'fire-auth-compat',
    [name$g]: 'fire-rtdb',
    [name$f]: 'fire-rtdb-compat',
    [name$e]: 'fire-fn',
    [name$d]: 'fire-fn-compat',
    [name$c]: 'fire-iid',
    [name$b]: 'fire-iid-compat',
    [name$a]: 'fire-fcm',
    [name$9]: 'fire-fcm-compat',
    [name$8]: 'fire-perf',
    [name$7]: 'fire-perf-compat',
    [name$6]: 'fire-rc',
    [name$5]: 'fire-rc-compat',
    [name$4]: 'fire-gcs',
    [name$3]: 'fire-gcs-compat',
    [name$2]: 'fire-fst',
    [name$1]: 'fire-fst-compat',
    'fire-js': 'fire-js',
    [name]: 'fire-js-all'
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ const _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */ function _addComponent(app, component) {
    try {
        app.container.addComponent(component);
    } catch (e) {
        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */ function _addOrOverwriteComponent(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */ function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    _components.set(componentName, component);
    // add the component to existing app instances
    for (const app of _apps.values())_addComponent(app, component);
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */ function _getProvider(app, name1) {
    return app.container.getProvider(name1);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */ function _removeServiceInstance(app, name1, instanceIdentifier = DEFAULT_ENTRY_NAME) {
    _getProvider(app, name1).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */ function _clearComponents() {
    _components.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ERRORS = {
    ["no-app" /* NO_APP */ ]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
    ["bad-app-name" /* BAD_APP_NAME */ ]: "Illegal App name: '{$appName}",
    ["duplicate-app" /* DUPLICATE_APP */ ]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* APP_DELETED */ ]: "Firebase App named '{$appName}' already deleted",
    ["invalid-app-argument" /* INVALID_APP_ARGUMENT */ ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
    ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */ ]: 'First argument to `onLog` must be null or a function.'
};
const ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FirebaseAppImpl {
    constructor(options, config, container1){
        this._isDeleted = false;
        this._options = Object.assign({
        }, options);
        this._config = Object.assign({
        }, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container1;
        this.container.addComponent(new _component.Component('app', ()=>this
        , "PUBLIC" /* PUBLIC */ ));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */ , {
            appName: this._name
        });
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The current SDK version.
 *
 * @public
 */ const SDK_VERSION = version;
function initializeApp(options1, rawConfig = {
}) {
    if (typeof rawConfig !== 'object') {
        const name1 = rawConfig;
        rawConfig = {
            name: name1
        };
    }
    const config1 = Object.assign({
        name: DEFAULT_ENTRY_NAME,
        automaticDataCollectionEnabled: false
    }, rawConfig);
    const name1 = config1.name;
    if (typeof name1 !== 'string' || !name1) throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */ , {
        appName: String(name1)
    });
    const existingApp = _apps.get(name1);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if (_util.deepEqual(options1, existingApp.options) && _util.deepEqual(config1, existingApp.config)) return existingApp;
        else throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */ , {
            appName: name1
        });
    }
    const container2 = new _component.ComponentContainer(name1);
    for (const component of _components.values())container2.addComponent(component);
    const newApp = new FirebaseAppImpl(options1, config1, container2);
    _apps.set(name1, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */ function getApp(name1 = DEFAULT_ENTRY_NAME) {
    const app = _apps.get(name1);
    if (!app) throw ERROR_FACTORY.create("no-app" /* NO_APP */ , {
        appName: name1
    });
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */ function getApps() {
    return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */ async function deleteApp(app) {
    const name1 = app.name;
    if (_apps.has(name1)) {
        _apps.delete(name1);
        await Promise.all(app.container.getProviders().map((provider)=>provider.delete()
        ));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */ function registerVersion(libraryKeyOrName, version1, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) library += `-${variant}`;
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version1.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version1}":`
        ];
        if (libraryMismatch) warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        if (libraryMismatch && versionMismatch) warning.push('and');
        if (versionMismatch) warning.push(`version name "${version1}" contains illegal characters (whitespace or "/")`);
        logger.warn(warning.join(' '));
        return;
    }
    _registerComponent(new _component.Component(`${library}-version`, ()=>({
            library,
            version: version1
        })
    , "VERSION" /* VERSION */ ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */ function onLog(logCallback, options1) {
    if (logCallback !== null && typeof logCallback !== 'function') throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */ );
    _logger.setUserLogHandler(logCallback, options1);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */ function setLogLevel(logLevel) {
    _logger.setLogLevel(logLevel);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(variant) {
    _registerComponent(new _component.Component('platform-logger', (container2)=>new PlatformLoggerServiceImpl(container2)
    , "PRIVATE" /* PRIVATE */ ));
    // Register `app` package.
    registerVersion(name$o, version$1, variant);
    // Register platform SDK identifier (no version).
    registerVersion('fire-js', '');
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */ registerCoreComponents();

},{"@firebase/component":"inEPs","@firebase/logger":"A0nlJ","@firebase/util":"3qRMM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"inEPs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>Component
);
parcelHelpers.export(exports, "ComponentContainer", ()=>ComponentContainer
);
parcelHelpers.export(exports, "Provider", ()=>Provider
);
var _tslib = require("tslib");
var _util = require("@firebase/util");
/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ var Component = function() {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ function Component1(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {
        };
        this.instantiationMode = "LAZY" /* LAZY */ ;
        this.onInstanceCreated = null;
    }
    Component1.prototype.setInstantiationMode = function(mode) {
        this.instantiationMode = mode;
        return this;
    };
    Component1.prototype.setMultipleInstances = function(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    };
    Component1.prototype.setServiceProps = function(props) {
        this.serviceProps = props;
        return this;
    };
    Component1.prototype.setInstanceCreatedCallback = function(callback) {
        this.onInstanceCreated = callback;
        return this;
    };
    return Component1;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ var Provider = function() {
    function Provider1(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */ Provider1.prototype.get = function(identifier) {
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new _util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized
            try {
                var instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider1.prototype.getImmediate = function(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {
            return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
            });
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
        else {
            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) return null;
            else throw Error("Service " + this.name + " is not available");
        }
    };
    Provider1.prototype.getComponent = function() {
        return this.component;
    };
    Provider1.prototype.setComponent = function(component) {
        var e_1, _a;
        if (component.name !== this.name) throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        if (this.component) throw Error("Component for " + this.name + " has already been provided");
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) return;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) try {
            this.getOrInitializeService({
                instanceIdentifier: DEFAULT_ENTRY_NAME
            });
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        try {
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for(var _b = _tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()){
                var _d = _tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    var instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    instanceDeferred.resolve(instance);
                } catch (e) {
                // when the instance factory throws an exception, it should not cause
                // a fatal error. We just leave the promise unresolved.
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    Provider1.prototype.clearInstance = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    };
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    Provider1.prototype.delete = function() {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var services;
            return _tslib.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        services = Array.from(this.instances.values());
                        return [
                            4 /*yield*/ ,
                            Promise.all(_tslib.__spreadArray(_tslib.__spreadArray([], _tslib.__read(services.filter(function(service) {
                                return 'INTERNAL' in service;
                            }) // legacy services
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            .map(function(service) {
                                return service.INTERNAL.delete();
                            }))), _tslib.__read(services.filter(function(service) {
                                return '_delete' in service;
                            }) // modularized services
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            .map(function(service) {
                                return service._delete();
                            }))))
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    Provider1.prototype.isComponentSet = function() {
        return this.component != null;
    };
    Provider1.prototype.isInitialized = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        return this.instances.has(identifier);
    };
    Provider1.prototype.getOptions = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        return this.instancesOptions.get(identifier) || {
        };
    };
    Provider1.prototype.initialize = function(opts) {
        var e_2, _a;
        if (opts === void 0) opts = {
        };
        var _b = opts.options, options = _b === void 0 ? {
        } : _b;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
        if (!this.isComponentSet()) throw Error("Component " + this.name + " has not been registered yet");
        var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options: options
        });
        try {
            // resolve any pending promise waiting for the service instance
            for(var _c = _tslib.__values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()){
                var _e = _tslib.__read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
                var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        return instance;
    };
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */ Provider1.prototype.onInit = function(callback, identifier) {
        var _a;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        var existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) callback(existingInstance, normalizedIdentifier);
        return function() {
            existingCallbacks.delete(callback);
        };
    };
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */ Provider1.prototype.invokeOnInitCallbacks = function(instance, identifier) {
        var e_3, _a;
        var callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) return;
        try {
            for(var callbacks_1 = _tslib.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()){
                var callback = callbacks_1_1.value;
                try {
                    callback(instance, identifier);
                } catch (_b) {
                // ignore errors in the onInit callback
                }
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
    };
    Provider1.prototype.getOrInitializeService = function(_a) {
        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {
        } : _b;
        var instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options: options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */ if (this.component.onInstanceCreated) try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_c) {
            // ignore errors in the onInstanceCreatedCallback
            }
        }
        return instance || null;
    };
    Provider1.prototype.normalizeInstanceIdentifier = function(identifier) {
        if (identifier === void 0) identifier = DEFAULT_ENTRY_NAME;
        if (this.component) return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    };
    Provider1.prototype.shouldAutoInitialize = function() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */ ;
    };
    return Provider1;
}();
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */ ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ var ComponentContainer = function() {
    function ComponentContainer1(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ ComponentContainer1.prototype.addComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error("Component " + component.name + " has already been registered with " + this.name);
        provider.setComponent(component);
    };
    ComponentContainer1.prototype.addOrOverwriteComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    };
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ ComponentContainer1.prototype.getProvider = function(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    };
    ComponentContainer1.prototype.getProviders = function() {
        return Array.from(this.providers.values());
    };
    return ComponentContainer1;
}();

},{"tslib":"bjkXk","@firebase/util":"3qRMM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3qRMM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONSTANTS", ()=>CONSTANTS
);
parcelHelpers.export(exports, "Deferred", ()=>Deferred
);
parcelHelpers.export(exports, "ErrorFactory", ()=>ErrorFactory
);
parcelHelpers.export(exports, "FirebaseError", ()=>FirebaseError1
);
parcelHelpers.export(exports, "MAX_VALUE_MILLIS", ()=>MAX_VALUE_MILLIS
);
parcelHelpers.export(exports, "RANDOM_FACTOR", ()=>RANDOM_FACTOR
);
parcelHelpers.export(exports, "Sha1", ()=>Sha1
);
parcelHelpers.export(exports, "areCookiesEnabled", ()=>areCookiesEnabled
);
parcelHelpers.export(exports, "assert", ()=>assert
);
parcelHelpers.export(exports, "assertionError", ()=>assertionError
);
parcelHelpers.export(exports, "async", ()=>async
);
parcelHelpers.export(exports, "base64", ()=>base64
);
parcelHelpers.export(exports, "base64Decode", ()=>base64Decode
);
parcelHelpers.export(exports, "base64Encode", ()=>base64Encode
);
parcelHelpers.export(exports, "base64urlEncodeWithoutPadding", ()=>base64urlEncodeWithoutPadding
);
parcelHelpers.export(exports, "calculateBackoffMillis", ()=>calculateBackoffMillis
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "createMockUserToken", ()=>createMockUserToken
);
parcelHelpers.export(exports, "createSubscribe", ()=>createSubscribe
);
parcelHelpers.export(exports, "decode", ()=>decode
);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy
);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual
);
parcelHelpers.export(exports, "deepExtend", ()=>deepExtend
);
parcelHelpers.export(exports, "errorPrefix", ()=>errorPrefix
);
parcelHelpers.export(exports, "extractQuerystring", ()=>extractQuerystring
);
parcelHelpers.export(exports, "getGlobal", ()=>getGlobal
);
parcelHelpers.export(exports, "getModularInstance", ()=>getModularInstance
);
parcelHelpers.export(exports, "getUA", ()=>getUA
);
parcelHelpers.export(exports, "isAdmin", ()=>isAdmin
);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser
);
parcelHelpers.export(exports, "isBrowserExtension", ()=>isBrowserExtension
);
parcelHelpers.export(exports, "isElectron", ()=>isElectron
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "isIE", ()=>isIE
);
parcelHelpers.export(exports, "isIndexedDBAvailable", ()=>isIndexedDBAvailable
);
parcelHelpers.export(exports, "isMobileCordova", ()=>isMobileCordova
);
parcelHelpers.export(exports, "isNode", ()=>isNode
);
parcelHelpers.export(exports, "isNodeSdk", ()=>isNodeSdk
);
parcelHelpers.export(exports, "isReactNative", ()=>isReactNative
);
parcelHelpers.export(exports, "isSafari", ()=>isSafari
);
parcelHelpers.export(exports, "isUWP", ()=>isUWP
);
parcelHelpers.export(exports, "isValidFormat", ()=>isValidFormat
);
parcelHelpers.export(exports, "isValidTimestamp", ()=>isValidTimestamp
);
parcelHelpers.export(exports, "issuedAtTime", ()=>issuedAtTime
);
parcelHelpers.export(exports, "jsonEval", ()=>jsonEval
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "ordinal", ()=>ordinal
);
parcelHelpers.export(exports, "querystring", ()=>querystring
);
parcelHelpers.export(exports, "querystringDecode", ()=>querystringDecode
);
parcelHelpers.export(exports, "safeGet", ()=>safeGet
);
parcelHelpers.export(exports, "stringLength", ()=>stringLength
);
parcelHelpers.export(exports, "stringToByteArray", ()=>stringToByteArray
);
parcelHelpers.export(exports, "stringify", ()=>stringify
);
parcelHelpers.export(exports, "validateArgCount", ()=>validateArgCount
);
parcelHelpers.export(exports, "validateCallback", ()=>validateCallback
);
parcelHelpers.export(exports, "validateContextObject", ()=>validateContextObject
);
parcelHelpers.export(exports, "validateIndexedDBOpenable", ()=>validateIndexedDBOpenable
);
parcelHelpers.export(exports, "validateNamespace", ()=>validateNamespace
);
var _tslib = require("tslib");
var global = arguments[3];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ var assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ var assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var stringToByteArray$1 = function(str) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            // Surrogate Pair
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ var byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var pos = 0, c = 0;
    while(pos < bytes.length){
        var c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
            out[c++] = String.fromCharCode(55296 + (u >> 10));
            out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for(var i = 0; i < input.length; i += 3){
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
            var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
            var outByte4 = byte3 & 63;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString: function(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for(var i = 0; i < input.length;){
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            var outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    var outByte3 = byte3 << 6 & 192 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_: function() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {
            };
            this.charToByteMap_ = {
            };
            this.byteToCharMapWebSafe_ = {
            };
            this.charToByteMapWebSafe_ = {
            };
            // We want quick mappings back and forth, so we precompute two maps.
            for(var i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ var base64Encode = function(str) {
    var utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */ var base64urlEncodeWithoutPadding = function(str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ var base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {
            };
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(var prop in source){
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Deferred = function() {
    function Deferred1() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ Deferred1.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error, value) {
            if (error) _this.reject(error);
            else _this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function() {
                });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    };
    return Deferred1;
}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createMockUserToken(token, projectId) {
    if (token.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    // Unsecured JWTs use "none" as the algorithm.
    var header = {
        alg: 'none',
        type: 'JWT'
    };
    var project = projectId || 'demo-project';
    var iat = token.iat || 0;
    var sub = token.sub || token.user_id;
    if (!sub) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    var payload = _tslib.__assign({
        // Set all required fields to decent defaults
        iss: "https://securetoken.google.com/" + project,
        aud: project,
        iat: iat,
        exp: iat + 3600,
        auth_time: iat,
        sub: sub,
        user_id: sub,
        firebase: {
            sign_in_provider: 'custom',
            identities: {
            }
        }
    }, token);
    // Unsecured JWTs use the empty string as a signature.
    var signature = '';
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join('.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */ function isSafari() {
    return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */ function isIndexedDBAvailable() {
    return 'indexedDB' in self && indexedDB != null;
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */ function validateIndexedDBOpenable() {
    return new Promise(function(resolve, reject) {
        try {
            var preExist_1 = true;
            var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
            var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);
            request_1.onsuccess = function() {
                request_1.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist_1) self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                resolve(true);
            };
            request_1.onupgradeneeded = function() {
                preExist_1 = false;
            };
            request_1.onerror = function() {
                var _a;
                reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
            };
        } catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */ function areCookiesEnabled() {
    if (!navigator || !navigator.cookieEnabled) return false;
    return true;
}
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 */ function getGlobal() {
    if (typeof self !== 'undefined') return self;
    if (typeof window !== 'undefined') return window;
    if (typeof global !== 'undefined') return global;
    throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError1 = function(_super) {
    _tslib.__extends(FirebaseError2, _super);
    function FirebaseError2(code, message, customData) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.customData = customData;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        return _this;
    }
    return FirebaseError2;
}(Error);
var ErrorFactory = function() {
    function ErrorFactory1(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory1.prototype.create = function(code) {
        var data = [];
        for(var _i = 1; _i < arguments.length; _i++)data[_i - 1] = arguments[_i];
        var customData = data[0] || {
        };
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError1(fullCode, fullMessage, customData);
        return error;
    };
    return ErrorFactory1;
}();
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? String(value) : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var decode = function(token) {
    var header = {
    }, claims = {
    }, data = {
    }, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {
        };
        delete claims['d'];
    } catch (e) {
    }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidTimestamp = function(token) {
    var claims = decode(token).claims;
    var now = Math.floor(new Date().getTime() / 1000);
    var validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var issuedAtTime = function(token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isValidFormat = function(token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ var isAdmin = function(token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    var res = {
    };
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */ function deepEqual(a, b) {
    if (a === b) return true;
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    for(var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++){
        var k = aKeys_1[_i];
        if (!bKeys.includes(k)) return false;
        var aProp = a[k];
        var bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) return false;
        } else if (aProp !== bProp) return false;
    }
    for(var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++){
        var k = bKeys_1[_a];
        if (!aKeys.includes(k)) return false;
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === 'object';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function(key, value) {
        if (Array.isArray(value)) value.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
        });
        else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    };
    for(var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++){
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    var obj = {
    };
    var tokens = querystring1.replace(/^\?/, '').split('&');
    tokens.forEach(function(token) {
        if (token) {
            var _a = token.split('='), key = _a[0], value = _a[1];
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */ function extractQuerystring(url) {
    var queryStart = url.indexOf('?');
    if (!queryStart) return '';
    var fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ var Sha1 = function() {
    function Sha11() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(var i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    Sha11.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ Sha11.prototype.compress_ = function(buf, offset) {
        if (!offset) offset = 0;
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(var i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(var i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(var i = 16; i < 80; i++){
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(var i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 1518500249;
                } else {
                    f = b ^ c ^ d;
                    k = 1859775393;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 2400959708;
            } else {
                f = b ^ c ^ d;
                k = 3395469782;
            }
            var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 4294967295;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
    };
    Sha11.prototype.update = function(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    };
    /** @override */ Sha11.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(var i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for(var i = 0; i < 5; i++)for(var j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    };
    return Sha11;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ var ObserverProxy = function() {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ function ObserverProxy1(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(function() {
            executor(_this);
        }).catch(function(e) {
            _this.error(e);
        });
    }
    ObserverProxy1.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
            observer.next(value);
        });
    };
    ObserverProxy1.prototype.error = function(error) {
        this.forEachObserver(function(observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy1.prototype.complete = function() {
        this.forEachObserver(function(observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ ObserverProxy1.prototype.subscribe = function(nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error: error,
            complete: complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            try {
                if (_this.finalError) observer.error(_this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy1.prototype.unsubscribeOne = function(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    };
    ObserverProxy1.prototype.forEachObserver = function(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(var i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy1.prototype.sendOne = function(i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) try {
                fn(_this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    };
    ObserverProxy1.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function() {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy1;
}();
/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        Promise.resolve(true).then(function() {
            fn.apply(void 0, args);
        }).catch(function(error) {
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for(var _i = 0, methods_1 = methods; _i < methods_1.length; _i++){
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ var validateArgCount = function(fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argName) {
    return fnName + " failed: " + argName + " argument ";
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ var stringToByteArray = function(str) {
    var out = [];
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 55296 && c <= 56319) {
            var high = c - 55296; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 56320; // the low 10 bits.
            c = 65536 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ var stringLength = function(str) {
    var p = 0;
    for(var i = 0; i < str.length; i++){
        var c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 55296 && c <= 56319) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The amount of milliseconds to exponentially increase.
 */ var DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */ var DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */ var MAX_VALUE_MILLIS = 14400000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */ var RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */ function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
    if (intervalMillis === void 0) intervalMillis = DEFAULT_INTERVAL_MILLIS;
    if (backoffFactor === void 0) backoffFactor = DEFAULT_BACKOFF_FACTOR;
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    var randomWait = Math.round(// A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provide English ordinal letters after a number
 */ function ordinal(i) {
    if (!Number.isFinite(i)) return "" + i;
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    var cent = i % 100;
    if (cent >= 10 && cent <= 20) return 'th';
    var dec = i % 10;
    if (dec === 1) return 'st';
    if (dec === 2) return 'nd';
    if (dec === 3) return 'rd';
    return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getModularInstance(service) {
    if (service && service._delegate) return service._delegate;
    else return service;
}

},{"tslib":"bjkXk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"A0nlJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>Logger
);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
parcelHelpers.export(exports, "setUserLogHandler", ()=>setUserLogHandler
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _a;
/**
 * A container for all of the Logger instances
 */ var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var LogLevel;
(function(LogLevel1) {
    LogLevel1[LogLevel1["DEBUG"] = 0] = "DEBUG";
    LogLevel1[LogLevel1["VERBOSE"] = 1] = "VERBOSE";
    LogLevel1[LogLevel1["INFO"] = 2] = "INFO";
    LogLevel1[LogLevel1["WARN"] = 3] = "WARN";
    LogLevel1[LogLevel1["ERROR"] = 4] = "ERROR";
    LogLevel1[LogLevel1["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {
}));
var levelStringToEnum = {
    'debug': LogLevel.DEBUG,
    'verbose': LogLevel.VERBOSE,
    'info': LogLevel.INFO,
    'warn': LogLevel.WARN,
    'error': LogLevel.ERROR,
    'silent': LogLevel.SILENT
};
/**
 * The default log level
 */ var defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */ var ConsoleMethod = (_a = {
}, _a[LogLevel.DEBUG] = 'log', _a[LogLevel.VERBOSE] = 'log', _a[LogLevel.INFO] = 'info', _a[LogLevel.WARN] = 'warn', _a[LogLevel.ERROR] = 'error', _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ var defaultLogHandler = function(instance, logType) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    if (logType < instance.logLevel) return;
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) console[method].apply(console, __spreadArrays([
        "[" + now + "]  " + instance.name + ":"
    ], args));
    else throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
};
var Logger = function() {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ function Logger1(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */ this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */ this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    Object.defineProperty(Logger1.prototype, "logLevel", {
        get: function() {
            return this._logLevel;
        },
        set: function(val) {
            if (!(val in LogLevel)) throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
            this._logLevel = val;
        },
        enumerable: false,
        configurable: true
    });
    // Workaround for setter/getter having to be the same type.
    Logger1.prototype.setLogLevel = function(val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    };
    Object.defineProperty(Logger1.prototype, "logHandler", {
        get: function() {
            return this._logHandler;
        },
        set: function(val) {
            if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
            this._logHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger1.prototype, "userLogHandler", {
        get: function() {
            return this._userLogHandler;
        },
        set: function(val) {
            this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */ Logger1.prototype.debug = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            LogLevel.DEBUG
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.DEBUG
        ], args));
    };
    Logger1.prototype.log = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            LogLevel.VERBOSE
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.VERBOSE
        ], args));
    };
    Logger1.prototype.info = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            LogLevel.INFO
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.INFO
        ], args));
    };
    Logger1.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            LogLevel.WARN
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.WARN
        ], args));
    };
    Logger1.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([
            this,
            LogLevel.ERROR
        ], args));
        this._logHandler.apply(this, __spreadArrays([
            this,
            LogLevel.ERROR
        ], args));
    };
    return Logger1;
}();
function setLogLevel(level) {
    instances.forEach(function(inst) {
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    var _loop_1 = function(instance) {
        var customLogLevel = null;
        if (options && options.level) customLogLevel = levelStringToEnum[options.level];
        if (logCallback === null) instance.userLogHandler = null;
        else instance.userLogHandler = function(instance1, level) {
            var args = [];
            for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
            var message = args.map(function(arg) {
                if (arg == null) return null;
                else if (typeof arg === 'string') return arg;
                else if (typeof arg === 'number' || typeof arg === 'boolean') return arg.toString();
                else if (arg instanceof Error) return arg.message;
                else try {
                    return JSON.stringify(arg);
                } catch (ignored) {
                    return null;
                }
            }).filter(function(arg) {
                return arg;
            }).join(' ');
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance1.logLevel)) logCallback({
                level: LogLevel[level].toLowerCase(),
                message: message,
                args: args,
                type: instance1.name
            });
        };
    };
    for(var _i = 0, instances_1 = instances; _i < instances_1.length; _i++){
        var instance = instances_1[_i];
        _loop_1(instance);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jRsWt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lite = require("@firebase/firestore/lite");
parcelHelpers.exportAll(_lite, exports);

},{"@firebase/firestore/lite":"5jkA1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5jkA1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Bytes", ()=>_e
);
parcelHelpers.export(exports, "CollectionReference", ()=>he
);
parcelHelpers.export(exports, "DocumentReference", ()=>ce
);
parcelHelpers.export(exports, "DocumentSnapshot", ()=>Ge
);
parcelHelpers.export(exports, "FieldPath", ()=>pe
);
parcelHelpers.export(exports, "FieldValue", ()=>ge
);
parcelHelpers.export(exports, "Firestore", ()=>re
);
parcelHelpers.export(exports, "FirestoreError", ()=>U
);
parcelHelpers.export(exports, "GeoPoint", ()=>be
);
parcelHelpers.export(exports, "Query", ()=>ae
);
parcelHelpers.export(exports, "QueryConstraint", ()=>Ze
);
parcelHelpers.export(exports, "QueryDocumentSnapshot", ()=>He
);
parcelHelpers.export(exports, "QuerySnapshot", ()=>Ye
);
parcelHelpers.export(exports, "Timestamp", ()=>yt
);
parcelHelpers.export(exports, "Transaction", ()=>Lr
);
parcelHelpers.export(exports, "WriteBatch", ()=>Dr
);
parcelHelpers.export(exports, "addDoc", ()=>Tr
);
parcelHelpers.export(exports, "arrayRemove", ()=>Vr
);
parcelHelpers.export(exports, "arrayUnion", ()=>Rr
);
parcelHelpers.export(exports, "collection", ()=>le
);
parcelHelpers.export(exports, "collectionGroup", ()=>fe
);
parcelHelpers.export(exports, "connectFirestoreEmulator", ()=>oe
);
parcelHelpers.export(exports, "deleteDoc", ()=>Ir
);
parcelHelpers.export(exports, "deleteField", ()=>Ar
);
parcelHelpers.export(exports, "doc", ()=>de
);
parcelHelpers.export(exports, "documentId", ()=>ye
);
parcelHelpers.export(exports, "endAt", ()=>fr
);
parcelHelpers.export(exports, "endBefore", ()=>lr
);
parcelHelpers.export(exports, "getDoc", ()=>gr
);
parcelHelpers.export(exports, "getDocs", ()=>br
);
parcelHelpers.export(exports, "getFirestore", ()=>ie
);
parcelHelpers.export(exports, "increment", ()=>Nr
);
parcelHelpers.export(exports, "initializeFirestore", ()=>se
);
parcelHelpers.export(exports, "limit", ()=>ir
);
parcelHelpers.export(exports, "limitToLast", ()=>or
);
parcelHelpers.export(exports, "orderBy", ()=>rr
);
parcelHelpers.export(exports, "query", ()=>Xe
);
parcelHelpers.export(exports, "queryEqual", ()=>me
);
parcelHelpers.export(exports, "refEqual", ()=>we
);
parcelHelpers.export(exports, "runTransaction", ()=>Ur
);
parcelHelpers.export(exports, "serverTimestamp", ()=>Pr
);
parcelHelpers.export(exports, "setDoc", ()=>vr
);
parcelHelpers.export(exports, "setLogLevel", ()=>w
);
parcelHelpers.export(exports, "snapshotEqual", ()=>Ke
);
parcelHelpers.export(exports, "startAfter", ()=>ar
);
parcelHelpers.export(exports, "startAt", ()=>cr
);
parcelHelpers.export(exports, "terminate", ()=>ue
);
parcelHelpers.export(exports, "updateDoc", ()=>Er
);
parcelHelpers.export(exports, "where", ()=>nr
);
parcelHelpers.export(exports, "writeBatch", ()=>Fr
);
var _app = require("@firebase/app");
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */ class l {
    constructor(t1){
        this.uid = t1;
    }
    isAuthenticated() {
        return null != this.uid;
    }
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */ toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }
    isEqual(t) {
        return t.uid === this.uid;
    }
}
/** A user with a null UID. */ l.UNAUTHENTICATED = new l(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
l.GOOGLE_CREDENTIALS = new l("google-credentials-uid"), l.FIRST_PARTY = new l("first-party-uid"), l.MOCK_USER = new l("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let f = "9.0.1";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const d = new _logger.Logger("@firebase/firestore");
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */ function w(t2) {
    d.setLogLevel(t2);
}
function m(t2, ...n) {
    if (d.logLevel <= _logger.LogLevel.DEBUG) {
        const e = n.map(_);
        d.debug(`Firestore (${f}): ${t2}`, ...e);
    }
}
function p(t2, ...n) {
    if (d.logLevel <= _logger.LogLevel.ERROR) {
        const e = n.map(_);
        d.error(`Firestore (${f}): ${t2}`, ...e);
    }
}
/**
 * @internal
 */ function y(t2, ...n) {
    if (d.logLevel <= _logger.LogLevel.WARN) {
        const e = n.map(_);
        d.warn(`Firestore (${f}): ${t2}`, ...e);
    }
}
/**
 * Converts an additional log parameter to a string representation.
 */ function _(t2) {
    if ("string" == typeof t2) return t2;
    try {
        return n = t2, JSON.stringify(n);
    } catch (n) {
        // Converting to JSON failed, just log the object directly
        return t2;
    }
    /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Formats an object as a JSON string, suitable for logging. */ var n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */ function g(t2 = "Unexpected state") {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const n = `FIRESTORE (${f}) INTERNAL ASSERTION FAILED: ` + t2;
    // NOTE: We don't use FirestoreError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw p(n), new Error(n);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */ function b(t2, n) {
    t2 || g();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */ function v(t2, // eslint-disable-next-line @typescript-eslint/no-explicit-any
n) {
    return t2;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const E = "ok", I = "cancelled", T = "unknown", A = "invalid-argument", P = "deadline-exceeded", R = "not-found", V = "already-exists", N = "permission-denied", D = "unauthenticated", $ = "resource-exhausted", F = "failed-precondition", S = "aborted", q = "out-of-range", x = "unimplemented", O = "internal", C = "unavailable", L = "data-loss";
/** An error returned by a Firestore operation. */ class U extends Error {
    /** @hideconstructor */ constructor(/**
     * The backend error code associated with this error.
     */ t2, /**
     * A custom error description.
     */ n2){
        super(n2), this.code = t2, this.message = n2, /** The custom name for all FirestoreErrors. */ this.name = "FirebaseError", // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = ()=>`${this.name}: [code=${this.code}]: ${this.message}`
        ;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class j {
    constructor(){
        this.promise = new Promise((t3, n1)=>{
            this.resolve = t3, this.reject = n1;
        });
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class k {
    constructor(t3, n1){
        this.user = n1, this.type = "OAuth", this.authHeaders = {
        }, // Set the headers using Object Literal notation to avoid minification
        this.authHeaders.Authorization = `Bearer ${t3}`;
    }
}
/** A CredentialsProvider that always yields an empty token. */ class M {
    getToken() {
        return Promise.resolve(null);
    }
    invalidateToken() {
    }
    start(t, n) {
        // Fire with initial user.
        t.enqueueRetryable(()=>n(l.UNAUTHENTICATED)
        );
    }
    shutdown() {
    }
}
/**
 * A CredentialsProvider that always returns a constant token. Used for
 * emulator token mocking.
 */ class B {
    constructor(t4){
        this.token = t4, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */ this.changeListener = null;
    }
    getToken() {
        return Promise.resolve(this.token);
    }
    invalidateToken() {
    }
    start(t, n) {
        this.changeListener = n, // Fire with initial user.
        t.enqueueRetryable(()=>n(this.token.user)
        );
    }
    shutdown() {
        this.changeListener = null;
    }
}
/** Credential provider for the Lite SDK. */ class Q {
    constructor(t5){
        this.auth = null, t5.onInit((t6)=>{
            this.auth = t6;
        });
    }
    getToken() {
        return this.auth ? this.auth.getToken().then((t6)=>t6 ? (b("string" == typeof t6.accessToken), new k(t6.accessToken, new l(this.auth.getUid()))) : null
        ) : Promise.resolve(null);
    }
    invalidateToken() {
    }
    start(t, n) {
    }
    shutdown() {
    }
}
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */ class z {
    constructor(t6, n3, e4){
        this.t = t6, this.i = n3, this.o = e4, this.type = "FirstParty", this.user = l.FIRST_PARTY;
    }
    get authHeaders() {
        const t7 = {
            "X-Goog-AuthUser": this.i
        }, n4 = this.t.auth.getAuthHeaderValueForFirstParty([]);
        // Use array notation to prevent minification
        return n4 && (t7.Authorization = n4), this.o && (t7["X-Goog-Iam-Authorization-Token"] = this.o), t7;
    }
}
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */ class W {
    constructor(t7, n4, e1){
        this.t = t7, this.i = n4, this.o = e1;
    }
    getToken() {
        return Promise.resolve(new z(this.t, this.i, this.o));
    }
    start(t, n) {
        // Fire with initial uid.
        t.enqueueRetryable(()=>n(l.FIRST_PARTY)
        );
    }
    shutdown() {
    }
    invalidateToken() {
    }
}
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class G {
    /**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId - The database to use.
     * @param appId - The Firebase App Id.
     * @param persistenceKey - A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host - The Firestore backend host to connect to.
     * @param ssl - Whether to use SSL when connecting.
     * @param forceLongPolling - Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
     * option when using WebChannel as the network transport.
     * @param useFetchStreams Whether to use the Fetch API instead of
     * XMLHTTPRequest
     */ constructor(t8, n5, e2, r1, s6, i, o, u){
        this.databaseId = t8, this.appId = n5, this.persistenceKey = e2, this.host = r1, this.ssl = s6, this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;
    }
}
/** The default database name for a project. */ /**
 * Represents the database ID a Firestore client is associated with.
 * @internal
 */ class H {
    constructor(t9, n6){
        this.projectId = t9, this.database = n6 || "(default)";
    }
    get isDefaultDatabase() {
        return "(default)" === this.database;
    }
    isEqual(t) {
        return t instanceof H && t.projectId === this.projectId && t.database === this.database;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Path represents an ordered sequence of string segments.
 */ class Y {
    constructor(t10, n7, e3){
        (void 0) === n7 ? n7 = 0 : n7 > t10.length && g(), (void 0) === e3 ? e3 = t10.length - n7 : e3 > t10.length - n7 && g(), this.segments = t10, this.offset = n7, this.len = e3;
    }
    get length() {
        return this.len;
    }
    isEqual(t) {
        return 0 === Y.comparator(this, t);
    }
    child(t) {
        const n8 = this.segments.slice(this.offset, this.limit());
        return t instanceof Y ? t.forEach((t11)=>{
            n8.push(t11);
        }) : n8.push(t), this.construct(n8);
    }
    /** The index of one past the last segment of the path. */ limit() {
        return this.offset + this.length;
    }
    popFirst(t) {
        return t = (void 0) === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
    }
    popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
    }
    firstSegment() {
        return this.segments[this.offset];
    }
    lastSegment() {
        return this.get(this.length - 1);
    }
    get(t) {
        return this.segments[this.offset + t];
    }
    isEmpty() {
        return 0 === this.length;
    }
    isPrefixOf(t) {
        if (t.length < this.length) return !1;
        for(let n8 = 0; n8 < this.length; n8++)if (this.get(n8) !== t.get(n8)) return !1;
        return !0;
    }
    isImmediateParentOf(t) {
        if (this.length + 1 !== t.length) return !1;
        for(let n8 = 0; n8 < this.length; n8++)if (this.get(n8) !== t.get(n8)) return !1;
        return !0;
    }
    forEach(t) {
        for(let n8 = this.offset, e4 = this.limit(); n8 < e4; n8++)t(this.segments[n8]);
    }
    toArray() {
        return this.segments.slice(this.offset, this.limit());
    }
    static comparator(t, n) {
        const e4 = Math.min(t.length, n.length);
        for(let r1 = 0; r1 < e4; r1++){
            const e5 = t.get(r1), s1 = n.get(r1);
            if (e5 < s1) return -1;
            if (e5 > s1) return 1;
        }
        return t.length < n.length ? -1 : t.length > n.length ? 1 : 0;
    }
}
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 *
 * @internal
 */ class K extends Y {
    construct(t, n, e) {
        return new K(t, n, e);
    }
    canonicalString() {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        return this.toArray().join("/");
    }
    toString() {
        return this.canonicalString();
    }
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */ static fromString(...t) {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        const n8 = [];
        for (const e5 of t){
            if (e5.indexOf("//") >= 0) throw new U(A, `Invalid segment (${e5}). Paths must not contain // in them.`);
            // Strip leading and traling slashed.
            n8.push(...e5.split("/").filter((t11)=>t11.length > 0
            ));
        }
        return new K(n8);
    }
    static emptyPath() {
        return new K([]);
    }
}
const J = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * A dot-separated path for navigating sub-objects within a document.
 * @internal
 */ class Z extends Y {
    construct(t, n, e) {
        return new Z(t, n, e);
    }
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */ static isValidIdentifier(t) {
        return J.test(t);
    }
    canonicalString() {
        return this.toArray().map((t11)=>(t11 = t11.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), Z.isValidIdentifier(t11) || (t11 = "`" + t11 + "`"), t11)
        ).join(".");
    }
    toString() {
        return this.canonicalString();
    }
    /**
     * Returns true if this field references the key of a document.
     */ isKeyField() {
        return 1 === this.length && "__name__" === this.get(0);
    }
    /**
     * The field designating the key of a document.
     */ static keyField() {
        return new Z([
            "__name__"
        ]);
    }
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */ static fromServerFormat(t) {
        const n8 = [];
        let e5 = "", r1 = 0;
        const s1 = ()=>{
            if (0 === e5.length) throw new U(A, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
            n8.push(e5), e5 = "";
        };
        let i1 = !1;
        for(; r1 < t.length;){
            const n9 = t[r1];
            if ("\\" === n9) {
                if (r1 + 1 === t.length) throw new U(A, "Path has trailing escape character: " + t);
                const n10 = t[r1 + 1];
                if ("\\" !== n10 && "." !== n10 && "`" !== n10) throw new U(A, "Path has invalid escape sequence: " + t);
                e5 += n10, r1 += 2;
            } else "`" === n9 ? (i1 = !i1, r1++) : "." !== n9 || i1 ? (e5 += n9, r1++) : (s1(), r1++);
        }
        if (s1(), i1) throw new U(A, "Unterminated ` in path: " + t);
        return new Z(n8);
    }
    static emptyPath() {
        return new Z([]);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ class X {
    constructor(t11){
        this.path = t11;
    }
    static fromPath(t) {
        return new X(K.fromString(t));
    }
    static fromName(t) {
        return new X(K.fromString(t).popFirst(5));
    }
    /** Returns true if the document is in the specified collectionId. */ hasCollectionId(t) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }
    isEqual(t) {
        return null !== t && 0 === K.comparator(this.path, t.path);
    }
    toString() {
        return this.path.toString();
    }
    static comparator(t, n) {
        return K.comparator(t.path, n.path);
    }
    static isDocumentKey(t) {
        return t.length % 2 == 0;
    }
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */ static fromSegments(t) {
        return new X(new K(t.slice()));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function tt(t12, n8, e5) {
    if (!e5) throw new U(A, `Function ${t12}() cannot be called with an empty ${n8}.`);
}
/**
 * Validates that two boolean options are not set at the same time.
 * @internal
 */ /**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */ function nt(t12) {
    if (!X.isDocumentKey(t12)) throw new U(A, `Invalid document reference. Document references must have an even number of segments, but ${t12} has ${t12.length}.`);
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */ function et(t12) {
    if (X.isDocumentKey(t12)) throw new U(A, `Invalid collection reference. Collection references must have an odd number of segments, but ${t12} has ${t12.length}.`);
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */ /** Returns a string describing the type / value of the provided input. */ function rt(t12) {
    if ((void 0) === t12) return "undefined";
    if (null === t12) return "null";
    if ("string" == typeof t12) return t12.length > 20 && (t12 = `${t12.substring(0, 20)}...`), JSON.stringify(t12);
    if ("number" == typeof t12 || "boolean" == typeof t12) return "" + t12;
    if ("object" == typeof t12) {
        if (t12 instanceof Array) return "an array";
        {
            const n8 = /** Hacky method to try to get the constructor name for an object. */ function(t13) {
                if (t13.constructor) {
                    const n9 = /function\s+([^\s(]+)\s*\(/.exec(t13.constructor.toString());
                    if (n9 && n9.length > 1) return n9[1];
                }
                return null;
            }(t12);
            return n8 ? `a custom ${n8} object` : "an object";
        }
    }
    return "function" == typeof t12 ? "a function" : g();
}
function st(t12, // eslint-disable-next-line @typescript-eslint/no-explicit-any
n8) {
    if ("_delegate" in t12 && // Unwrap Compat types
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (t12 = t12._delegate), !(t12 instanceof n8)) {
        if (n8.name === t12.constructor.name) throw new U(A, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        {
            const e5 = rt(t12);
            throw new U(A, `Expected type '${n8.name}', but it was: ${e5}`);
        }
    }
    return t12;
}
function it(t12, n8) {
    if (n8 <= 0) throw new U(A, `Function ${t12}() requires a positive number, but it was: ${n8}.`);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns whether a variable is either undefined or null.
 */ function ot(t12) {
    return null == t12;
}
/** Returns whether the value represents -0. */ function ut(t12) {
    // Detect if the value is -0.0. Based on polyfill from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    return 0 === t12 && 1 / t12 == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ct = {
    BatchGetDocuments: "batchGet",
    Commit: "commit",
    RunQuery: "runQuery"
};
/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */ var at, ht;
/**
 * Converts an HTTP Status Code to the equivalent error code.
 *
 * @param status - An HTTP Status Code, like 200, 404, 503, etc.
 * @returns The equivalent Code. Unknown status codes are mapped to
 *     Code.UNKNOWN.
 */ function lt(t12) {
    if ((void 0) === t12) return p("RPC_ERROR", "HTTP error has no status"), T;
    // The canonical error codes for Google APIs [1] specify mapping onto HTTP
    // status codes but the mapping is not bijective. In each case of ambiguity
    // this function chooses a primary error.
    // [1]
    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
    switch(t12){
        case 200:
            // OK
            return E;
        case 400:
            // Bad Request
            return F;
        // Other possibilities based on the forward mapping
        // return Code.INVALID_ARGUMENT;
        // return Code.OUT_OF_RANGE;
        case 401:
            // Unauthorized
            return D;
        case 403:
            // Forbidden
            return N;
        case 404:
            // Not Found
            return R;
        case 409:
            // Conflict
            return S;
        // Other possibilities:
        // return Code.ALREADY_EXISTS;
        case 416:
            // Range Not Satisfiable
            return q;
        case 429:
            // Too Many Requests
            return $;
        case 499:
            // Client Closed Request
            return I;
        case 500:
            // Internal Server Error
            return T;
        // Other possibilities:
        // return Code.INTERNAL;
        // return Code.DATA_LOSS;
        case 501:
            // Unimplemented
            return x;
        case 503:
            // Service Unavailable
            return C;
        case 504:
            // Gateway Timeout
            return P;
        default:
            return t12 >= 200 && t12 < 300 ? E : t12 >= 400 && t12 < 500 ? F : t12 >= 500 && t12 < 600 ? O : T;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A Rest-based connection that relies on the native HTTP stack
 * (e.g. `fetch` or a polyfill).
 */ (ht = at || (at = {
}))[ht.OK = 0] = "OK", ht[ht.CANCELLED = 1] = "CANCELLED", ht[ht.UNKNOWN = 2] = "UNKNOWN", ht[ht.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", ht[ht.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ht[ht.NOT_FOUND = 5] = "NOT_FOUND", ht[ht.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ht[ht.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", ht[ht.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ht[ht.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", ht[ht.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ht[ht.ABORTED = 10] = "ABORTED", ht[ht.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ht[ht.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", ht[ht.INTERNAL = 13] = "INTERNAL", ht[ht.UNAVAILABLE = 14] = "UNAVAILABLE", ht[ht.DATA_LOSS = 15] = "DATA_LOSS";
class ft extends /**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */ class {
    constructor(t12){
        this.databaseInfo = t12, this.databaseId = t12.databaseId;
        const n8 = t12.ssl ? "https" : "http";
        this.u = n8 + "://" + t12.host, this.h = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
    }
    l(t, n, e, r) {
        const s1 = this.m(t, n);
        m("RestConnection", "Sending: ", s1, e);
        const i1 = {
        };
        return this.p(i1, r), this.g(t, s1, i1, e).then((t13)=>(m("RestConnection", "Received: ", t13), t13)
        , (n9)=>{
            throw y("RestConnection", `${t} failed with error: `, n9, "url: ", s1, "request:", e), n9;
        });
    }
    v(t, n, e, r) {
        // The REST API automatically aggregates all of the streamed results, so we
        // can just use the normal invoke() method.
        return this.l(t, n, e, r);
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */ p(t, n) {
        if (t["X-Goog-Api-Client"] = "gl-js/ fire/" + f, // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), n) for(const e5 in n.authHeaders)n.authHeaders.hasOwnProperty(e5) && (t[e5] = n.authHeaders[e5]);
    }
    m(t, n) {
        const e5 = ct[t];
        return `${this.u}/v1/${n}:${e5}`;
    }
} {
    /**
     * @param databaseInfo - The connection info.
     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.
     */ constructor(t13, n9){
        super(t13), this.I = n9;
    }
    T(t, n) {
        throw new Error("Not supported by FetchConnection");
    }
    async g(t, n, e, r) {
        const s1 = JSON.stringify(r);
        let i1;
        try {
            i1 = await this.I(n, {
                method: "POST",
                headers: e,
                body: s1
            });
        } catch (t14) {
            throw new U(lt(t14.status), "Request failed with error: " + t14.statusText);
        }
        if (!i1.ok) throw new U(lt(i1.status), "Request failed with error: " + i1.statusText);
        return i1.json();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Initializes the HTTP connection for the REST API. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */ function dt(t14) {
    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
    const n10 = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto), e5 = new Uint8Array(t14);
    if (n10 && "function" == typeof n10.getRandomValues) n10.getRandomValues(e5);
    else // Falls back to Math.random
    for(let n11 = 0; n11 < t14; n11++)e5[n11] = Math.floor(256 * Math.random());
    return e5;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class wt {
    static A() {
        // Alphanumeric characters
        const t14 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n10 = Math.floor(256 / t14.length) * t14.length;
        // The largest byte value that is a multiple of `char.length`.
        let e5 = "";
        for(; e5.length < 20;){
            const r2 = dt(40);
            for(let s1 = 0; s1 < r2.length; ++s1)// Only accept values that are [0, maxMultiple), this ensures they can
            // be evenly mapped to indices of `chars` via a modulo operation.
            e5.length < 20 && r2[s1] < n10 && (e5 += t14.charAt(r2[s1] % t14.length));
        }
        return e5;
    }
}
function mt(t14, n10) {
    return t14 < n10 ? -1 : t14 > n10 ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */ function pt(t14, n10, e5) {
    return t14.length === n10.length && t14.every((t15, r2)=>e5(t15, n10[r2])
    );
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */ class yt {
    /**
     * Creates a new timestamp.
     *
     * @param seconds - The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds - The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */ constructor(/**
     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
     */ t14, /**
     * The fractions of a second at nanosecond resolution.*
     */ n10){
        if (this.seconds = t14, this.nanoseconds = n10, n10 < 0) throw new U(A, "Timestamp nanoseconds out of range: " + n10);
        if (n10 >= 1000000000) throw new U(A, "Timestamp nanoseconds out of range: " + n10);
        if (t14 < -62135596800) throw new U(A, "Timestamp seconds out of range: " + t14);
        // This will break in the year 10,000.
        if (t14 >= 253402300800) throw new U(A, "Timestamp seconds out of range: " + t14);
    }
    /**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @returns a new timestamp representing the current date.
     */ static now() {
        return yt.fromMillis(Date.now());
    }
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */ static fromDate(t) {
        return yt.fromMillis(t.getTime());
    }
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */ static fromMillis(t) {
        const n11 = Math.floor(t / 1000), e5 = Math.floor(1000000 * (t - 1000 * n11));
        return new yt(n11, e5);
    }
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */ toDate() {
        return new Date(this.toMillis());
    }
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */ toMillis() {
        return 1000 * this.seconds + this.nanoseconds / 1000000;
    }
    _compareTo(t) {
        return this.seconds === t.seconds ? mt(this.nanoseconds, t.nanoseconds) : mt(this.seconds, t.seconds);
    }
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */ isEqual(t) {
        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }
    /** Returns a textual representation of this `Timestamp`. */ toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }
    /** Returns a JSON-serializable representation of this `Timestamp`. */ toJSON() {
        return {
            seconds: this.seconds,
            nanoseconds: this.nanoseconds
        };
    }
    /**
     * Converts this object to a primitive string, which allows `Timestamp` objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */ valueOf() {
        // This method returns a string of the form <seconds>.<nanoseconds> where
        // <seconds> is translated to have a non-negative value and both <seconds>
        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
        // Strings with this format then have a lexiographical ordering that matches
        // the expected ordering. The <seconds> translation is done to avoid having
        // a leading negative sign (i.e. a leading '-' character) in its string
        // representation, which would affect its lexiographical ordering.
        const t15 = this.seconds - -62135596800;
        // Note: Up to 12 decimal digits are required to represent all valid
        // 'seconds' values.
        return String(t15).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */ class _t {
    constructor(t15){
        this.timestamp = t15;
    }
    static fromTimestamp(t) {
        return new _t(t);
    }
    static min() {
        return new _t(new yt(0, 0));
    }
    compareTo(t) {
        return this.timestamp._compareTo(t.timestamp);
    }
    isEqual(t) {
        return this.timestamp.isEqual(t.timestamp);
    }
    /** Returns a number representation of the version for use in spec tests. */ toMicroseconds() {
        // Convert to microseconds.
        return 1000000 * this.timestamp.seconds + this.timestamp.nanoseconds / 1000;
    }
    toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }
    toTimestamp() {
        return this.timestamp;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function gt(t16) {
    let n11 = 0;
    for(const e5 in t16)Object.prototype.hasOwnProperty.call(t16, e5) && n11++;
    return n11;
}
function bt(t16, n11) {
    for(const e5 in t16)Object.prototype.hasOwnProperty.call(t16, e5) && n11(e5, t16[e5]);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */ class vt {
    constructor(t16){
        this.fields = t16, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        t16.sort(Z.comparator);
    }
    /**
     * Verifies that `fieldPath` is included by at least one field in this field
     * mask.
     *
     * This is an O(n) operation, where `n` is the size of the field mask.
     */ covers(t) {
        for (const n11 of this.fields)if (n11.isPrefixOf(t)) return !0;
        return !1;
    }
    isEqual(t) {
        return pt(this.fields, t.fields, (t17, n11)=>t17.isEqual(n11)
        );
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Converts a Base64 encoded string to a binary string. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 * @internal
 */ class Et {
    constructor(t17){
        this.binaryString = t17;
    }
    static fromBase64String(t) {
        const n11 = atob(t);
        return new Et(n11);
    }
    static fromUint8Array(t) {
        const n11 = /**
 * Helper function to convert an Uint8array to a binary string.
 */ function(t18) {
            let n12 = "";
            for(let e5 = 0; e5 < t18.length; ++e5)n12 += String.fromCharCode(t18[e5]);
            return n12;
        }(t);
        return new Et(n11);
    }
    toBase64() {
        var t18;
        return t18 = this.binaryString, btoa(t18);
    }
    toUint8Array() {
        return (function(t19) {
            const n11 = new Uint8Array(t19.length);
            for(let e5 = 0; e5 < t19.length; e5++)n11[e5] = t19.charCodeAt(e5);
            return n11;
        })(this.binaryString);
    }
    approximateByteSize() {
        return 2 * this.binaryString.length;
    }
    compareTo(t) {
        return mt(this.binaryString, t.binaryString);
    }
    isEqual(t) {
        return this.binaryString === t.binaryString;
    }
}
Et.EMPTY_BYTE_STRING = new Et("");
const It = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */ function Tt(t19) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (b(!!t19), "string" == typeof t19) {
        // The date string can have higher precision (nanos) than the Date class
        // (millis), so we do some custom parsing here.
        // Parse the nanos right out of the string.
        let n11 = 0;
        const e5 = It.exec(t19);
        if (b(!!e5), e5[1]) {
            // Pad the fraction out to 9 digits (nanos).
            let t20 = e5[1];
            t20 = (t20 + "000000000").substr(0, 9), n11 = Number(t20);
        }
        // Parse the date to get the seconds.
        const r2 = new Date(t19);
        return {
            seconds: Math.floor(r2.getTime() / 1000),
            nanos: n11
        };
    }
    return {
        seconds: At(t19.seconds),
        nanos: At(t19.nanos)
    };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */ function At(t19) {
    // TODO(bjornick): Handle int64 greater than 53 bits.
    return "number" == typeof t19 ? t19 : "string" == typeof t19 ? Number(t19) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */ function Pt(t19) {
    return "string" == typeof t19 ? Et.fromBase64String(t19) : Et.fromUint8Array(t19);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */ function Rt(t19) {
    var n11, e5;
    return "server_timestamp" === (null === (e5 = ((null === (n11 = null == t19 ? void 0 : t19.mapValue) || (void 0) === n11 ? void 0 : n11.fields) || {
    }).__type__) || (void 0) === e5 ? void 0 : e5.stringValue);
}
/**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */ function Vt(t19) {
    const n11 = t19.mapValue.fields.__previous_value__;
    return Rt(n11) ? Vt(n11) : n11;
}
/**
 * Returns the local time at which this timestamp was first set.
 */ function Nt(t19) {
    const n11 = Tt(t19.mapValue.fields.__local_write_time__.timestampValue);
    return new yt(n11.seconds, n11.nanos);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Extracts the backend's type order for the provided value. */ function Dt(t19) {
    return "nullValue" in t19 ? 0 /* NullValue */  : "booleanValue" in t19 ? 1 /* BooleanValue */  : "integerValue" in t19 || "doubleValue" in t19 ? 2 /* NumberValue */  : "timestampValue" in t19 ? 3 /* TimestampValue */  : "stringValue" in t19 ? 5 /* StringValue */  : "bytesValue" in t19 ? 6 /* BlobValue */  : "referenceValue" in t19 ? 7 /* RefValue */  : "geoPointValue" in t19 ? 8 /* GeoPointValue */  : "arrayValue" in t19 ? 9 /* ArrayValue */  : "mapValue" in t19 ? Rt(t19) ? 4 /* ServerTimestampValue */  : 10 /* ObjectValue */  : g();
}
/** Tests `left` and `right` for equality based on the backend semantics. */ function $t(t19, n11) {
    const e5 = Dt(t19);
    if (e5 !== Dt(n11)) return !1;
    switch(e5){
        case 0 /* NullValue */ :
            return !0;
        case 1 /* BooleanValue */ :
            return t19.booleanValue === n11.booleanValue;
        case 4 /* ServerTimestampValue */ :
            return Nt(t19).isEqual(Nt(n11));
        case 3 /* TimestampValue */ :
            return (function(t20, n12) {
                if ("string" == typeof t20.timestampValue && "string" == typeof n12.timestampValue && t20.timestampValue.length === n12.timestampValue.length) // Use string equality for ISO 8601 timestamps
                return t20.timestampValue === n12.timestampValue;
                const e6 = Tt(t20.timestampValue), r2 = Tt(n12.timestampValue);
                return e6.seconds === r2.seconds && e6.nanos === r2.nanos;
            })(t19, n11);
        case 5 /* StringValue */ :
            return t19.stringValue === n11.stringValue;
        case 6 /* BlobValue */ :
            return (function(t20, n12) {
                return Pt(t20.bytesValue).isEqual(Pt(n12.bytesValue));
            })(t19, n11);
        case 7 /* RefValue */ :
            return t19.referenceValue === n11.referenceValue;
        case 8 /* GeoPointValue */ :
            return (function(t20, n12) {
                return At(t20.geoPointValue.latitude) === At(n12.geoPointValue.latitude) && At(t20.geoPointValue.longitude) === At(n12.geoPointValue.longitude);
            })(t19, n11);
        case 2 /* NumberValue */ :
            return (function(t20, n12) {
                if ("integerValue" in t20 && "integerValue" in n12) return At(t20.integerValue) === At(n12.integerValue);
                if ("doubleValue" in t20 && "doubleValue" in n12) {
                    const e6 = At(t20.doubleValue), r2 = At(n12.doubleValue);
                    return e6 === r2 ? ut(e6) === ut(r2) : isNaN(e6) && isNaN(r2);
                }
                return !1;
            })(t19, n11);
        case 9 /* ArrayValue */ :
            return pt(t19.arrayValue.values || [], n11.arrayValue.values || [], $t);
        case 10 /* ObjectValue */ :
            return (function(t20, n12) {
                const e6 = t20.mapValue.fields || {
                }, r2 = n12.mapValue.fields || {
                };
                if (gt(e6) !== gt(r2)) return !1;
                for(const t21 in e6)if (e6.hasOwnProperty(t21) && ((void 0) === r2[t21] || !$t(e6[t21], r2[t21]))) return !1;
                return !0;
            })(t19, n11);
        default:
            return g();
    }
}
function Ft(t19, n11) {
    return (void 0) !== (t19.values || []).find((t20)=>$t(t20, n11)
    );
}
function St(t19, n11) {
    const e5 = Dt(t19), r2 = Dt(n11);
    if (e5 !== r2) return mt(e5, r2);
    switch(e5){
        case 0 /* NullValue */ :
            return 0;
        case 1 /* BooleanValue */ :
            return mt(t19.booleanValue, n11.booleanValue);
        case 2 /* NumberValue */ :
            return (function(t20, n12) {
                const e6 = At(t20.integerValue || t20.doubleValue), r3 = At(n12.integerValue || n12.doubleValue);
                return e6 < r3 ? -1 : e6 > r3 ? 1 : e6 === r3 ? 0 : // one or both are NaN.
                isNaN(e6) ? isNaN(r3) ? 0 : -1 : 1;
            })(t19, n11);
        case 3 /* TimestampValue */ :
            return qt(t19.timestampValue, n11.timestampValue);
        case 4 /* ServerTimestampValue */ :
            return qt(Nt(t19), Nt(n11));
        case 5 /* StringValue */ :
            return mt(t19.stringValue, n11.stringValue);
        case 6 /* BlobValue */ :
            return (function(t20, n12) {
                const e6 = Pt(t20), r3 = Pt(n12);
                return e6.compareTo(r3);
            })(t19.bytesValue, n11.bytesValue);
        case 7 /* RefValue */ :
            return (function(t20, n12) {
                const e6 = t20.split("/"), r3 = n12.split("/");
                for(let t21 = 0; t21 < e6.length && t21 < r3.length; t21++){
                    const n13 = mt(e6[t21], r3[t21]);
                    if (0 !== n13) return n13;
                }
                return mt(e6.length, r3.length);
            })(t19.referenceValue, n11.referenceValue);
        case 8 /* GeoPointValue */ :
            return (function(t20, n12) {
                const e6 = mt(At(t20.latitude), At(n12.latitude));
                if (0 !== e6) return e6;
                return mt(At(t20.longitude), At(n12.longitude));
            })(t19.geoPointValue, n11.geoPointValue);
        case 9 /* ArrayValue */ :
            return (function(t20, n12) {
                const e6 = t20.values || [], r3 = n12.values || [];
                for(let t21 = 0; t21 < e6.length && t21 < r3.length; ++t21){
                    const n13 = St(e6[t21], r3[t21]);
                    if (n13) return n13;
                }
                return mt(e6.length, r3.length);
            })(t19.arrayValue, n11.arrayValue);
        case 10 /* ObjectValue */ :
            return (function(t20, n12) {
                const e6 = t20.fields || {
                }, r3 = Object.keys(e6), s1 = n12.fields || {
                }, i1 = Object.keys(s1);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                r3.sort(), i1.sort();
                for(let t21 = 0; t21 < r3.length && t21 < i1.length; ++t21){
                    const n13 = mt(r3[t21], i1[t21]);
                    if (0 !== n13) return n13;
                    const o1 = St(e6[r3[t21]], s1[i1[t21]]);
                    if (0 !== o1) return o1;
                }
                return mt(r3.length, i1.length);
            })(t19.mapValue, n11.mapValue);
        default:
            throw g();
    }
}
function qt(t19, n11) {
    if ("string" == typeof t19 && "string" == typeof n11 && t19.length === n11.length) return mt(t19, n11);
    const e5 = Tt(t19), r2 = Tt(n11), s1 = mt(e5.seconds, r2.seconds);
    return 0 !== s1 ? s1 : mt(e5.nanos, r2.nanos);
}
function xt(t19, n11) {
    return {
        referenceValue: `projects/${t19.projectId}/databases/${t19.database}/documents/${n11.path.canonicalString()}`
    };
}
/** Returns true if `value` is an ArrayValue. */ function Ot(t19) {
    return !!t19 && "arrayValue" in t19;
}
/** Returns true if `value` is a NullValue. */ function Ct(t19) {
    return !!t19 && "nullValue" in t19;
}
/** Returns true if `value` is NaN. */ function Lt(t19) {
    return !!t19 && "doubleValue" in t19 && isNaN(Number(t19.doubleValue));
}
/** Returns true if `value` is a MapValue. */ function Ut(t19) {
    return !!t19 && "mapValue" in t19;
}
/** Creates a deep copy of `source`. */ function jt(t19) {
    if (t19.geoPointValue) return {
        geoPointValue: Object.assign({
        }, t19.geoPointValue)
    };
    if (t19.timestampValue && "object" == typeof t19.timestampValue) return {
        timestampValue: Object.assign({
        }, t19.timestampValue)
    };
    if (t19.mapValue) {
        const n11 = {
            mapValue: {
                fields: {
                }
            }
        };
        return bt(t19.mapValue.fields, (t20, e5)=>n11.mapValue.fields[t20] = jt(e5)
        ), n11;
    }
    if (t19.arrayValue) {
        const n11 = {
            arrayValue: {
                values: []
            }
        };
        for(let e5 = 0; e5 < (t19.arrayValue.values || []).length; ++e5)n11.arrayValue.values[e5] = jt(t19.arrayValue.values[e5]);
        return n11;
    }
    return Object.assign({
    }, t19);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */ class kt {
    constructor(t19){
        this.value = t19;
    }
    static empty() {
        return new kt({
            mapValue: {
            }
        });
    }
    /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */ field(t) {
        if (t.isEmpty()) return this.value;
        {
            let n11 = this.value;
            for(let e5 = 0; e5 < t.length - 1; ++e5)if (n11 = (n11.mapValue.fields || {
            })[t.get(e5)], !Ut(n11)) return null;
            return n11 = (n11.mapValue.fields || {
            })[t.lastSegment()], n11 || null;
        }
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */ set(t, n) {
        this.getFieldsMap(t.popLast())[t.lastSegment()] = jt(n);
    }
    /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */ setAll(t) {
        let n11 = Z.emptyPath(), e5 = {
        }, r2 = [];
        t.forEach((t20, s1)=>{
            if (!n11.isImmediateParentOf(s1)) {
                // Insert the accumulated changes at this parent location
                const t21 = this.getFieldsMap(n11);
                this.applyChanges(t21, e5, r2), e5 = {
                }, r2 = [], n11 = s1.popLast();
            }
            t20 ? e5[s1.lastSegment()] = jt(t20) : r2.push(s1.lastSegment());
        });
        const s1 = this.getFieldsMap(n11);
        this.applyChanges(s1, e5, r2);
    }
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */ delete(t) {
        const n11 = this.field(t.popLast());
        Ut(n11) && n11.mapValue.fields && delete n11.mapValue.fields[t.lastSegment()];
    }
    isEqual(t) {
        return $t(this.value, t.value);
    }
    /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */ getFieldsMap(t) {
        let n11 = this.value;
        n11.mapValue.fields || (n11.mapValue = {
            fields: {
            }
        });
        for(let e5 = 0; e5 < t.length; ++e5){
            let r2 = n11.mapValue.fields[t.get(e5)];
            Ut(r2) && r2.mapValue.fields || (r2 = {
                mapValue: {
                    fields: {
                    }
                }
            }, n11.mapValue.fields[t.get(e5)] = r2), n11 = r2;
        }
        return n11.mapValue.fields;
    }
    /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */ applyChanges(t, n, e) {
        bt(n, (n11, e5)=>t[n11] = e5
        );
        for (const n11 of e)delete t[n11];
    }
    clone() {
        return new kt(jt(this.value));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a document in Firestore with a key, version, data and whether it
 * has local mutations applied to it.
 *
 * Documents can transition between states via `convertToFoundDocument()`,
 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
 * not transition to one of these states even after all mutations have been
 * applied, `isValidDocument()` returns false and the document should be removed
 * from all views.
 */ class Mt {
    constructor(t20, n11, e5, r2, s1){
        this.key = t20, this.documentType = n11, this.version = e5, this.data = r2, this.documentState = s1;
    }
    /**
     * Creates a document with no known version or data, but which can serve as
     * base document for mutations.
     */ static newInvalidDocument(t) {
        return new Mt(t, 0 /* INVALID */ , _t.min(), kt.empty(), 0 /* SYNCED */ );
    }
    /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */ static newFoundDocument(t, n, e) {
        return new Mt(t, 1 /* FOUND_DOCUMENT */ , n, e, 0 /* SYNCED */ );
    }
    /** Creates a new document that is known to not exist at the given version. */ static newNoDocument(t, n) {
        return new Mt(t, 2 /* NO_DOCUMENT */ , n, kt.empty(), 0 /* SYNCED */ );
    }
    /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */ static newUnknownDocument(t, n) {
        return new Mt(t, 3 /* UNKNOWN_DOCUMENT */ , n, kt.empty(), 2 /* HAS_COMMITTED_MUTATIONS */ );
    }
    /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */ convertToFoundDocument(t, n) {
        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = n, this.documentState = 0 /* SYNCED */ , this;
    }
    /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */ convertToNoDocument(t) {
        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = kt.empty(), this.documentState = 0 /* SYNCED */ , this;
    }
    /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */ convertToUnknownDocument(t) {
        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = kt.empty(), this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
    }
    setHasCommittedMutations() {
        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
    }
    setHasLocalMutations() {
        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this;
    }
    get hasLocalMutations() {
        return 1 /* HAS_LOCAL_MUTATIONS */  === this.documentState;
    }
    get hasCommittedMutations() {
        return 2 /* HAS_COMMITTED_MUTATIONS */  === this.documentState;
    }
    get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
    }
    isValidDocument() {
        return 0 /* INVALID */  !== this.documentType;
    }
    isFoundDocument() {
        return 1 /* FOUND_DOCUMENT */  === this.documentType;
    }
    isNoDocument() {
        return 2 /* NO_DOCUMENT */  === this.documentType;
    }
    isUnknownDocument() {
        return 3 /* UNKNOWN_DOCUMENT */  === this.documentType;
    }
    isEqual(t) {
        return t instanceof Mt && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
    }
    clone() {
        return new Mt(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
    }
    toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Visible for testing
class Bt {
    constructor(t21, n12 = null, e6 = [], r3 = [], s2 = null, i1 = null, o1 = null){
        this.path = t21, this.collectionGroup = n12, this.orderBy = e6, this.filters = r3, this.limit = s2, this.startAt = i1, this.endAt = o1, this.P = null;
    }
}
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */ function Qt(t22, n13 = null, e7 = [], r4 = [], s3 = null, i2 = null, o2 = null) {
    return new Bt(t22, n13, e7, r4, s3, i2, o2);
}
class zt extends class {
} {
    constructor(t22, n13, e7){
        super(), this.field = t22, this.op = n13, this.value = e7;
    }
    /**
     * Creates a filter based on the provided arguments.
     */ static create(t, n, e) {
        return t.isKeyField() ? "in" /* IN */  === n || "not-in" /* NOT_IN */  === n ? this.R(t, n, e) : new Wt(t, n, e) : "array-contains" /* ARRAY_CONTAINS */  === n ? new Kt(t, e) : "in" /* IN */  === n ? new Jt(t, e) : "not-in" /* NOT_IN */  === n ? new Zt(t, e) : "array-contains-any" /* ARRAY_CONTAINS_ANY */  === n ? new Xt(t, e) : new zt(t, n, e);
    }
    static R(t, n, e) {
        return "in" /* IN */  === n ? new Gt(t, e) : new Ht(t, e);
    }
    matches(t) {
        const n14 = t.data.field(this.field);
        // Types do not have to match in NOT_EQUAL filters.
        return "!=" /* NOT_EQUAL */  === this.op ? null !== n14 && this.V(St(n14, this.value)) : null !== n14 && Dt(this.value) === Dt(n14) && this.V(St(n14, this.value));
    // Only compare types with matching backend order (such as double and int).
    }
    V(t) {
        switch(this.op){
            case "<" /* LESS_THAN */ :
                return t < 0;
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;
            case "==" /* EQUAL */ :
                return 0 === t;
            case "!=" /* NOT_EQUAL */ :
                return 0 !== t;
            case ">" /* GREATER_THAN */ :
                return t > 0;
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;
            default:
                return g();
        }
    }
    N() {
        return [
            "<" /* LESS_THAN */ ,
            "<=" /* LESS_THAN_OR_EQUAL */ ,
            ">" /* GREATER_THAN */ ,
            ">=" /* GREATER_THAN_OR_EQUAL */ ,
            "!=" /* NOT_EQUAL */ ,
            "not-in" /* NOT_IN */ 
        ].indexOf(this.op) >= 0;
    }
}
/** Filter that matches on key fields (i.e. '__name__'). */ class Wt extends zt {
    constructor(t23, n14, e8){
        super(t23, n14, e8), this.key = X.fromName(e8.referenceValue);
    }
    matches(t) {
        const n15 = X.comparator(t.key, this.key);
        return this.V(n15);
    }
}
/** Filter that matches on key fields within an array. */ class Gt extends zt {
    constructor(t24, n15){
        super(t24, "in" /* IN */ , n15), this.keys = Yt("in" /* IN */ , n15);
    }
    matches(t) {
        return this.keys.some((n16)=>n16.isEqual(t.key)
        );
    }
}
/** Filter that matches on key fields not present within an array. */ class Ht extends zt {
    constructor(t25, n16){
        super(t25, "not-in" /* NOT_IN */ , n16), this.keys = Yt("not-in" /* NOT_IN */ , n16);
    }
    matches(t) {
        return !this.keys.some((n17)=>n17.isEqual(t.key)
        );
    }
}
function Yt(t26, n17) {
    var e9;
    return ((null === (e9 = n17.arrayValue) || (void 0) === e9 ? void 0 : e9.values) || []).map((t27)=>X.fromName(t27.referenceValue)
    );
}
/** A Filter that implements the array-contains operator. */ class Kt extends zt {
    constructor(t26, n17){
        super(t26, "array-contains" /* ARRAY_CONTAINS */ , n17);
    }
    matches(t) {
        const n18 = t.data.field(this.field);
        return Ot(n18) && Ft(n18.arrayValue, this.value);
    }
}
/** A Filter that implements the IN operator. */ class Jt extends zt {
    constructor(t27, n18){
        super(t27, "in" /* IN */ , n18);
    }
    matches(t) {
        const n19 = t.data.field(this.field);
        return null !== n19 && Ft(this.value.arrayValue, n19);
    }
}
/** A Filter that implements the not-in operator. */ class Zt extends zt {
    constructor(t28, n19){
        super(t28, "not-in" /* NOT_IN */ , n19);
    }
    matches(t) {
        if (Ft(this.value.arrayValue, {
            nullValue: "NULL_VALUE"
        })) return !1;
        const n20 = t.data.field(this.field);
        return null !== n20 && !Ft(this.value.arrayValue, n20);
    }
}
/** A Filter that implements the array-contains-any operator. */ class Xt extends zt {
    constructor(t29, n20){
        super(t29, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n20);
    }
    matches(t) {
        const n21 = t.data.field(this.field);
        return !(!Ot(n21) || !n21.arrayValue.values) && n21.arrayValue.values.some((t30)=>Ft(this.value.arrayValue, t30)
        );
    }
}
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */ class tn {
    constructor(t30, n21){
        this.position = t30, this.before = n21;
    }
}
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */ class nn {
    constructor(t31, n22 = "asc" /* ASCENDING */ ){
        this.field = t31, this.dir = n22;
    }
}
function en(t32, n23) {
    return t32.dir === n23.dir && t32.field.isEqual(n23.field);
}
function rn(t32, n23) {
    if (null === t32) return null === n23;
    if (null === n23) return !1;
    if (t32.before !== n23.before || t32.position.length !== n23.position.length) return !1;
    for(let e9 = 0; e9 < t32.position.length; e9++){
        if (!$t(t32.position[e9], n23.position[e9])) return !1;
    }
    return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */ class sn {
    /**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */ constructor(t32, n23 = null, e9 = [], r4 = [], s3 = null, i2 = "F" /* First */ , o2 = null, u1 = null){
        this.path = t32, this.collectionGroup = n23, this.explicitOrderBy = e9, this.filters = r4, this.limit = s3, this.limitType = i2, this.startAt = o2, this.endAt = u1, this.D = null, // The corresponding `Target` of this `Query` instance.
        this.$ = null, this.startAt, this.endAt;
    }
}
/** Creates a new Query for a query that matches all documents at `path` */ function on(t33) {
    return !ot(t33.limit) && "L" /* Last */  === t33.limitType;
}
function un(t33) {
    return t33.explicitOrderBy.length > 0 ? t33.explicitOrderBy[0].field : null;
}
function cn(t33) {
    for (const n24 of t33.filters)if (n24.N()) return n24.field;
    return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */ /**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */ function an(t33) {
    return null !== t33.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */ function hn(t33) {
    const n24 = v(t33);
    if (null === n24.D) {
        n24.D = [];
        const t34 = cn(n24), e10 = un(n24);
        if (null !== t34 && null === e10) // In order to implicitly add key ordering, we must also add the
        // inequality filter field for it to be a valid query.
        // Note that the default inequality field and key ordering is ascending.
        t34.isKeyField() || n24.D.push(new nn(t34)), n24.D.push(new nn(Z.keyField(), "asc" /* ASCENDING */ ));
        else {
            let t35 = !1;
            for (const e11 of n24.explicitOrderBy)n24.D.push(e11), e11.field.isKeyField() && (t35 = !0);
            if (!t35) {
                // The order of the implicit key ordering always matches the last
                // explicit order by
                const t36 = n24.explicitOrderBy.length > 0 ? n24.explicitOrderBy[n24.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */ ;
                n24.D.push(new nn(Z.keyField(), t36));
            }
        }
    }
    return n24.D;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */ function ln(t33) {
    const n24 = v(t33);
    if (!n24.$) {
        if ("F" /* First */  === n24.limitType) n24.$ = Qt(n24.path, n24.collectionGroup, hn(n24), n24.filters, n24.limit, n24.startAt, n24.endAt);
        else {
            // Flip the orderBy directions since we want the last results
            const t34 = [];
            for (const e10 of hn(n24)){
                const n25 = "desc" /* DESCENDING */  === e10.dir ? "asc" /* ASCENDING */  : "desc" /* DESCENDING */ ;
                t34.push(new nn(e10.field, n25));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
            const e11 = n24.endAt ? new tn(n24.endAt.position, !n24.endAt.before) : null, r5 = n24.startAt ? new tn(n24.startAt.position, !n24.startAt.before) : null;
            // Now return as a LimitType.First query.
            n24.$ = Qt(n24.path, n24.collectionGroup, t34, n24.filters, n24.limit, e11, r5);
        }
    }
    return n24.$;
}
function fn(t33, n24) {
    return (function(t34, n25) {
        if (t34.limit !== n25.limit) return !1;
        if (t34.orderBy.length !== n25.orderBy.length) return !1;
        for(let e10 = 0; e10 < t34.orderBy.length; e10++)if (!en(t34.orderBy[e10], n25.orderBy[e10])) return !1;
        if (t34.filters.length !== n25.filters.length) return !1;
        for(let s4 = 0; s4 < t34.filters.length; s4++)if (e11 = t34.filters[s4], r5 = n25.filters[s4], e11.op !== r5.op || !e11.field.isEqual(r5.field) || !$t(e11.value, r5.value)) return !1;
        var e11, r5;
        return t34.collectionGroup === n25.collectionGroup && !!t34.path.isEqual(n25.path) && !!rn(t34.startAt, n25.startAt) && rn(t34.endAt, n25.endAt);
    })(ln(t33), ln(n24)) && t33.limitType === n24.limitType;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */ /**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */ function dn(t33, n24) {
    return (function(t34) {
        return "number" == typeof t34 && Number.isInteger(t34) && !ut(t34) && t34 <= Number.MAX_SAFE_INTEGER && t34 >= Number.MIN_SAFE_INTEGER;
    })(n24) ? /**
 * Returns an IntegerValue for `value`.
 */ (function(t34) {
        return {
            integerValue: "" + t34
        };
    })(n24) : (function(t34, n25) {
        if (t34.F) {
            if (isNaN(n25)) return {
                doubleValue: "NaN"
            };
            if (n25 === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (n25 === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: ut(n25) ? "-0" : n25
        };
    })(t33, n24);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Used to represent a field transform on a mutation. */ class wn {
    constructor(){
        // Make sure that the structural type of `TransformOperation` is unique.
        // See https://github.com/microsoft/TypeScript/issues/5451
        this._ = void 0;
    }
}
/** Transforms a value into a server-generated timestamp. */ class mn extends wn {
}
/** Transforms an array value via a union operation. */ class pn extends wn {
    constructor(t33){
        super(), this.elements = t33;
    }
}
/** Transforms an array value via a remove operation. */ class yn extends wn {
    constructor(t34){
        super(), this.elements = t34;
    }
}
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */ class _n extends wn {
    constructor(t35, n24){
        super(), this.S = t35, this.q = n24;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A field path and the TransformOperation to perform upon it. */ class gn {
    constructor(t36, n25){
        this.field = t36, this.transform = n25;
    }
}
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */ class bn {
    constructor(t37, n26){
        this.updateTime = t37, this.exists = n26;
    }
    /** Creates a new empty Precondition. */ static none() {
        return new bn;
    }
    /** Creates a new Precondition with an exists flag. */ static exists(t) {
        return new bn(void 0, t);
    }
    /** Creates a new Precondition based on a version a document exists at. */ static updateTime(t) {
        return new bn(t);
    }
    /** Returns whether this Precondition is empty. */ get isNone() {
        return (void 0) === this.updateTime && (void 0) === this.exists;
    }
    isEqual(t) {
        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }
}
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `applySetMutationToRemoteDocument()` for an
 * example).
 */ class vn {
}
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */ class En extends vn {
    constructor(t38, n27, e10, r5 = []){
        super(), this.key = t38, this.value = n27, this.precondition = e10, this.fieldTransforms = r5, this.type = 0 /* Set */ ;
    }
}
/**
 * A mutation that modifies fields of the document at the given key with the
 * given values. The values are applied through a field mask:
 *
 *  * When a field is in both the mask and the values, the corresponding field
 *    is updated.
 *  * When a field is in neither the mask nor the values, the corresponding
 *    field is unmodified.
 *  * When a field is in the mask but not in the values, the corresponding field
 *    is deleted.
 *  * When a field is not in the mask but is in the values, the values map is
 *    ignored.
 */ class In extends vn {
    constructor(t39, n28, e11, r6, s4 = []){
        super(), this.key = t39, this.data = n28, this.fieldMask = e11, this.precondition = r6, this.fieldTransforms = s4, this.type = 1 /* Patch */ ;
    }
}
/** A mutation that deletes the document at the given key. */ class Tn extends vn {
    constructor(t40, n29){
        super(), this.key = t40, this.precondition = n29, this.type = 2 /* Delete */ , this.fieldTransforms = [];
    }
}
/**
 * A mutation that verifies the existence of the document at the given key with
 * the provided precondition.
 *
 * The `verify` operation is only used in Transactions, and this class serves
 * primarily to facilitate serialization into protos.
 */ class An extends vn {
    constructor(t41, n30){
        super(), this.key = t41, this.precondition = n30, this.type = 3 /* Verify */ , this.fieldTransforms = [];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Pn = (()=>{
    const t42 = {
        asc: "ASCENDING",
        desc: "DESCENDING"
    };
    return t42;
})(), Rn = (()=>{
    const t42 = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
    };
    return t42;
})();
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */ class Vn {
    constructor(t42, n31){
        this.databaseId = t42, this.F = n31;
    }
}
/**
 * Returns a value for a number (or null) that's appropriate to put into
 * a google.protobuf.Int32Value proto.
 * DO NOT USE THIS FOR ANYTHING ELSE.
 * This method cheats. It's typed as returning "number" because that's what
 * our generated proto interfaces say Int32Value must be. But GRPC actually
 * expects a { value: <number> } struct.
 */ /**
 * Returns a value for a Date that's appropriate to put into a proto.
 */ function Nn(t43, n32) {
    if (t43.F) return `${new Date(1000 * n32.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + n32.nanoseconds).slice(-9)}Z`;
    return {
        seconds: "" + n32.seconds,
        nanos: n32.nanoseconds
    };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */ function Dn(t43, n32) {
    return t43.F ? n32.toBase64() : n32.toUint8Array();
}
function $n(t43, n32) {
    return Nn(t43, n32.toTimestamp());
}
function Fn(t43) {
    return b(!!t43), _t.fromTimestamp(function(t44) {
        const n32 = Tt(t44);
        return new yt(n32.seconds, n32.nanos);
    }(t43));
}
function Sn(t43, n32) {
    return (function(t44) {
        return new K([
            "projects",
            t44.projectId,
            "databases",
            t44.database
        ]);
    })(t43).child("documents").child(n32).canonicalString();
}
function qn(t43, n32) {
    return Sn(t43.databaseId, n32.path);
}
function xn(t43, n32) {
    const e12 = function(t44) {
        const n33 = K.fromString(t44);
        return b(Gn(n33)), n33;
    }(n32);
    if (e12.get(1) !== t43.databaseId.projectId) throw new U(A, "Tried to deserialize key from different project: " + e12.get(1) + " vs " + t43.databaseId.projectId);
    if (e12.get(3) !== t43.databaseId.database) throw new U(A, "Tried to deserialize key from different database: " + e12.get(3) + " vs " + t43.databaseId.database);
    var r7;
    return new X((b((r7 = e12).length > 4 && "documents" === r7.get(4)), r7.popFirst(5)));
/** Creates a Document proto from key and fields (but no create/update time) */ }
function On(t43, n32) {
    return Sn(t43.databaseId, n32);
}
function Cn(t43) {
    return new K([
        "projects",
        t43.databaseId.projectId,
        "databases",
        t43.databaseId.database
    ]).canonicalString();
}
function Ln(t43, n32, e12) {
    return {
        name: qn(t43, n32),
        fields: e12.value.mapValue.fields
    };
}
function Un(t43, n32) {
    return "found" in n32 ? (function(t44, n33) {
        b(!!n33.found), n33.found.name, n33.found.updateTime;
        const e12 = xn(t44, n33.found.name), r7 = Fn(n33.found.updateTime), s5 = new kt({
            mapValue: {
                fields: n33.found.fields
            }
        });
        return Mt.newFoundDocument(e12, r7, s5);
    })(t43, n32) : "missing" in n32 ? (function(t44, n33) {
        b(!!n33.missing), b(!!n33.readTime);
        const e12 = xn(t44, n33.missing), r7 = Fn(n33.readTime);
        return Mt.newNoDocument(e12, r7);
    })(t43, n32) : g();
}
function jn(t43, n32) {
    let e12;
    if (n32 instanceof En) e12 = {
        update: Ln(t43, n32.key, n32.value)
    };
    else if (n32 instanceof Tn) e12 = {
        delete: qn(t43, n32.key)
    };
    else if (n32 instanceof In) e12 = {
        update: Ln(t43, n32.key, n32.data),
        updateMask: Wn(n32.fieldMask)
    };
    else {
        if (!(n32 instanceof An)) return g();
        e12 = {
            verify: qn(t43, n32.key)
        };
    }
    return n32.fieldTransforms.length > 0 && (e12.updateTransforms = n32.fieldTransforms.map((t44)=>(function(t45, n33) {
            const e13 = n33.transform;
            if (e13 instanceof mn) return {
                fieldPath: n33.field.canonicalString(),
                setToServerValue: "REQUEST_TIME"
            };
            if (e13 instanceof pn) return {
                fieldPath: n33.field.canonicalString(),
                appendMissingElements: {
                    values: e13.elements
                }
            };
            if (e13 instanceof yn) return {
                fieldPath: n33.field.canonicalString(),
                removeAllFromArray: {
                    values: e13.elements
                }
            };
            if (e13 instanceof _n) return {
                fieldPath: n33.field.canonicalString(),
                increment: e13.q
            };
            throw g();
        })(0, t44)
    )), n32.precondition.isNone || (e12.currentDocument = (function(t44, n33) {
        return (void 0) !== n33.updateTime ? {
            updateTime: $n(t44, n33.updateTime)
        } : (void 0) !== n33.exists ? {
            exists: n33.exists
        } : g();
    })(t43, n32.precondition)), e12;
}
function kn(t43, n32) {
    // Dissect the path into parent, collectionId, and optional key filter.
    const e12 = {
        structuredQuery: {
        }
    }, r7 = n32.path;
    null !== n32.collectionGroup ? (e12.parent = On(t43, r7), e12.structuredQuery.from = [
        {
            collectionId: n32.collectionGroup,
            allDescendants: !0
        }
    ]) : (e12.parent = On(t43, r7.popLast()), e12.structuredQuery.from = [
        {
            collectionId: r7.lastSegment()
        }
    ]);
    const s5 = function(t44) {
        if (0 === t44.length) return;
        const n33 = t44.map((t45)=>// visible for testing
            (function(t46) {
                if ("==" /* EQUAL */  === t46.op) {
                    if (Lt(t46.value)) return {
                        unaryFilter: {
                            field: zn(t46.field),
                            op: "IS_NAN"
                        }
                    };
                    if (Ct(t46.value)) return {
                        unaryFilter: {
                            field: zn(t46.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */  === t46.op) {
                    if (Lt(t46.value)) return {
                        unaryFilter: {
                            field: zn(t46.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (Ct(t46.value)) return {
                        unaryFilter: {
                            field: zn(t46.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: zn(t46.field),
                        op: Qn(t46.op),
                        value: t46.value
                    }
                };
            })(t45)
        );
        if (1 === n33.length) return n33[0];
        return {
            compositeFilter: {
                op: "AND",
                filters: n33
            }
        };
    }(n32.filters);
    s5 && (e12.structuredQuery.where = s5);
    const i3 = function(t44) {
        if (0 === t44.length) return;
        return t44.map((t45)=>// visible for testing
            (function(t46) {
                return {
                    field: zn(t46.field),
                    direction: Bn(t46.dir)
                };
            })(t45)
        );
    }(n32.orderBy);
    i3 && (e12.structuredQuery.orderBy = i3);
    const o3 = function(t44, n33) {
        return t44.F || ot(n33) ? n33 : {
            value: n33
        };
    }(t43, n32.limit);
    return null !== o3 && (e12.structuredQuery.limit = o3), n32.startAt && (e12.structuredQuery.startAt = Mn(n32.startAt)), n32.endAt && (e12.structuredQuery.endAt = Mn(n32.endAt)), e12;
}
function Mn(t43) {
    return {
        before: t43.before,
        values: t43.position
    };
}
// visible for testing
function Bn(t43) {
    return Pn[t43];
}
// visible for testing
function Qn(t43) {
    return Rn[t43];
}
function zn(t43) {
    return {
        fieldPath: t43.canonicalString()
    };
}
function Wn(t43) {
    const n32 = [];
    return t43.fields.forEach((t44)=>n32.push(t44.canonicalString())
    ), {
        fieldPaths: n32
    };
}
function Gn(t43) {
    // Resource names have at least 4 components (project ID, database ID)
    return t43.length >= 4 && "projects" === t43.get(0) && "databases" === t43.get(2);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Hn(t43) {
    return new Vn(t43, /* useProto3Json= */ !0);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */ class Yn {
    constructor(/**
     * The AsyncQueue to run backoff operations on.
     */ t43, /**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */ n32, /**
     * The initial delay (used as the base delay on the first retry attempt).
     * Note that jitter will still be applied, so the actual delay could be as
     * little as 0.5*initialDelayMs.
     */ e12 = 1000, r7 = 1.5, s5 = 60000){
        this.O = t43, this.timerId = n32, this.C = e12, this.L = r7, this.U = s5, this.j = 0, this.k = null, /** The last backoff attempt, as epoch milliseconds. */ this.M = Date.now(), this.reset();
    }
    /**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */ reset() {
        this.j = 0;
    }
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */ B() {
        this.j = this.U;
    }
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */ W(t) {
        // Cancel any pending backoff operation.
        this.cancel();
        // First schedule using the current base (which may be 0 and should be
        // honored as such).
        const n33 = Math.floor(this.j + this.G()), e13 = Math.max(0, Date.now() - this.M), r8 = Math.max(0, n33 - e13);
        // Guard against lastAttemptTime being in the future due to a clock change.
        r8 > 0 && m("ExponentialBackoff", `Backing off for ${r8} ms (base delay: ${this.j} ms, delay with jitter: ${n33} ms, last attempt: ${e13} ms ago)`), this.k = this.O.enqueueAfterDelay(this.timerId, r8, ()=>(this.M = Date.now(), t())
        ), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.j *= this.L, this.j < this.C && (this.j = this.C), this.j > this.U && (this.j = this.U);
    }
    H() {
        null !== this.k && (this.k.skipDelay(), this.k = null);
    }
    cancel() {
        null !== this.k && (this.k.cancel(), this.k = null);
    }
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ G() {
        return (Math.random() - 0.5) * this.j;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */ /**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */ class Kn extends class {
} {
    constructor(t44, n33, e13){
        super(), this.credentials = t44, this.Y = n33, this.S = e13, this.K = !1;
    }
    J() {
        if (this.K) throw new U(F, "The client has already been terminated.");
    }
    /** Gets an auth token and invokes the provided RPC. */ l(t, n, e) {
        return this.J(), this.credentials.getToken().then((r8)=>this.Y.l(t, n, e, r8)
        ).catch((t45)=>{
            throw "FirebaseError" === t45.name ? (t45.code === D && this.credentials.invalidateToken(), t45) : new U(T, t45.toString());
        });
    }
    /** Gets an auth token and invokes the provided RPC with streamed results. */ v(t, n, e) {
        return this.J(), this.credentials.getToken().then((r8)=>this.Y.v(t, n, e, r8)
        ).catch((t45)=>{
            throw "FirebaseError" === t45.name ? (t45.code === D && this.credentials.invalidateToken(), t45) : new U(T, t45.toString());
        });
    }
    terminate() {
        this.K = !0;
    }
}
// TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.
async function Jn(t45, n34) {
    const e14 = v(t45), r8 = Cn(e14.S) + "/documents", s6 = {
        writes: n34.map((t46)=>jn(e14.S, t46)
        )
    };
    await e14.l("Commit", r8, s6);
}
async function Zn(t45, n34) {
    const e14 = v(t45), r8 = Cn(e14.S) + "/documents", s6 = {
        documents: n34.map((t46)=>qn(e14.S, t46)
        )
    }, i3 = await e14.v("BatchGetDocuments", r8, s6), o3 = new Map;
    i3.forEach((t46)=>{
        const n35 = Un(e14.S, t46);
        o3.set(n35.key.toString(), n35);
    });
    const u2 = [];
    return n34.forEach((t46)=>{
        const n35 = o3.get(t46.toString());
        b(!!n35), u2.push(n35);
    }), u2;
}
async function Xn(t45, n34) {
    const e14 = v(t45), r8 = kn(e14.S, ln(n34));
    return (await e14.v("RunQuery", r8.parent, {
        structuredQuery: r8.structuredQuery
    })).filter((t46)=>!!t46.document
    ).map((t46)=>(function(t47, n35, e15) {
            const r9 = xn(t47, n35.name), s6 = Fn(n35.updateTime), i3 = new kt({
                mapValue: {
                    fields: n35.fields
                }
            }), o3 = Mt.newFoundDocument(r9, s6, i3);
            return e15 && o3.setHasCommittedMutations(), e15 ? o3.setHasCommittedMutations() : o3;
        })(e14.S, t46.document, void 0)
    );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const te = new Map;
/**
 * An instance map that ensures only one Datastore exists per Firestore
 * instance.
 */ /**
 * Returns an initialized and started Datastore for the given Firestore
 * instance. Callers must invoke removeComponents() when the Firestore
 * instance is terminated.
 */ function ne(t45) {
    if (t45._terminated) throw new U(F, "The client has already been terminated.");
    if (!te.has(t45)) {
        m("ComponentProvider", "Initializing Datastore");
        const i3 = function(t46) {
            return new ft(t46, fetch.bind(null));
        }((n34 = t45._databaseId, e14 = t45.app.options.appId || "", r8 = t45._persistenceKey, s7 = t45._freezeSettings(), new G(n34, e14, r8, s7.host, s7.ssl, s7.experimentalForceLongPolling, s7.experimentalAutoDetectLongPolling, s7.useFetchStreams))), o3 = Hn(t45._databaseId), u2 = function(t46, n34, e14) {
            return new Kn(t46, n34, e14);
        }(t45._credentials, i3, o3);
        te.set(t45, u2);
    }
    var n34, e14, r8, s7;
    /**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ return te.get(t45);
}
/**
 * Removes all components associated with the provided instance. Must be called
 * when the `Firestore` instance is terminated.
 */ /**
 * A concrete type describing all the values that can be applied via a
 * user-supplied `FirestoreSettings` object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */ class ee {
    constructor(t45){
        var n34;
        if ((void 0) === t45.host) {
            if ((void 0) !== t45.ssl) throw new U(A, "Can't provide ssl option if host option is not set");
            this.host = "firestore.googleapis.com", this.ssl = true;
        } else this.host = t45.host, this.ssl = null === (n34 = t45.ssl) || (void 0) === n34 || n34;
        if (this.credentials = t45.credentials, this.ignoreUndefinedProperties = !!t45.ignoreUndefinedProperties, (void 0) === t45.cacheSizeBytes) this.cacheSizeBytes = 41943040;
        else {
            if (-1 !== t45.cacheSizeBytes && t45.cacheSizeBytes < 1048576) throw new U(A, "cacheSizeBytes must be at least 1048576");
            this.cacheSizeBytes = t45.cacheSizeBytes;
        }
        this.experimentalForceLongPolling = !!t45.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t45.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t45.useFetchStreams, (function(t46, n35, e14, r8) {
            if (!0 === n35 && !0 === r8) throw new U(A, `${t46} and ${e14} cannot be used together.`);
        })("experimentalForceLongPolling", t45.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t45.experimentalAutoDetectLongPolling);
    }
    isEqual(t) {
        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */ class re {
    /** @hideconstructor */ constructor(t46, n35){
        this._credentials = n35, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */ this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new ee({
        }), this._settingsFrozen = !1, t46 instanceof H ? this._databaseId = t46 : (this._app = t46, this._databaseId = (function(t47) {
            if (!Object.prototype.hasOwnProperty.apply(t47.options, [
                "projectId"
            ])) throw new U(A, '"projectId" not provided in firebase.initializeApp.');
            return new H(t47.options.projectId);
        })(t46));
    }
    /**
     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
     * instance.
     */ get app() {
        if (!this._app) throw new U(F, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
    }
    get _initialized() {
        return this._settingsFrozen;
    }
    get _terminated() {
        return (void 0) !== this._terminateTask;
    }
    _setSettings(t) {
        if (this._settingsFrozen) throw new U(F, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new ee(t), (void 0) !== t.credentials && (this._credentials = (function(t47) {
            if (!t47) return new M;
            switch(t47.type){
                case "gapi":
                    const n36 = t47.client;
                    // Make sure this really is a Gapi client.
                    return b(!("object" != typeof n36 || null === n36 || !n36.auth || !n36.auth.getAuthHeaderValueForFirstParty)), new W(n36, t47.sessionIndex || "0", t47.iamToken || null);
                case "provider":
                    return t47.client;
                default:
                    throw new U(A, "makeCredentialsProvider failed due to invalid credential type");
            }
        })(t.credentials));
    }
    _getSettings() {
        return this._settings;
    }
    _freezeSettings() {
        return this._settingsFrozen = !0, this._settings;
    }
    _delete() {
        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }
    /** Returns a JSON-serializable representation of this `Firestore` instance. */ toJSON() {
        return {
            app: this._app,
            databaseId: this._databaseId,
            settings: this._settings
        };
    }
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */ _terminate() {
        return (function(t47) {
            const n36 = te.get(t47);
            n36 && (m("ComponentProvider", "Removing Datastore"), te.delete(t47), n36.terminate());
        })(this), Promise.resolve();
    }
}
function se(n36, e14) {
    const r8 = _app._getProvider(n36, "firestore/lite");
    if (r8.isInitialized()) throw new U(F, "Firestore can only be initialized once per app.");
    return r8.initialize({
        options: e14
    });
}
/**
 * Returns the existing `Firestore` instance that is associated with the
 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
 * instance with default settings.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned `Firestore`
 * instance is associated with.
 * @returns The `Firestore` instance of the provided app.
 */ function ie(e14 = _app.getApp()) {
    return _app._getProvider(e14, "firestore/lite").getImmediate();
}
/**
 * Modify this instance to communicate with the Cloud Firestore emulator.
 *
 * Note: This must be called before this instance has been used to do any
 * operations.
 *
 * @param firestore - The `Firestore` instance to configure to connect to the
 * emulator.
 * @param host - the emulator host (ex: localhost).
 * @param port - the emulator port (ex: 9000).
 * @param options.mockUserToken - the mock auth token to use for unit testing
 * Security Rules.
 */ function oe(t47, n36, e14, r8 = {
}) {
    var s7;
    const i3 = (t47 = st(t47, re))._getSettings();
    if ("firestore.googleapis.com" !== i3.host && i3.host !== n36 && y("Host has been set in both settings() and useEmulator(), emulator host will be used"), t47._setSettings(Object.assign(Object.assign({
    }, i3), {
        host: `${n36}:${e14}`,
        ssl: !1
    })), r8.mockUserToken) {
        let n37, e15;
        if ("string" == typeof r8.mockUserToken) n37 = r8.mockUserToken, e15 = l.MOCK_USER;
        else {
            // Let createMockUserToken validate first (catches common mistakes like
            // invalid field "uid" and missing field "sub" / "user_id".)
            n37 = _util.createMockUserToken(r8.mockUserToken, null === (s7 = t47._app) || (void 0) === s7 ? void 0 : s7.options.projectId);
            const i4 = r8.mockUserToken.sub || r8.mockUserToken.user_id;
            if (!i4) throw new U(A, "mockUserToken must contain 'sub' or 'user_id' field!");
            e15 = new l(i4);
        }
        t47._credentials = new B(new k(n37, e15));
    }
}
/**
 * Terminates the provided `Firestore` instance.
 *
 * After calling `terminate()` only the `clearIndexedDbPersistence()` functions
 * may be used. Any other function will throw a `FirestoreError`. Termination
 * does not cancel any pending writes, and any promises that are awaiting a
 * response from the server will not be resolved.
 *
 * To restart after termination, create a new instance of `Firestore` with
 * {@link getFirestore}.
 *
 * Note: Under normal circumstances, calling `terminate()` is not required. This
 * function is useful only when you want to force this instance to release all of
 * its resources or in combination with {@link clearIndexedDbPersistence} to
 * ensure that all local state is destroyed between test runs.
 *
 * @param firestore - The `Firestore` instance to terminate.
 * @returns A `Promise` that is resolved when the instance has been successfully
 * terminated.
 */ function ue(t47) {
    return t47 = st(t47, re), _app._removeServiceInstance(t47.app, "firestore/lite"), t47._delete();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */ class ce {
    /** @hideconstructor */ constructor(t47, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ n36, e14){
        this.converter = n36, this._key = e14, /** The type of this Firestore reference. */ this.type = "document", this.firestore = t47;
    }
    get _path() {
        return this._key.path;
    }
    /**
     * The document's identifier within its collection.
     */ get id() {
        return this._key.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */ get path() {
        return this._key.path.canonicalString();
    }
    /**
     * The collection this `DocumentReference` belongs to.
     */ get parent() {
        return new he(this.firestore, this.converter, this._key.path.popLast());
    }
    withConverter(t) {
        return new ce(this.firestore, t, this._key);
    }
}
/**
 * A `Query` refers to a query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */ class ae {
    // This is the lite version of the Query class in the main SDK.
    /** @hideconstructor protected */ constructor(t48, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ n37, e15){
        this.converter = n37, this._query = e15, /** The type of this Firestore reference. */ this.type = "query", this.firestore = t48;
    }
    withConverter(t) {
        return new ae(this.firestore, t, this._query);
    }
}
/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query}).
 */ class he extends ae {
    /** @hideconstructor */ constructor(t49, n38, e16){
        super(t49, n38, new sn(e16)), this._path = e16, /** The type of this Firestore reference. */ this.type = "collection";
    }
    /** The collection's identifier. */ get id() {
        return this._query.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */ get path() {
        return this._query.path.canonicalString();
    }
    /**
     * A reference to the containing `DocumentReference` if this is a
     * subcollection. If this isn't a subcollection, the reference is null.
     */ get parent() {
        const t50 = this._path.popLast();
        return t50.isEmpty() ? null : new ce(this.firestore, /* converter= */ null, new X(t50));
    }
    withConverter(t) {
        return new he(this.firestore, t, this._path);
    }
}
function le(t50, n39, ...e17) {
    if (t50 = _util.getModularInstance(t50), tt("collection", "path", n39), t50 instanceof re) {
        const r8 = K.fromString(n39, ...e17);
        return et(r8), new he(t50, /* converter= */ null, r8);
    }
    {
        if (!(t50 instanceof ce || t50 instanceof he)) throw new U(A, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const r8 = K.fromString(t50.path, ...e17).child(K.fromString(n39));
        return et(r8), new he(t50.firestore, /* converter= */ null, r8);
    }
}
// TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root `Firestore` instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */ function fe(t50, n39) {
    if (t50 = st(t50, re), tt("collectionGroup", "collection id", n39), n39.indexOf("/") >= 0) throw new U(A, `Invalid collection ID '${n39}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
    return new ae(t50, /* converter= */ null, /**
 * Creates a new Query for a collection group query that matches all documents
 * within the provided collection group.
 */ function(t51) {
        return new sn(K.emptyPath(), t51);
    }(n39));
}
function de(t50, n39, ...e17) {
    if (t50 = _util.getModularInstance(t50), // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.
    1 === arguments.length && (n39 = wt.A()), tt("doc", "path", n39), t50 instanceof re) {
        const r8 = K.fromString(n39, ...e17);
        return nt(r8), new ce(t50, /* converter= */ null, new X(r8));
    }
    {
        if (!(t50 instanceof ce || t50 instanceof he)) throw new U(A, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const r8 = t50._path.child(K.fromString(n39, ...e17));
        return nt(r8), new ce(t50.firestore, t50 instanceof he ? t50.converter : null, new X(r8));
    }
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function we(t50, n39) {
    return t50 = _util.getModularInstance(t50), n39 = _util.getModularInstance(n39), (t50 instanceof ce || t50 instanceof he) && (n39 instanceof ce || n39 instanceof he) && t50.firestore === n39.firestore && t50.path === n39.path && t50.converter === n39.converter;
}
/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left - A `Query` to compare.
 * @param right - A `Query` to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function me(t50, n39) {
    return t50 = _util.getModularInstance(t50), n39 = _util.getModularInstance(n39), t50 instanceof ae && n39 instanceof ae && t50.firestore === n39.firestore && fn(t50._query, n39._query) && t50.converter === n39.converter;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */ class pe {
    /**
     * Creates a `FieldPath` from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames - A list of field names.
     */ constructor(...t50){
        for(let n39 = 0; n39 < t50.length; ++n39)if (0 === t50[n39].length) throw new U(A, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new Z(t50);
    }
    /**
     * Returns true if this `FieldPath` is equal to the provided one.
     *
     * @param other - The `FieldPath` to compare against.
     * @returns true if this `FieldPath` is equal to the provided one.
     */ isEqual(t) {
        return this._internalPath.isEqual(t._internalPath);
    }
}
/**
 * Returns a special sentinel `FieldPath` to refer to the ID of a document.
 * It can be used in queries to sort or filter by the document ID.
 */ function ye() {
    return new pe("__name__");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing an array of bytes.
 */ class _e {
    /** @hideconstructor */ constructor(t51){
        this._byteString = t51;
    }
    /**
     * Creates a new `Bytes` object from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64 - The Base64 string used to create the `Bytes` object.
     */ static fromBase64String(t) {
        try {
            return new _e(Et.fromBase64String(t));
        } catch (t52) {
            throw new U(A, "Failed to construct data from Base64 string: " + t52);
        }
    }
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */ static fromUint8Array(t) {
        return new _e(Et.fromUint8Array(t));
    }
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */ toBase64() {
        return this._byteString.toBase64();
    }
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */ toUint8Array() {
        return this._byteString.toUint8Array();
    }
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */ toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
    }
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */ isEqual(t) {
        return this._byteString.isEqual(t._byteString);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */ class ge {
    /**
     * @param _methodName - The public API endpoint that returns this class.
     * @hideconstructor
     */ constructor(t52){
        this._methodName = t52;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */ class be {
    /**
     * Creates a new immutable `GeoPoint` object with the provided latitude and
     * longitude values.
     * @param latitude - The latitude as number between -90 and 90.
     * @param longitude - The longitude as number between -180 and 180.
     */ constructor(t53, n40){
        if (!isFinite(t53) || t53 < -90 || t53 > 90) throw new U(A, "Latitude must be a number between -90 and 90, but was: " + t53);
        if (!isFinite(n40) || n40 < -180 || n40 > 180) throw new U(A, "Longitude must be a number between -180 and 180, but was: " + n40);
        this._lat = t53, this._long = n40;
    }
    /**
     * The latitude of this `GeoPoint` instance.
     */ get latitude() {
        return this._lat;
    }
    /**
     * The longitude of this `GeoPoint` instance.
     */ get longitude() {
        return this._long;
    }
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */ isEqual(t) {
        return this._lat === t._lat && this._long === t._long;
    }
    /** Returns a JSON-serializable representation of this GeoPoint. */ toJSON() {
        return {
            latitude: this._lat,
            longitude: this._long
        };
    }
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */ _compareTo(t) {
        return mt(this._lat, t._lat) || mt(this._long, t._long);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ve = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */ class Ee {
    constructor(t54, n41, e17){
        this.data = t54, this.fieldMask = n41, this.fieldTransforms = e17;
    }
    toMutation(t, n) {
        return null !== this.fieldMask ? new In(t, this.data, this.fieldMask, n, this.fieldTransforms) : new En(t, this.data, n, this.fieldTransforms);
    }
}
/** The result of parsing "update" data (i.e. for an updateData call). */ class Ie {
    constructor(t55, // The fieldMask does not include document transforms.
    n42, e18){
        this.data = t55, this.fieldMask = n42, this.fieldTransforms = e18;
    }
    toMutation(t, n) {
        return new In(t, this.data, this.fieldMask, n, this.fieldTransforms);
    }
}
function Te(t56) {
    switch(t56){
        case 0 /* Set */ :
        // fall through
        case 2 /* MergeSet */ :
        // fall through
        case 1 /* Update */ :
            return !0;
        case 3 /* Argument */ :
        case 4 /* ArrayArgument */ :
            return !1;
        default:
            throw g();
    }
}
/** A "context" object passed around while parsing user data. */ class Ae {
    /**
     * Initializes a ParseContext with the given source and path.
     *
     * @param settings - The settings for the parser.
     * @param databaseId - The database ID of the Firestore instance.
     * @param serializer - The serializer to use to generate the Value proto.
     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
     * rather than throw.
     * @param fieldTransforms - A mutable list of field transforms encountered
     * while parsing the data.
     * @param fieldMask - A mutable list of field paths encountered while parsing
     * the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */ constructor(t56, n43, e19, r8, s7, i3){
        this.settings = t56, this.databaseId = n43, this.S = e19, this.ignoreUndefinedProperties = r8, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        (void 0) === s7 && this.Z(), this.fieldTransforms = s7 || [], this.fieldMask = i3 || [];
    }
    get path() {
        return this.settings.path;
    }
    get X() {
        return this.settings.X;
    }
    /** Returns a new context with the specified settings overwritten. */ tt(t) {
        return new Ae(Object.assign(Object.assign({
        }, this.settings), t), this.databaseId, this.S, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }
    nt(t) {
        var n44;
        const e20 = null === (n44 = this.path) || (void 0) === n44 ? void 0 : n44.child(t), r9 = this.tt({
            path: e20,
            et: !1
        });
        return r9.rt(t), r9;
    }
    st(t) {
        var n45;
        const e20 = null === (n45 = this.path) || (void 0) === n45 ? void 0 : n45.child(t), r9 = this.tt({
            path: e20,
            et: !1
        });
        return r9.Z(), r9;
    }
    it(t) {
        // TODO(b/34871131): We don't support array paths right now; so make path
        // undefined.
        return this.tt({
            path: void 0,
            et: !0
        });
    }
    ot(t) {
        return ze(t, this.settings.methodName, this.settings.ut || !1, this.path, this.settings.ct);
    }
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ contains(t) {
        return (void 0) !== this.fieldMask.find((n46)=>t.isPrefixOf(n46)
        ) || (void 0) !== this.fieldTransforms.find((n46)=>t.isPrefixOf(n46.field)
        );
    }
    Z() {
        // TODO(b/34871131): Remove null check once we have proper paths for fields
        // within arrays.
        if (this.path) for(let t57 = 0; t57 < this.path.length; t57++)this.rt(this.path.get(t57));
    }
    rt(t) {
        if (0 === t.length) throw this.ot("Document fields must not be empty");
        if (Te(this.X) && ve.test(t)) throw this.ot('Document fields cannot begin and end with "__"');
    }
}
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */ class Pe {
    constructor(t57, n46, e20){
        this.databaseId = t57, this.ignoreUndefinedProperties = n46, this.S = e20 || Hn(t57);
    }
    /** Creates a new top-level parse context. */ at(t, n, e, r = !1) {
        return new Ae({
            X: t,
            methodName: n,
            ct: e,
            path: Z.emptyPath(),
            et: !1,
            ut: r
        }, this.databaseId, this.S, this.ignoreUndefinedProperties);
    }
}
function Re(t58) {
    const n47 = t58._freezeSettings(), e21 = Hn(t58._databaseId);
    return new Pe(t58._databaseId, !!n47.ignoreUndefinedProperties, e21);
}
/** Parse document data from a set() call. */ function Ve(t58, n47, e21, r9, s8, i4 = {
}) {
    const o3 = t58.at(i4.merge || i4.mergeFields ? 2 /* MergeSet */  : 0 /* Set */ , n47, e21, s8);
    ke("Data must be an object, but it was:", o3, r9);
    const u2 = Ue(r9, o3);
    let c, a;
    if (i4.merge) c = new vt(o3.fieldMask), a = o3.fieldTransforms;
    else if (i4.mergeFields) {
        const t59 = [];
        for (const r10 of i4.mergeFields){
            const s9 = Me(n47, r10, e21);
            if (!o3.contains(s9)) throw new U(A, `Field '${s9}' is specified in your field mask but missing from your input data.`);
            We(t59, s9) || t59.push(s9);
        }
        c = new vt(t59), a = o3.fieldTransforms.filter((t60)=>c.covers(t60.field)
        );
    } else c = null, a = o3.fieldTransforms;
    return new Ee(new kt(u2), c, a);
}
class Ne extends ge {
    _toFieldTransform(t) {
        if (2 /* MergeSet */  !== t.X) throw 1 /* Update */  === t.X ? t.ot(`${this._methodName}() can only appear at the top level of your update data`) : t.ot(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
        return t.fieldMask.push(t.path), null;
    }
    isEqual(t) {
        return t instanceof Ne;
    }
}
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */ function De(t58, n47, e21) {
    return new Ae({
        X: 3 /* Argument */ ,
        ct: n47.settings.ct,
        methodName: t58._methodName,
        et: e21
    }, n47.databaseId, n47.S, n47.ignoreUndefinedProperties);
}
class $e extends ge {
    _toFieldTransform(t) {
        return new gn(t.path, new mn);
    }
    isEqual(t) {
        return t instanceof $e;
    }
}
class Fe extends ge {
    constructor(t58, n47){
        super(t58), this.ht = n47;
    }
    _toFieldTransform(t) {
        const n48 = De(this, t, /*array=*/ !0), e21 = this.ht.map((t59)=>Le(t59, n48)
        ), r9 = new pn(e21);
        return new gn(t.path, r9);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
class Se extends ge {
    constructor(t59, n48){
        super(t59), this.ht = n48;
    }
    _toFieldTransform(t) {
        const n49 = De(this, t, /*array=*/ !0), e21 = this.ht.map((t60)=>Le(t60, n49)
        ), r9 = new yn(e21);
        return new gn(t.path, r9);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
class qe extends ge {
    constructor(t60, n49){
        super(t60), this.lt = n49;
    }
    _toFieldTransform(t) {
        const n50 = new _n(t.S, dn(t.S, this.lt));
        return new gn(t.path, n50);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
/** Parse update data from an update() call. */ function xe(t61, n50, e21, r9) {
    const s8 = t61.at(1 /* Update */ , n50, e21);
    ke("Data must be an object, but it was:", s8, r9);
    const i4 = [], o3 = kt.empty();
    bt(r9, (t62, r10)=>{
        const u2 = Qe(n50, t62, e21);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        r10 = _util.getModularInstance(r10);
        const c = s8.st(u2);
        if (r10 instanceof Ne) // Add it to the field mask, but don't add anything to updateData.
        i4.push(u2);
        else {
            const t63 = Le(r10, c);
            null != t63 && (i4.push(u2), o3.set(u2, t63));
        }
    });
    const u2 = new vt(i4);
    return new Ie(o3, u2, s8.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */ function Oe(t61, n50, e21, r9, s8, i4) {
    const o3 = t61.at(1 /* Update */ , n50, e21), u2 = [
        Me(n50, r9, e21)
    ], c = [
        s8
    ];
    if (i4.length % 2 != 0) throw new U(A, `Function ${n50}() needs to be called with an even number of arguments that alternate between field names and values.`);
    for(let t62 = 0; t62 < i4.length; t62 += 2)u2.push(Me(n50, i4[t62])), c.push(i4[t62 + 1]);
    const a = [], l1 = kt.empty();
    // We iterate in reverse order to pick the last value for a field if the
    // user specified the field multiple times.
    for(let t63 = u2.length - 1; t63 >= 0; --t63)if (!We(a, u2[t63])) {
        const n51 = u2[t63];
        let e22 = c[t63];
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        e22 = _util.getModularInstance(e22);
        const r10 = o3.st(n51);
        if (e22 instanceof Ne) // Add it to the field mask, but don't add anything to updateData.
        a.push(n51);
        else {
            const t64 = Le(e22, r10);
            null != t64 && (a.push(n51), l1.set(n51, t64));
        }
    }
    const f1 = new vt(a);
    return new Ie(l1, f1, o3.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */ function Ce(t61, n50, e21, r9 = !1) {
    return Le(e21, t61.at(r9 ? 4 /* ArrayArgument */  : 3 /* Argument */ , n50));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */ function Le(t61, n50) {
    if (je(// Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t61 = _util.getModularInstance(t61))) return ke("Unsupported field value:", n50, t61), Ue(t61, n50);
    if (t61 instanceof ge) // FieldValues usually parse into transforms (except FieldValue.delete())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.
    /**
 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
 * context.fieldTransforms.
 */ return (function(t62, n51) {
        // Sentinels are only supported with writes, and not within arrays.
        if (!Te(n51.X)) throw n51.ot(`${t62._methodName}() can only be used with update() and set()`);
        if (!n51.path) throw n51.ot(`${t62._methodName}() is not currently supported inside arrays`);
        const e21 = t62._toFieldTransform(n51);
        e21 && n51.fieldTransforms.push(e21);
    })(t61, n50), null;
    if ((void 0) === t61 && n50.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;
    if (// If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    n50.path && n50.fieldMask.push(n50.path), t61 instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        // In the case of IN queries, the parsed data is an array (representing
        // the set of values to be included for the IN query) that may directly
        // contain additional arrays (each representing an individual field
        // value), so we disable this validation.
        if (n50.settings.et && 4 /* ArrayArgument */  !== n50.X) throw n50.ot("Nested arrays are not supported");
        return (function(t62, n51) {
            const e21 = [];
            let r9 = 0;
            for (const s8 of t62){
                let t63 = Le(s8, n51.it(r9));
                null == t63 && // Just include nulls in the array for fields being replaced with a
                // sentinel.
                (t63 = {
                    nullValue: "NULL_VALUE"
                }), e21.push(t63), r9++;
            }
            return {
                arrayValue: {
                    values: e21
                }
            };
        })(t61, n50);
    }
    return (function(t62, n51) {
        if (null === (t62 = _util.getModularInstance(t62))) return {
            nullValue: "NULL_VALUE"
        };
        if ("number" == typeof t62) return dn(n51.S, t62);
        if ("boolean" == typeof t62) return {
            booleanValue: t62
        };
        if ("string" == typeof t62) return {
            stringValue: t62
        };
        if (t62 instanceof Date) {
            const e21 = yt.fromDate(t62);
            return {
                timestampValue: Nn(n51.S, e21)
            };
        }
        if (t62 instanceof yt) {
            // Firestore backend truncates precision down to microseconds. To ensure
            // offline mode works the same with regards to truncation, perform the
            // truncation immediately without waiting for the backend to do that.
            const e21 = new yt(t62.seconds, 1000 * Math.floor(t62.nanoseconds / 1000));
            return {
                timestampValue: Nn(n51.S, e21)
            };
        }
        if (t62 instanceof be) return {
            geoPointValue: {
                latitude: t62.latitude,
                longitude: t62.longitude
            }
        };
        if (t62 instanceof _e) return {
            bytesValue: Dn(n51.S, t62._byteString)
        };
        if (t62 instanceof ce) {
            const e21 = n51.databaseId, r9 = t62.firestore._databaseId;
            if (!r9.isEqual(e21)) throw n51.ot(`Document reference is for database ${r9.projectId}/${r9.database} but should be for database ${e21.projectId}/${e21.database}`);
            return {
                referenceValue: Sn(t62.firestore._databaseId || n51.databaseId, t62._key.path)
            };
        }
        throw n51.ot(`Unsupported field value: ${rt(t62)}`);
    })(t61, n50);
}
function Ue(t61, n50) {
    const e21 = {
    };
    return !function(t62) {
        for(const n51 in t62)if (Object.prototype.hasOwnProperty.call(t62, n51)) return !1;
        return !0;
    }(t61) ? bt(t61, (t62, r9)=>{
        const s8 = Le(r9, n50.nt(t62));
        null != s8 && (e21[t62] = s8);
    }) : // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    n50.path && n50.path.length > 0 && n50.fieldMask.push(n50.path), {
        mapValue: {
            fields: e21
        }
    };
}
function je(t61) {
    return !("object" != typeof t61 || null === t61 || t61 instanceof Array || t61 instanceof Date || t61 instanceof yt || t61 instanceof be || t61 instanceof _e || t61 instanceof ce || t61 instanceof ge);
}
function ke(t61, n50, e21) {
    if (!je(e21) || !function(t62) {
        return "object" == typeof t62 && null !== t62 && (Object.getPrototypeOf(t62) === Object.prototype || null === Object.getPrototypeOf(t62));
    }(e21)) {
        const r9 = rt(e21);
        throw "an object" === r9 ? n50.ot(t61 + " a custom object") : n50.ot(t61 + " " + r9);
    }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function Me(t61, n50, e21) {
    if (// If required, replace the FieldPath Compat class with with the firestore-exp
    // FieldPath.
    (n50 = _util.getModularInstance(n50)) instanceof pe) return n50._internalPath;
    if ("string" == typeof n50) return Qe(t61, n50);
    throw ze("Field path arguments must be of type string or FieldPath.", t61, /* hasConverter= */ !1, /* path= */ void 0, e21);
}
/**
 * Matches any characters in a field path string that are reserved.
 */ const Be = new RegExp("[~\\*/\\[\\]]");
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */ function Qe(t61, n50, e21) {
    if (n50.search(Be) >= 0) throw ze(`Invalid field path (${n50}). Paths must not contain '~', '*', '/', '[', or ']'`, t61, /* hasConverter= */ !1, /* path= */ void 0, e21);
    try {
        return new pe(...n50.split("."))._internalPath;
    } catch (r9) {
        throw ze(`Invalid field path (${n50}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t61, /* hasConverter= */ !1, /* path= */ void 0, e21);
    }
}
function ze(t61, n50, e21, r9, s8) {
    const i4 = r9 && !r9.isEmpty(), o3 = (void 0) !== s8;
    let u2 = `Function ${n50}() called with invalid data`;
    e21 && (u2 += " (via `toFirestore()`)"), u2 += ". ";
    let c = "";
    return (i4 || o3) && (c += " (found", i4 && (c += ` in field ${r9}`), o3 && (c += ` in document ${s8}`), c += ")"), new U(A, u2 + t61 + c);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function We(t61, n50) {
    return t61.some((t62)=>t62.isEqual(n50)
    );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ class Ge {
    // Note: This class is stripped down version of the DocumentSnapshot in
    // the legacy SDK. The changes are:
    // - No support for SnapshotMetadata.
    // - No support for SnapshotOptions.
    /** @hideconstructor protected */ constructor(t61, n50, e21, r9, s8){
        this._firestore = t61, this._userDataWriter = n50, this._key = e21, this._document = r9, this._converter = s8;
    }
    /** Property of the `DocumentSnapshot` that provides the document's ID. */ get id() {
        return this._key.path.lastSegment();
    }
    /**
     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
     */ get ref() {
        return new ce(this._firestore, this._converter, this._key);
    }
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */ exists() {
        return null !== this._document;
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */ data() {
        if (this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                const t62 = new He(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */ null);
                return this._converter.fromFirestore(t62);
            }
            return this._userDataWriter.convertValue(this._document.data.value);
        }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(t) {
        if (this._document) {
            const n51 = this._document.data.field(Je("DocumentSnapshot.get", t));
            if (null !== n51) return this._userDataWriter.convertValue(n51);
        }
    }
}
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ class He extends Ge {
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */ data() {
        return super.data();
    }
}
/**
 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
 * representing the results of a query. The documents can be accessed as an
 * array via the `docs` property or enumerated using the `forEach` method. The
 * number of documents can be determined via the `empty` and `size`
 * properties.
 */ class Ye {
    /** @hideconstructor */ constructor(t62, n51){
        this._docs = n51, this.query = t62;
    }
    /** An array of all the documents in the `QuerySnapshot`. */ get docs() {
        return [
            ...this._docs
        ];
    }
    /** The number of documents in the `QuerySnapshot`. */ get size() {
        return this.docs.length;
    }
    /** True if there are no documents in the `QuerySnapshot`. */ get empty() {
        return 0 === this.docs.length;
    }
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */ forEach(t, n) {
        this._docs.forEach(t, n);
    }
}
/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */ function Ke(t63, n52) {
    return t63 = _util.getModularInstance(t63), n52 = _util.getModularInstance(n52), t63 instanceof Ge && n52 instanceof Ge ? t63._firestore === n52._firestore && t63._key.isEqual(n52._key) && (null === t63._document ? null === n52._document : t63._document.isEqual(n52._document)) && t63._converter === n52._converter : t63 instanceof Ye && n52 instanceof Ye && me(t63.query, n52.query) && pt(t63.docs, n52.docs, Ke);
}
/**
 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
 */ function Je(t63, n52) {
    return "string" == typeof n52 ? Qe(t63, n52) : n52 instanceof pe ? n52._internalPath : n52._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */ class Ze {
}
/**
 * Creates a new immutable instance of {@link Query} that is extended to also include
 * additional query constraints.
 *
 * @param query - The {@link Query} instance to use as a base for the new constraints.
 * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */ function Xe(t63, ...n52) {
    for (const e22 of n52)t63 = e22._apply(t63);
    return t63;
}
class tr extends Ze {
    constructor(t63, n52, e22){
        super(), this.ft = t63, this.dt = n52, this.wt = e22, this.type = "where";
    }
    _apply(t) {
        const n53 = Re(t.firestore), e23 = function(t64, n54, e24, r10, s9, i4, o3) {
            let u2;
            if (s9.isKeyField()) {
                if ("array-contains" /* ARRAY_CONTAINS */  === i4 || "array-contains-any" /* ARRAY_CONTAINS_ANY */  === i4) throw new U(A, `Invalid Query. You can't perform '${i4}' queries on FieldPath.documentId().`);
                if ("in" /* IN */  === i4 || "not-in" /* NOT_IN */  === i4) {
                    mr(o3, i4);
                    const n55 = [];
                    for (const e25 of o3)n55.push(wr(r10, t64, e25));
                    u2 = {
                        arrayValue: {
                            values: n55
                        }
                    };
                } else u2 = wr(r10, t64, o3);
            } else "in" /* IN */  !== i4 && "not-in" /* NOT_IN */  !== i4 && "array-contains-any" /* ARRAY_CONTAINS_ANY */  !== i4 || mr(o3, i4), u2 = Ce(e24, n54, o3, /* allowArrays= */ "in" /* IN */  === i4 || "not-in" /* NOT_IN */  === i4);
            const c = zt.create(s9, i4, u2);
            return (function(t65, n55) {
                if (n55.N()) {
                    const e25 = cn(t65);
                    if (null !== e25 && !e25.isEqual(n55.field)) throw new U(A, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${e25.toString()}' and '${n55.field.toString()}'`);
                    const r11 = un(t65);
                    null !== r11 && pr(t65, n55.field, r11);
                }
                const e25 = function(t66, n56) {
                    for (const e26 of t66.filters)if (n56.indexOf(e26.op) >= 0) return e26.op;
                    return null;
                }(t65, /**
 * Given an operator, returns the set of operators that cannot be used with it.
 *
 * Operators in a query must adhere to the following set of rules:
 * 1. Only one array operator is allowed.
 * 2. Only one disjunctive operator is allowed.
 * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
 * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
 *
 * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
 * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
 */ function(t66) {
                    switch(t66){
                        case "!=" /* NOT_EQUAL */ :
                            return [
                                "!=" /* NOT_EQUAL */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "array-contains" /* ARRAY_CONTAINS */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "in" /* IN */ :
                            return [
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "not-in" /* NOT_IN */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ ,
                                "!=" /* NOT_EQUAL */ 
                            ];
                        default:
                            return [];
                    }
                }(n55.op));
                if (null !== e25) // Special case when it's a duplicate op to give a slightly clearer error message.
                throw e25 === n55.op ? new U(A, `Invalid query. You cannot use more than one '${n55.op.toString()}' filter.`) : new U(A, `Invalid query. You cannot use '${n55.op.toString()}' filters with '${e25.toString()}' filters.`);
            })(t64, c), c;
        }(t._query, "where", n53, t.firestore._databaseId, this.ft, this.dt, this.wt);
        return new ae(t.firestore, t.converter, function(t64, n54) {
            const e24 = t64.filters.concat([
                n54
            ]);
            return new sn(t64.path, t64.collectionGroup, t64.explicitOrderBy.slice(), e24, t64.limit, t64.limitType, t64.startAt, t64.endAt);
        }(t._query, e23));
    }
}
/**
 * Creates a {@link QueryConstraint} that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created {@link Query}.
 */ function nr(t64, n53, e23) {
    const r10 = n53, s9 = Je("where", t64);
    return new tr(s9, r10, e23);
}
class er extends Ze {
    constructor(t64, n53){
        super(), this.ft = t64, this.yt = n53, this.type = "orderBy";
    }
    _apply(t) {
        const n54 = function(t65, n55, e23) {
            if (null !== t65.startAt) throw new U(A, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
            if (null !== t65.endAt) throw new U(A, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
            const r10 = new nn(n55, e23);
            return (function(t66, n56) {
                if (null === un(t66)) {
                    // This is the first order by. It must match any inequality.
                    const e24 = cn(t66);
                    null !== e24 && pr(t66, e24, n56.field);
                }
            })(t65, r10), r10;
        }(t._query, this.ft, this.yt);
        return new ae(t.firestore, t.converter, function(t65, n55) {
            // TODO(dimond): validate that orderBy does not list the same key twice.
            const e23 = t65.explicitOrderBy.concat([
                n55
            ]);
            return new sn(t65.path, t65.collectionGroup, e23, t65.filters.slice(), t65.limit, t65.limitType, t65.startAt, t65.endAt);
        }(t._query, n54));
    }
}
/**
 * Creates a {@link QueryConstraint} that sorts the query result by the
 * specified field, optionally in descending order instead of ascending.
 *
 * @param fieldPath - The field to sort by.
 * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
 * not specified, order will be ascending.
 * @returns The created {@link Query}.
 */ function rr(t65, n54 = "asc") {
    const e23 = n54, r10 = Je("orderBy", t65);
    return new er(r10, e23);
}
class sr extends Ze {
    constructor(t65, n54, e23){
        super(), this.type = t65, this._t = n54, this.gt = e23;
    }
    _apply(t) {
        return new ae(t.firestore, t.converter, function(t66, n55, e24) {
            return new sn(t66.path, t66.collectionGroup, t66.explicitOrderBy.slice(), t66.filters.slice(), n55, e24, t66.startAt, t66.endAt);
        }(t._query, this._t, this.gt));
    }
}
/**
 * Creates a {@link QueryConstraint} that only returns the first matching documents.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */ function ir(t66) {
    return it("limit", t66), new sr("limit", t66, "F" /* First */ );
}
/**
 * Creates a {@link QueryConstraint} that only returns the last matching documents.
 *
 * You must specify at least one `orderBy` clause for `limitToLast` queries,
 * otherwise an exception will be thrown during execution.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */ function or(t66) {
    return it("limitToLast", t66), new sr("limitToLast", t66, "L" /* Last */ );
}
class ur extends Ze {
    constructor(t66, n55, e24){
        super(), this.type = t66, this.bt = n55, this.vt = e24;
    }
    _apply(t) {
        const n56 = dr(t, this.type, this.bt, this.vt);
        return new ae(t.firestore, t.converter, function(t67, n57) {
            return new sn(t67.path, t67.collectionGroup, t67.explicitOrderBy.slice(), t67.filters.slice(), t67.limit, t67.limitType, n57, t67.endAt);
        }(t._query, n56));
    }
}
function cr(...t67) {
    return new ur("startAt", t67, /*before=*/ !0);
}
function ar(...t67) {
    return new ur("startAfter", t67, /*before=*/ !1);
}
class hr extends Ze {
    constructor(t67, n56, e25){
        super(), this.type = t67, this.bt = n56, this.vt = e25;
    }
    _apply(t) {
        const n57 = dr(t, this.type, this.bt, this.vt);
        return new ae(t.firestore, t.converter, function(t68, n58) {
            return new sn(t68.path, t68.collectionGroup, t68.explicitOrderBy.slice(), t68.filters.slice(), t68.limit, t68.limitType, t68.startAt, n58);
        }(t._query, n57));
    }
}
function lr(...t68) {
    return new hr("endBefore", t68, /*before=*/ !0);
}
function fr(...t68) {
    return new hr("endAt", t68, /*before=*/ !1);
}
/** Helper function to create a bound from a document or fields */ function dr(t68, n57, e26, r10) {
    if (e26[0] = _util.getModularInstance(e26[0]), e26[0] instanceof Ge) return (function(t69, n58, e27, r11, s9) {
        if (!r11) throw new U(R, `Can't use a DocumentSnapshot that doesn't exist for ${e27}().`);
        const i4 = [];
        // Because people expect to continue/end a query at the exact document
        // provided, we need to use the implicit sort order rather than the explicit
        // sort order, because it's guaranteed to contain the document key. That way
        // the position becomes unambiguous and the query continues/ends exactly at
        // the provided document. Without the key (by using the explicit sort
        // orders), multiple documents could match the position, yielding duplicate
        // results.
        for (const e28 of hn(t69))if (e28.field.isKeyField()) i4.push(xt(n58, r11.key));
        else {
            const t70 = r11.data.field(e28.field);
            if (Rt(t70)) throw new U(A, 'Invalid query. You are trying to start or end a query using a document for which the field "' + e28.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
            if (null === t70) {
                const t71 = e28.field.canonicalString();
                throw new U(A, `Invalid query. You are trying to start or end a query using a document for which the field '${t71}' (used as the orderBy) does not exist.`);
            }
            i4.push(t70);
        }
        return new tn(i4, s9);
    })(t68._query, t68.firestore._databaseId, n57, e26[0]._document, r10);
    {
        const s9 = Re(t68.firestore);
        return (function(t69, n58, e27, r11, s10, i4) {
            // Use explicit order by's because it has to match the query the user made
            const o3 = t69.explicitOrderBy;
            if (s10.length > o3.length) throw new U(A, `Too many arguments provided to ${r11}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
            const u2 = [];
            for(let i5 = 0; i5 < s10.length; i5++){
                const c = s10[i5];
                if (o3[i5].field.isKeyField()) {
                    if ("string" != typeof c) throw new U(A, `Invalid query. Expected a string for document ID in ${r11}(), but got a ${typeof c}`);
                    if (!an(t69) && -1 !== c.indexOf("/")) throw new U(A, `Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ${r11}() must be a plain document ID, but '${c}' contains a slash.`);
                    const e28 = t69.path.child(K.fromString(c));
                    if (!X.isDocumentKey(e28)) throw new U(A, `Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ${r11}() must result in a valid document path, but '${e28}' is not because it contains an odd number of segments.`);
                    const s11 = new X(e28);
                    u2.push(xt(n58, s11));
                } else {
                    const t70 = Ce(e27, r11, c);
                    u2.push(t70);
                }
            }
            return new tn(u2, i4);
        })(t68._query, t68.firestore._databaseId, s9, n57, e26, r10);
    }
}
function wr(t68, n57, e26) {
    if ("string" == typeof (e26 = _util.getModularInstance(e26))) {
        if ("" === e26) throw new U(A, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!an(n57) && -1 !== e26.indexOf("/")) throw new U(A, `Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${e26}' contains a '/' character.`);
        const r10 = n57.path.child(K.fromString(e26));
        if (!X.isDocumentKey(r10)) throw new U(A, `Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${r10}' is not because it has an odd number of segments (${r10.length}).`);
        return xt(t68, new X(r10));
    }
    if (e26 instanceof ce) return xt(t68, e26._key);
    throw new U(A, `Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: ${rt(e26)}.`);
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */ function mr(t68, n57) {
    if (!Array.isArray(t68) || 0 === t68.length) throw new U(A, `Invalid Query. A non-empty array is required for '${n57.toString()}' filters.`);
    if (t68.length > 10) throw new U(A, `Invalid Query. '${n57.toString()}' filters support a maximum of 10 elements in the value array.`);
}
function pr(t68, n57, e26) {
    if (!e26.isEqual(n57)) throw new U(A, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${n57.toString()}' and so you must also use '${n57.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${e26.toString()}' instead.`);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts custom model object of type T into `DocumentData` by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to `DocumentData`
 * because we want to provide the user with a more specific error message if
 * their `set()` or fails due to invalid data originating from a `toFirestore()`
 * call.
 */ function yr(t68, n57, e26) {
    let r10;
    // Cast to `any` in order to satisfy the union type constraint on
    // toFirestore().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return r10 = t68 ? e26 && (e26.merge || e26.mergeFields) ? t68.toFirestore(n57, e26) : t68.toFirestore(n57) : n57, r10;
}
class _r extends class {
    convertValue(t, n = "none") {
        switch(Dt(t)){
            case 0 /* NullValue */ :
                return null;
            case 1 /* BooleanValue */ :
                return t.booleanValue;
            case 2 /* NumberValue */ :
                return At(t.integerValue || t.doubleValue);
            case 3 /* TimestampValue */ :
                return this.convertTimestamp(t.timestampValue);
            case 4 /* ServerTimestampValue */ :
                return this.convertServerTimestamp(t, n);
            case 5 /* StringValue */ :
                return t.stringValue;
            case 6 /* BlobValue */ :
                return this.convertBytes(Pt(t.bytesValue));
            case 7 /* RefValue */ :
                return this.convertReference(t.referenceValue);
            case 8 /* GeoPointValue */ :
                return this.convertGeoPoint(t.geoPointValue);
            case 9 /* ArrayValue */ :
                return this.convertArray(t.arrayValue, n);
            case 10 /* ObjectValue */ :
                return this.convertObject(t.mapValue, n);
            default:
                throw g();
        }
    }
    convertObject(t, n) {
        const e26 = {
        };
        return bt(t.fields, (t68, r10)=>{
            e26[t68] = this.convertValue(r10, n);
        }), e26;
    }
    convertGeoPoint(t) {
        return new be(At(t.latitude), At(t.longitude));
    }
    convertArray(t, n) {
        return (t.values || []).map((t68)=>this.convertValue(t68, n)
        );
    }
    convertServerTimestamp(t, n) {
        switch(n){
            case "previous":
                const e26 = Vt(t);
                return null == e26 ? null : this.convertValue(e26, n);
            case "estimate":
                return this.convertTimestamp(Nt(t));
            default:
                return null;
        }
    }
    convertTimestamp(t) {
        const n57 = Tt(t);
        return new yt(n57.seconds, n57.nanos);
    }
    convertDocumentKey(t, n) {
        const e26 = K.fromString(t);
        b(Gn(e26));
        const r10 = new H(e26.get(1), e26.get(3)), s9 = new X(e26.popFirst(5));
        return r10.isEqual(n) || // TODO(b/64130202): Somehow support foreign references.
        p(`Document ${s9} contains a document reference within a different database (${r10.projectId}/${r10.database}) which is not supported. It will be treated as a reference in the current database (${n.projectId}/${n.database}) instead.`), s9;
    }
} {
    constructor(t68){
        super(), this.firestore = t68;
    }
    convertBytes(t) {
        return new _e(t);
    }
    convertReference(t) {
        const n57 = this.convertDocumentKey(t, this.firestore._databaseId);
        return new ce(this.firestore, /* converter= */ null, n57);
    }
}
/**
 * Reads the document referred to by the specified document reference.
 *
 * All documents are directly fetched from the server, even if the document was
 * previously read or modified. Recent modifications are only reflected in the
 * retrieved `DocumentSnapshot` if they have already been applied by the
 * backend. If the client is offline, the read fails. If you like to use
 * caching or see local modifications, please use the full Firestore SDK.
 *
 * @param reference - The reference of the document to fetch.
 * @returns A Promise resolved with a `DocumentSnapshot` containing the current
 * document contents.
 */ function gr(t69) {
    const n57 = ne((t69 = st(t69, ce)).firestore), e26 = new _r(t69.firestore);
    return Zn(n57, [
        t69._key
    ]).then((n58)=>{
        b(1 === n58.length);
        const r10 = n58[0];
        return new Ge(t69.firestore, e26, t69._key, r10.isFoundDocument() ? r10 : null, t69.converter);
    });
}
/**
 * Executes the query and returns the results as a {@link QuerySnapshot}.
 *
 * All queries are executed directly by the server, even if the the query was
 * previously executed. Recent modifications are only reflected in the retrieved
 * results if they have already been applied by the backend. If the client is
 * offline, the operation fails. To see previously cached result and local
 * modifications, use the full Firestore SDK.
 *
 * @param query - The `Query` to execute.
 * @returns A Promise that will be resolved with the results of the query.
 */ function br(t69) {
    !function(t70) {
        if (on(t70) && 0 === t70.explicitOrderBy.length) throw new U(x, "limitToLast() queries require specifying at least one orderBy() clause");
    }((t69 = st(t69, ae))._query);
    const n57 = ne(t69.firestore), e26 = new _r(t69.firestore);
    return Xn(n57, t69._query).then((n58)=>{
        const r10 = n58.map((n59)=>new He(t69.firestore, e26, n59.key, n59, t69.converter)
        );
        return on(t69._query) && // Limit to last queries reverse the orderBy constraint that was
        // specified by the user. As such, we need to reverse the order of the
        // results to return the documents in the expected order.
        r10.reverse(), new Ye(t69, r10);
    });
}
function vr(t69, n57, e26) {
    const r10 = yr((t69 = st(t69, ce)).converter, n57, e26), s9 = Ve(Re(t69.firestore), "setDoc", t69._key, r10, null !== t69.converter, e26);
    return Jn(ne(t69.firestore), [
        s9.toMutation(t69._key, bn.none())
    ]);
}
function Er(t69, n57, e26, ...r10) {
    const s9 = Re((t69 = st(t69, ce)).firestore);
    // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    let i4;
    i4 = "string" == typeof (n57 = _util.getModularInstance(n57)) || n57 instanceof pe ? Oe(s9, "updateDoc", t69._key, n57, e26, r10) : xe(s9, "updateDoc", t69._key, n57);
    return Jn(ne(t69.firestore), [
        i4.toMutation(t69._key, bn.exists(!0))
    ]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * The deletion will only be reflected in document reads that occur after the
 * returned promise resolves. If the client is offline, the
 * delete fails. If you would like to see local modifications or buffer writes
 * until the client is online, use the full Firestore SDK.
 *
 * @param reference - A reference to the document to delete.
 * @returns A `Promise` resolved once the document has been successfully
 * deleted from the backend.
 */ function Ir(t69) {
    return Jn(ne((t69 = st(t69, ce)).firestore), [
        new Tn(t69._key, bn.none())
    ]);
}
/**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * The result of this write will only be reflected in document reads that occur
 * after the returned promise resolves. If the client is offline, the
 * write fails. If you would like to see local modifications or buffer writes
 * until the client is online, use the full Firestore SDK.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @returns A `Promise` resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend.
 */ function Tr(t69, n57) {
    const e26 = de(t69 = st(t69, he)), r10 = yr(t69.converter, n57), s9 = Ve(Re(t69.firestore), "addDoc", e26._key, r10, null !== e26.converter, {
    });
    return Jn(ne(t69.firestore), [
        s9.toMutation(e26._key, bn.exists(!1))
    ]).then(()=>e26
    );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
 * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
 */ function Ar() {
    return new Ne("deleteField");
}
/**
 * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
 * include a server-generated timestamp in the written data.
 */ function Pr() {
    return new $e("serverTimestamp");
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */ function Rr(...t69) {
    // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we'd need the Firestore instance to do this.
    return new Fe("arrayUnion", t69);
}
/**
 * Returns a special value that can be used with {@link (setDoc:1)} or {@link
 * updateDoc:1} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements - The elements to remove from the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */ function Vr(...t69) {
    // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we'd need the Firestore instance to do this.
    return new Se("arrayRemove", t69);
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n - The value to increment by.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */ function Nr(t69) {
    return new qe("increment", t69);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */ class Dr {
    /** @hideconstructor */ constructor(t69, n57){
        this._firestore = t69, this._commitHandler = n57, this._mutations = [], this._committed = !1, this._dataReader = Re(t69);
    }
    set(t, n, e) {
        this._verifyNotCommitted();
        const r10 = $r(t, this._firestore), s9 = yr(r10.converter, n, e), i4 = Ve(this._dataReader, "WriteBatch.set", r10._key, s9, null !== r10.converter, e);
        return this._mutations.push(i4.toMutation(r10._key, bn.none())), this;
    }
    update(t, n, e, ...r) {
        this._verifyNotCommitted();
        const s9 = $r(t, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        let i4;
        return i4 = "string" == typeof (n = _util.getModularInstance(n)) || n instanceof pe ? Oe(this._dataReader, "WriteBatch.update", s9._key, n, e, r) : xe(this._dataReader, "WriteBatch.update", s9._key, n), this._mutations.push(i4.toMutation(s9._key, bn.exists(!0))), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */ delete(t) {
        this._verifyNotCommitted();
        const n58 = $r(t, this._firestore);
        return this._mutations = this._mutations.concat(new Tn(n58._key, bn.none())), this;
    }
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `Promise` resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */ commit() {
        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }
    _verifyNotCommitted() {
        if (this._committed) throw new U(F, "A write batch can no longer be used after commit() has been called.");
    }
}
function $r(t70, n58) {
    if ((t70 = _util.getModularInstance(t70)).firestore !== n58) throw new U(A, "Provided document reference is from a different Firestore instance.");
    return t70;
}
/**
 * Creates a write batch, used for performing multiple writes as a single
 * atomic operation. The maximum number of writes allowed in a single WriteBatch
 * is 500.
 *
 * The result of these writes will only be reflected in document reads that
 * occur after the returned promise resolves. If the client is offline, the
 * write fails. If you would like to see local modifications or buffer writes
 * until the client is online, use the full Firestore SDK.
 *
 * @returns A `WriteBatch` that can be used to atomically execute multiple
 * writes.
 */ function Fr(t70) {
    const n58 = ne(t70 = st(t70, re));
    return new Dr(t70, (t71)=>Jn(n58, t71)
    );
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */ class Sr {
    constructor(t70){
        this.datastore = t70, // The version of each document that was read during this transaction.
        this.readVersions = new Map, this.mutations = [], this.committed = !1, /**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */ this.lastWriteError = null, /**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */ this.writtenDocs = new Set;
    }
    async lookup(t) {
        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new U(A, "Firestore transactions require all reads to be executed before all writes.");
        const n58 = await Zn(this.datastore, t);
        return n58.forEach((t71)=>this.recordVersion(t71)
        ), n58;
    }
    set(t, n) {
        this.write(n.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
    update(t, n) {
        try {
            this.write(n.toMutation(t, this.preconditionForUpdate(t)));
        } catch (t71) {
            this.lastWriteError = t71;
        }
        this.writtenDocs.add(t.toString());
    }
    delete(t) {
        this.write(new Tn(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
    async commit() {
        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
        const t71 = this.readVersions;
        // For each mutation, note that the doc was written.
        this.mutations.forEach((n58)=>{
            t71.delete(n58.key.toString());
        }), // For each document that was read but not written to, we want to perform
        // a `verify` operation.
        t71.forEach((t72, n58)=>{
            const e26 = X.fromPath(n58);
            this.mutations.push(new An(e26, this.precondition(e26)));
        }), await Jn(this.datastore, this.mutations), this.committed = !0;
    }
    recordVersion(t) {
        let n58;
        if (t.isFoundDocument()) n58 = t.version;
        else {
            if (!t.isNoDocument()) throw g();
            // For deleted docs, we must use baseVersion 0 when we overwrite them.
            n58 = _t.min();
        }
        const e26 = this.readVersions.get(t.key.toString());
        if (e26) {
            if (!n58.isEqual(e26)) // This transaction will fail no matter what.
            throw new U(S, "Document version changed between two reads.");
        } else this.readVersions.set(t.key.toString(), n58);
    }
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */ precondition(t) {
        const n58 = this.readVersions.get(t.toString());
        return !this.writtenDocs.has(t.toString()) && n58 ? bn.updateTime(n58) : bn.none();
    }
    /**
     * Returns the precondition for a document if the operation is an update.
     */ preconditionForUpdate(t) {
        const n58 = this.readVersions.get(t.toString());
        // The first time a document is written, we want to take into account the
        // read time and existence
        if (!this.writtenDocs.has(t.toString()) && n58) {
            if (n58.isEqual(_t.min())) // The document doesn't exist, so fail the transaction.
            // This has to be validated locally because you can't send a
            // precondition that a document does not exist without changing the
            // semantics of the backend write to be an insert. This is the reverse
            // of what we want, since we want to assert that the document doesn't
            // exist but then send the update and have it fail. Since we can't
            // express that to the backend, we have to validate locally.
            // Note: this can change once we can send separate verify writes in the
            // transaction.
            throw new U(A, "Can't update a document that doesn't exist.");
            // Document exists, base precondition on document update time.
            return bn.updateTime(n58);
        }
        // Document was not read, so we just use the preconditions for a blind
        // update.
        return bn.exists(!0);
    }
    write(t) {
        this.ensureCommitNotCalled(), this.mutations.push(t);
    }
    ensureCommitNotCalled() {
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */ class qr {
    constructor(t71, n58, e26, r10){
        this.asyncQueue = t71, this.datastore = n58, this.updateFunction = e26, this.deferred = r10, this.Et = 5, this.It = new Yn(this.asyncQueue, "transaction_retry" /* TransactionRetry */ );
    }
    /** Runs the transaction and sets the result on deferred. */ run() {
        this.Et -= 1, this.Tt();
    }
    Tt() {
        this.It.W(async ()=>{
            const t72 = new Sr(this.datastore), n59 = this.At(t72);
            n59 && n59.then((n60)=>{
                this.asyncQueue.enqueueAndForget(()=>t72.commit().then(()=>{
                        this.deferred.resolve(n60);
                    }).catch((t73)=>{
                        this.Pt(t73);
                    })
                );
            }).catch((t73)=>{
                this.Pt(t73);
            });
        });
    }
    At(t) {
        try {
            const n59 = this.updateFunction(t);
            return !ot(n59) && n59.catch && n59.then ? n59 : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
        } catch (t72) {
            // Do not retry errors thrown by user provided updateFunction.
            return this.deferred.reject(t72), null;
        }
    }
    Pt(t) {
        this.Et > 0 && this.Rt(t) ? (this.Et -= 1, this.asyncQueue.enqueueAndForget(()=>(this.Tt(), Promise.resolve())
        )) : this.deferred.reject(t);
    }
    Rt(t) {
        if ("FirebaseError" === t.name) {
            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
            // non-matching document versions with ABORTED. These errors should be retried.
            const n59 = t.code;
            return "aborted" === n59 || "failed-precondition" === n59 || !/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */ function(t72) {
                switch(t72){
                    case E:
                        return g();
                    case I:
                    case T:
                    case P:
                    case $:
                    case O:
                    case C:
                    // Unauthenticated means something went wrong with our token and we need
                    // to retry with new credentials which will happen automatically.
                    case D:
                        return !1;
                    case A:
                    case R:
                    case V:
                    case N:
                    case F:
                    // Aborted might be retried in some scenarios, but that is dependant on
                    // the context and should handled individually by the calling code.
                    // See https://cloud.google.com/apis/design/errors.
                    case S:
                    case q:
                    case x:
                    case L:
                        return !0;
                    default:
                        return g();
                }
            }(n59);
        }
        return !1;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The Platform's 'document' implementation or null if not available. */ function xr() {
    // `document` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */ class Or {
    constructor(t72, n59, e27, r11, s9){
        this.asyncQueue = t72, this.timerId = n59, this.targetTimeMs = e27, this.op = r11, this.removalCallback = s9, this.deferred = new j, this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((t73)=>{
        });
    }
    /**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue - The queue to schedule the operation on.
     * @param id - A Timer ID identifying the type of operation this is.
     * @param delayMs - The delay (ms) before the operation should be scheduled.
     * @param op - The operation to run.
     * @param removalCallback - A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */ static createAndSchedule(t, n, e, r, s) {
        const i4 = Date.now() + e, o3 = new Or(t, n, i4, r, s);
        return o3.start(e), o3;
    }
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */ start(t) {
        this.timerHandle = setTimeout(()=>this.handleDelayElapsed()
        , t);
    }
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */ skipDelay() {
        return this.handleDelayElapsed();
    }
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */ cancel(t) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(I, "Operation cancelled" + (t ? ": " + t : ""))));
    }
    handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(()=>null !== this.timerHandle ? (this.clearTimeout(), this.op().then((t73)=>this.deferred.resolve(t73)
            )) : Promise.resolve()
        );
    }
    clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Cr {
    constructor(){
        // The last promise in the queue.
        this.Vt = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
        // retried with backoff.
        this.Nt = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.Dt = !1, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.$t = [], // visible for testing
        this.Ft = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.St = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.qt = !1, // List of TimerIds to fast-forward delays for.
        this.xt = [], // Backoff timer used to schedule retries for retryable operations
        this.It = new Yn(this, "async_queue_retry" /* AsyncQueueRetry */ ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Ot = ()=>{
            const t73 = xr();
            t73 && m("AsyncQueue", "Visibility state changed to " + t73.visibilityState), this.It.H();
        };
        const t73 = xr();
        t73 && "function" == typeof t73.addEventListener && t73.addEventListener("visibilitychange", this.Ot);
    }
    get isShuttingDown() {
        return this.Dt;
    }
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */ enqueueAndForget(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.enqueue(t);
    }
    enqueueAndForgetEvenWhileRestricted(t) {
        this.Ct(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.Lt(t);
    }
    enterRestrictedMode(t) {
        if (!this.Dt) {
            this.Dt = !0, this.qt = t || !1;
            const n60 = xr();
            n60 && "function" == typeof n60.removeEventListener && n60.removeEventListener("visibilitychange", this.Ot);
        }
    }
    enqueue(t) {
        if (this.Ct(), this.Dt) // Return a Promise which never resolves.
        return new Promise(()=>{
        });
        // Create a deferred Promise that we can return to the callee. This
        // allows us to return a "hanging Promise" only to the callee and still
        // advance the queue even when the operation is not run.
        const n60 = new j;
        return this.Lt(()=>this.Dt && this.qt ? Promise.resolve() : (t().then(n60.resolve, n60.reject), n60.promise)
        ).then(()=>n60.promise
        );
    }
    enqueueRetryable(t) {
        this.enqueueAndForget(()=>(this.Nt.push(t), this.Ut())
        );
    }
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */ async Ut() {
        if (0 !== this.Nt.length) {
            try {
                await this.Nt[0](), this.Nt.shift(), this.It.reset();
            } catch (t74) {
                if (!/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Verifies whether `e` is an IndexedDbTransactionError. */ function(t75) {
                    // Use name equality, as instanceof checks on errors don't work with errors
                    // that wrap other errors.
                    return "IndexedDbTransactionError" === t75.name;
                }(t74)) throw t74;
                // Failure will be handled by AsyncQueue
                m("AsyncQueue", "Operation failed with retryable error: " + t74);
            }
            this.Nt.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
            // This is necessary to run retryable operations that failed during
            // their initial attempt since we don't know whether they are already
            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
            // call scheduled here.
            // Since `backoffAndRun()` cancels an existing backoff and schedules a
            // new backoff on every call, there is only ever a single additional
            // operation in the queue.
            this.It.W(()=>this.Ut()
            );
        }
    }
    Lt(t) {
        const n60 = this.Vt.then(()=>(this.St = !0, t().catch((t74)=>{
                this.Ft = t74, this.St = !1;
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw p("INTERNAL UNHANDLED ERROR: ", /**
 * Chrome includes Error.message in Error.stack. Other browsers do not.
 * This returns expected output of message + stack when available.
 * @param error - Error or FirestoreError
 */ function(t75) {
                    let n61 = t75.message || "";
                    t75.stack && (n61 = t75.stack.includes(t75.message) ? t75.stack : t75.message + "\n" + t75.stack);
                    return n61;
                }(t74)), t74;
            }).then((t74)=>(this.St = !1, t74)
            ))
        );
        return this.Vt = n60, n60;
    }
    enqueueAfterDelay(t, n, e) {
        this.Ct(), // Fast-forward delays for timerIds that have been overriden.
        this.xt.indexOf(t) > -1 && (n = 0);
        const r12 = Or.createAndSchedule(this, t, n, e, (t74)=>this.jt(t74)
        );
        return this.$t.push(r12), r12;
    }
    Ct() {
        this.Ft && g();
    }
    verifyOperationInProgress() {
    }
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */ async kt() {
        // Operations in the queue prior to draining may have enqueued additional
        // operations. Keep draining the queue until the tail is no longer advanced,
        // which indicates that no more new operations were enqueued and that all
        // operations were executed.
        let t74;
        do t74 = this.Vt, await t74;
        while (t74 !== this.Vt)
    }
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */ Mt(t) {
        for (const n60 of this.$t)if (n60.timerId === t) return !0;
        return !1;
    }
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */ Bt(t) {
        // Note that draining may generate more delayed ops, so we do that first.
        return this.kt().then(()=>{
            // Run ops in the same order they'd run if they ran naturally.
            this.$t.sort((t74, n60)=>t74.targetTimeMs - n60.targetTimeMs
            );
            for (const n60 of this.$t)if (n60.skipDelay(), "all" /* All */  !== t && n60.timerId === t) break;
            return this.kt();
        });
    }
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */ Qt(t) {
        this.xt.push(t);
    }
    /** Called once a DelayedOperation is run or canceled. */ jt(t) {
        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
        const n60 = this.$t.indexOf(t);
        this.$t.splice(n60, 1);
    }
}
class Lr {
    /** @hideconstructor */ constructor(t74, n60){
        this._firestore = t74, this._transaction = n60, this._dataReader = Re(t74);
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */ get(t) {
        const n61 = $r(t, this._firestore), e28 = new _r(this._firestore);
        return this._transaction.lookup([
            n61._key
        ]).then((t75)=>{
            if (!t75 || 1 !== t75.length) return g();
            const r12 = t75[0];
            if (r12.isFoundDocument()) return new Ge(this._firestore, e28, r12.key, r12, n61.converter);
            if (r12.isNoDocument()) return new Ge(this._firestore, e28, n61._key, null, n61.converter);
            throw g();
        });
    }
    set(t, n, e) {
        const r12 = $r(t, this._firestore), s10 = yr(r12.converter, n, e), i4 = Ve(this._dataReader, "Transaction.set", r12._key, s10, null !== r12.converter, e);
        return this._transaction.set(r12._key, i4), this;
    }
    update(t, n, e, ...r) {
        const s10 = $r(t, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        let i4;
        return i4 = "string" == typeof (n = _util.getModularInstance(n)) || n instanceof pe ? Oe(this._dataReader, "Transaction.update", s10._key, n, e, r) : xe(this._dataReader, "Transaction.update", s10._key, n), this._transaction.update(s10._key, i4), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */ delete(t) {
        const n61 = $r(t, this._firestore);
        return this._transaction.delete(n61._key), this;
    }
}
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */ function Ur(t75, n61) {
    const e28 = ne(t75 = st(t75, re)), r12 = new j;
    return new qr(new Cr, e28, (e29)=>n61(new Lr(t75, e29))
    , r12).run(), r12.promise;
}
/**
 * Firestore Lite
 *
 * @remarks Firestore Lite is a small online-only SDK that allows read
 * and write access to your Firestore database. All operations connect
 * directly to the backend, and `onSnapshot()` APIs are not supported.
 * @packageDocumentation
 */ !function(t75) {
    f = t75;
}(`${_app.SDK_VERSION}_lite`), _app._registerComponent(new _component.Component("firestore/lite", (t75, { options: n61  })=>{
    const e28 = t75.getProvider("app").getImmediate(), r12 = new re(e28, new Q(t75.getProvider("auth-internal")));
    return n61 && r12._setSettings(n61), r12;
}, "PUBLIC" /* PUBLIC */ )), _app.registerVersion("firestore-lite", "3.0.1", "node");

},{"@firebase/app":"3wZLz","@firebase/component":"inEPs","@firebase/logger":"A0nlJ","@firebase/util":"3qRMM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jUTZ8":[function() {},{}],"9CH5F":[function(require,module,exports) {
=======
},{"react":"6TuXu"}],"hrVig":[function() {},{}],"jUTZ8":[function() {},{}],"9CH5F":[function(require,module,exports) {
>>>>>>> Stashed changes
module.exports = require('./helpers/bundle-url').getBundleURL('3VpAv') + "edwardian-script-itc-regular.1a4ac1b3.ttf";

},{"./helpers/bundle-url":"8YnfL"}]},["2rAXy","6a0zu","dLPEP"], "dLPEP", "parcelRequiree681")

//# sourceMappingURL=index.6701a6e1.js.map
